## Database Security Guide

<!-- image -->

## Database Security Guide

<!-- image -->

## Notice regarding this document

This document in PDF form is provided as a courtesy to customers who have requested documentation in this format: It is provided As-Is without warranty or maintenance commitment:

## Contents

Using roles after migrating from IBM Informix

| Using roles after migrating from IBM Informix Dynamic Server                                                        | 150                              |
|---------------------------------------------------------------------------------------------------------------------|----------------------------------|
| Chapter 3. Using trusted contexts and trusted connections                                                           | 151                              |
| Trusted contexts and trusted connections Role membership inheritance through trusted                                | 153                              |
| context Rules for switching the user ID on an explicit                                                              | 156                              |
| trusted connection _                                                                                                | 157                              |
| Trusted context problem determination _                                                                             | 159                              |
| Chapter 4. Row and column access                                                                                    | Chapter 4. Row and column access |
| control (RCAC) overview                                                                                             | 161                              |
| and column access control (RCAC) rules Row                                                                          | 162                              |
| SQL statements for managing RCAC rules.                                                                             | 162                              |
| Built-in functions for managing RCAC permissions and masks                                                          | 163                              |
| Scenario: ExampleHMO row and column access control using                                                            | 163                              |
| Scenario: ExampleHMO row and column access control Security policies using                                          | 163                              |
| Scenario: ExampleHMO row and column access control Database users and roles using                                   | 164                              |
| Scenario: ExampleHMO row and column access control Database tables Scenario: ExampleHMO row and column using using  | 165                              |
| access control Security administration _ Scenario:                                                                  | 167                              |
| ExampleHMO using row and column access control Row permissions                                                      | 168                              |
| Scenario: ExampleHMO row and column access control Column masks using                                               | 169                              |
| Scenario: ExampleHMO row and column access control Data insertion using                                             | 170                              |
| Scenario: ExampleHMO using Iow and column access control                                                            | 171                              |
| Data updates Scenario: ExampleHMO row and column using                                                              | 171                              |
| access control Data queries Scenario: ExampleHMO using row and column                                               | 173                              |
| access control View creation Scenario: ExampleHMO row and column access control Secure functions using              | 174                              |
| Scenario: ExampleHMO using rOw and column access control Secure triggers                                            | 176                              |
| Scenario: ExampleHMO row and column using                                                                           |                                  |
| access control Revoke authority Scenario: ExampleBANK row and column using                                          | 177                              |
| access control Scenario: ExampleBANK row and column using                                                           | 177                              |
| access control Security policies Scenario: ExampleBANK row and column access control Database users and roles using | 178                              |
| Scenario: ExampleBANK row and column using                                                                          | 178                              |
| access control Database tables                                                                                      | 179                              |

| Configuring transparent LDAP for authentication and group lookup (AIX)_                                                                                                                                            |                                                                                                                                                                                                                    | 241                                                                                                                                                     |                                                 |                                                 |
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------|-------------------------------------------------|
| Configuring transparent LDAP for authentication and group lookup (Linux)                                                                                                                                           | Configuring transparent LDAP for authentication and group lookup (Linux)                                                                                                                                           | 244                                                                                                                                                     |                                                 |                                                 |
| Configuring the LDAP plug-in modules                                                                                                                                                                               | Configuring the LDAP plug-in modules                                                                                                                                                                               | 245                                                                                                                                                     |                                                 |                                                 |
| Enabling the LDAP plug-in modules                                                                                                                                                                                  | Enabling the LDAP plug-in modules                                                                                                                                                                                  | 248                                                                                                                                                     |                                                 |                                                 |
| Connecting with an LDAP user ID                                                                                                                                                                                    | Connecting with an LDAP user ID                                                                                                                                                                                    | 248                                                                                                                                                     |                                                 |                                                 |
| Considerations for group lookup                                                                                                                                                                                    | Considerations for group lookup                                                                                                                                                                                    | 250                                                                                                                                                     |                                                 |                                                 |
| Troubleshooting authenticating LDAP users or                                                                                                                                                                       | Troubleshooting authenticating LDAP users or                                                                                                                                                                       | Troubleshooting authenticating LDAP users or                                                                                                            |                                                 |                                                 |
|                                                                                                                                                                                                                    |                                                                                                                                                                                                                    | 250                                                                                                                                                     |                                                 |                                                 |
| retrieving groups security plug-ins Writing                                                                                                                                                                        | retrieving groups security plug-ins Writing                                                                                                                                                                        | 251                                                                                                                                                     |                                                 |                                                 |
| How Db2 loads security plug-ins _                                                                                                                                                                                  | How Db2 loads security plug-ins _                                                                                                                                                                                  | 251                                                                                                                                                     |                                                 |                                                 |
| Restrictions for developing security plug-in                                                                                                                                                                       | Restrictions for developing security plug-in                                                                                                                                                                       | Restrictions for developing security plug-in                                                                                                            |                                                 |                                                 |
| libraries                                                                                                                                                                                                          |                                                                                                                                                                                                                    | 252                                                                                                                                                     |                                                 |                                                 |
| Restrictions on security plug-ins                                                                                                                                                                                  | Restrictions on security plug-ins                                                                                                                                                                                  | 254                                                                                                                                                     |                                                 |                                                 |
| Return codes for security plug-ins                                                                                                                                                                                 | Return codes for security plug-ins                                                                                                                                                                                 | 256                                                                                                                                                     |                                                 |                                                 |
| Error message handling for security plug-ins                                                                                                                                                                       | Error message handling for security plug-ins                                                                                                                                                                       | 258                                                                                                                                                     |                                                 |                                                 |
| Calling sequences for the security plug-in APIs                                                                                                                                                                    | Calling sequences for the security plug-in APIs                                                                                                                                                                    | 259                                                                                                                                                     | Calling sequences for the security plug-in APIs | Calling sequences for the security plug-in APIs |
| Chapter 9. Security plug-in APIs APIs for group retrieval plug-ins                                                                                                                                                 | Chapter 9. Security plug-in APIs APIs for group retrieval plug-ins                                                                                                                                                 | 264                                                                                                                                                     |                                                 |                                                 |
| db2secDoesGroupExist API Check if group exists db2secFreeErrormsg API Free error message memory                                                                                                                    | db2secDoesGroupExist API Check if group exists db2secFreeErrormsg API Free error message memory                                                                                                                    | 265 266                                                                                                                                                 |                                                 |                                                 |
| db2secFreeGroupListMemory API Free group                                                                                                                                                                           | db2secFreeGroupListMemory API Free group                                                                                                                                                                           | db2secFreeGroupListMemory API Free group                                                                                                                |                                                 |                                                 |
| list memory db2secGetGroupsForUser API Get list of groups for user db2secGroupPluginInit API Initialize group                                                                                                      | list memory db2secGetGroupsForUser API Get list of groups for user db2secGroupPluginInit API Initialize group                                                                                                      | 267                                                                                                                                                     |                                                 |                                                 |
| plug-in Clean db2secPluginTerm up group plug-in resources                                                                                                                                                          | plug-in Clean db2secPluginTerm up group plug-in resources                                                                                                                                                          | 271 271                                                                                                                                                 |                                                 |                                                 |
|                                                                                                                                                                                                                    | APIs for user ID / password authentication plug-ins                                                                                                                                                                | 277                                                                                                                                                     |                                                 |                                                 |
| db2secClientAuthPluginInit API Initialize client authentication plug-in db2secClientAuthPluginTerm API Clean up client authentication plug-in resources                                                            | db2secClientAuthPluginInit API Initialize client authentication plug-in db2secClientAuthPluginTerm API Clean up client authentication plug-in resources                                                            | db2secClientAuthPluginInit API Initialize client authentication plug-in db2secClientAuthPluginTerm API Clean up client authentication plug-in resources |                                                 |                                                 |
| db2secDoesAuthIDExist Check if authentication ID exists db2secFreeInitInfo API Clean up resources                                                                                                                  | db2secDoesAuthIDExist Check if authentication ID exists db2secFreeInitInfo API Clean up resources                                                                                                                  | 278                                                                                                                                                     |                                                 |                                                 |
| held by the db2secGenerateInitialCred db2secFreeToken API                                                                                                                                                          | held by the db2secGenerateInitialCred db2secFreeToken API                                                                                                                                                          | 279                                                                                                                                                     |                                                 |                                                 |
| Free memory held by token db2secGenerateInitialCred API credentials db2secGetAuthIDs API                                                                                                                           | Free memory held by token db2secGenerateInitialCred API credentials db2secGetAuthIDs API                                                                                                                           | 280                                                                                                                                                     |                                                 |                                                 |
| Generate initial Get authentication IDs db2secGetDefaultLoginContext API Get                                                                                                                                       | Generate initial Get authentication IDs db2secGetDefaultLoginContext API Get                                                                                                                                       | 280                                                                                                                                                     |                                                 |                                                 |
| default login context dbzsecProcessServerPrincipalName API                                                                                                                                                         | default login context dbzsecProcessServerPrincipalName API                                                                                                                                                         | 283                                                                                                                                                     |                                                 |                                                 |
| Process service principal name returned from server dbzsecRemapUserid API Remap user ID and password _ db2secServerAuthPluginInit Initialize server authentication plug-in db2secServerAuthPluginTerm API Clean up | Process service principal name returned from server dbzsecRemapUserid API Remap user ID and password _ db2secServerAuthPluginInit Initialize server authentication plug-in db2secServerAuthPluginTerm API Clean up | 285 286                                                                                                                                                 |                                                 |                                                 |
| server authentication plug-in resources db2secValidatePassword API Validate                                                                                                                                        | server authentication plug-in resources db2secValidatePassword API Validate                                                                                                                                        | server authentication plug-in resources db2secValidatePassword API Validate                                                                             |                                                 |                                                 |
| password _                                                                                                                                                                                                         | password _                                                                                                                                                                                                         | password _                                                                                                                                              |                                                 |                                                 |
|                                                                                                                                                                                                                    |                                                                                                                                                                                                                    | 290                                                                                                                                                     |                                                 |                                                 |

| Required APIs and definitions for GSS-API        |   Required APIs and definitions for GSS-API |
|--------------------------------------------------|---------------------------------------------|
| authentication plug-ins                          |                                         293 |
| Restrictions for GSS-API authentication plug-ins |                                         294 |

Chapter 10. Communication buffer

| exit libraries 295 Communication exit library deployment 295                                                 |
|--------------------------------------------------------------------------------------------------------------|
| Communication exit library location . 296 Naming conventions and permissions of                              |
| communication exit libraries 296                                                                             |
| Enabling communication exit libraries outside of                                                             |
| 297                                                                                                          |
| Db2 pureScale environments Enabling communication exit libraries in Db2                                      |
| pureScale environments 298                                                                                   |
| Communication exit library problem                                                                           |
| determination 298                                                                                            |
| Communication exit library development 299                                                                   |
| How                                                                                                          |
| communication exit library is loaded 299                                                                     |
| Communication exit APIs 300 Communication buffer exit library functions library                              |
| structure 308                                                                                                |
| Communication buffer exit library information                                                                |
| structure 310 Communication exit library buffer structure 311 Communication buffer exit library control over |
| connections 311                                                                                              |
| Communication exit library API versions 311                                                                  |
| Communication exit error handing and library                                                                 |
| return codes 312                                                                                             |
| Communication exit                                                                                           |
| library development                                                                                          |
| 312                                                                                                          |
| restrictions                                                                                                 |
| library API calling                                                                                          |
| Communication exit sequences 314                                                                             |

| Chapter 11. Audit facility record layouts 321   |
|-------------------------------------------------|
| Audit record object types 321                   |

Audit record layout for AUDIT events

CHECKING access approval reasons

Audit record layout for CHECKING events

CHECKING access attempted types

Audit record layout for SECMAINT events

Audit record layout for OBJMAINT events

SECMAINT privileges or authorities

Audit record layout for VALIDATE events

Audit record layout for SYSADMIN events

Audit record layout for CONTEXT events

323

326

327

329

332

335

340

343

345

348

Audit events

Audit record layout for EXECUTE events

354

Chapter 12. Working with operating

| Chapter 12. Working with operating system security               | 361                                            |                                                                  |                                                                  |                                                                  |                                                                  |
|------------------------------------------------------------------|------------------------------------------------|------------------------------------------------------------------|------------------------------------------------------------------|------------------------------------------------------------------|------------------------------------------------------------------|
| Db2 and Windows security                                         | 361                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Authentication scenarios.                                        | 362                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Support for global groups (Windows)                              | 363                                            | Support for global groups (Windows)                              | Support for global groups (Windows)                              | Support for global groups (Windows)                              | Support for global groups (Windows)                              |
| User authentication and group information with                   | User authentication and group information with | User authentication and group information with                   | User authentication and group information with                   | User authentication and group information with                   | User authentication and group information with                   |
| DB2 on Windows                                                   | 363                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Defining which users hold SYSADM authority                       | Defining which users hold SYSADM authority     | Defining which users hold SYSADM authority                       | Defining which users hold SYSADM authority                       | Defining which users hold SYSADM authority                       | Defining which users hold SYSADM authority                       |
| Windows                                                          | 369                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Windows LocalSystem account support                              | 370                                            | Windows LocalSystem account support                              | Windows LocalSystem account support                              | Windows LocalSystem account support                              | Windows LocalSystem account support                              |
| Extended Windows security the DBZADMNS and DBZUSERS groups using | 370                                            | Extended Windows security the DBZADMNS and DBZUSERS groups using | Extended Windows security the DBZADMNS and DBZUSERS groups using | Extended Windows security the DBZADMNS and DBZUSERS groups using | Extended Windows security the DBZADMNS and DBZUSERS groups using |
| Considerations for Windows7: User Access                         | Considerations for Windows7: User Access       | Considerations for Windows7: User Access                         | Considerations for Windows7: User Access                         | Considerations for Windows7: User Access                         | Considerations for Windows7: User Access                         |
| Control feature                                                  | 374                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Db2 and UNIX security                                            | 375                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| Db2 and Linux security                                           | 375                                            |                                                                  |                                                                  |                                                                  |                                                                  |
| password support (Linux) Change                                  | 375                                            | password support (Linux) Change                                  | password support (Linux) Change                                  | password support (Linux) Change                                  | password support (Linux) Change                                  |
| Deploying change password plug-in (Linux)                        | 375                                            | Deploying change password plug-in (Linux)                        | Deploying change password plug-in (Linux)                        | Deploying change password plug-in (Linux)                        | Deploying change password plug-in (Linux)                        |
| Index                                                            | 377                                            | Index                                                            | Index                                                            | Index                                                            | Index                                                            |

## Figures

| 1_   | Instance-level authorities                            |   27 | Deploying Security Plug-ins on Db2 Clients   | 226   |
|------|-------------------------------------------------------|------|----------------------------------------------|-------|
| 2_   | Database-level authorities                            |   28 | Deploying Security Plug-ins on Db2 Servers   | 227   |
| 3    | Object Privileges                                     |   42 | Authentication Using Windows Domains         | 362   |
|      | Architecture of InfoSphere Guardium Data Encryption _ |   92 |                                              |       |

## Tables

| 1   | Authentication Modes TRUST_ALLCLNTS and TRUST_CLNTAUTH using                                            |
|-----|---------------------------------------------------------------------------------------------------------|
|     | Parameter Combinations_                                                                                 |
| 2   |                                                                                                         |
|     | Internal system-defined routine needed by non-SECADM users_ 29                                          |
| 3_  | Built-in routines with no default PUBLIC                                                                |
|     | privilege 51 SSL support between the HADR primary and                                                   |
| 4_  | standby servers: 73                                                                                     |
| 5_  | Environment variable settings for GSKit                                                                 |
|     | libraries on Linux, UNIX, and Windows                                                                   |
|     | operating systems 99                                                                                    |
| 6_  | Connection events 120                                                                                   |
|     | Audit stored procedures and table system                                                                |
| 7.  |                                                                                                         |
| 8   | functions 129                                                                                           |
|     | Sequence of statements to demonstrate effect of ROLLBACK TO SAVEPOINT statement 132                     |
| 9   |                                                                                                         |
|     | users 149                                                                                               |
| 10. | Example groups and Example values for security label 193                                                |
| 11. | Summary of the DBZLBACRULES rules 195 Examples of applying the                                          |
| 12. |                                                                                                         |
|     | DBZLBACREADSET and                                                                                      |
| 13. |                                                                                                         |
|     | DBZLBACWRITESET rules 196                                                                               |
|     | Examples of applying the                                                                                |
|     | DBZLBACREADTREE and                                                                                     |
|     | DBZLBACWRITETREE rules_ 197                                                                             |
| 14. | Examples of applying the                                                                                |
|     | DBZLBACREADARRAY rule_ 198                                                                              |
| 15. |                                                                                                         |
|     | Examples of applying the                                                                                |
|     | DBZLBACWRITEARRAY rule: 199                                                                             |
|     | Example values in table T1                                                                              |
| 16. | 204                                                                                                     |
| 17. | Example values in view of table Tl 204 Example values in table Tl Example output from query on table Tl |
|     | 205 205                                                                                                 |
| 18. | Values in the example table T1 after first                                                              |
| 19. |                                                                                                         |
| 20. |                                                                                                         |
|     | 207                                                                                                     |
|     | INSERT statement                                                                                        |
|     | 207                                                                                                     |
|     | Values in example table TL after second                                                                 |
| 21. |                                                                                                         |
|     | INSERT statement Values in example table Tl after third                                                 |
|     | 207                                                                                                     |
|     | INSERT statement                                                                                        |
| 22. | 22.                                                                                                     |

| 23.      | Table T1                                                                           | 208                                                                            |                                                                                    |                                                                                    |
|----------|------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|------------------------------------------------------------------------------------|------------------------------------------------------------------------------------|
| 24.      | Table Tl After Update                                                              | 208                                                                            |                                                                                    |                                                                                    |
| 25.      | Table T1 After Second Update                                                       | 209                                                                            |                                                                                    |                                                                                    |
| 26.      | Table T1                                                                           | 210                                                                            |                                                                                    |                                                                                    |
| 27.      | Jenni's SELECT Query Result                                                        | 210                                                                            |                                                                                    |                                                                                    |
| 28.      | Jenni's UPDATE & SELECT Query Result                                               | 211                                                                            |                                                                                    |                                                                                    |
| 29.      | Table T1                                                                           | 211                                                                            |                                                                                    |                                                                                    |
| 30.      | Table T1                                                                           | 212                                                                            |                                                                                    |                                                                                    |
| 31.      | Database Manager configuration parameters for security authentication plug-ins     | 228                                                                            |                                                                                    |                                                                                    |
| 32.      | Db2 security plug-ins                                                              | 232                                                                            |                                                                                    |                                                                                    |
| 33.      | Server-related values                                                              | 246                                                                            |                                                                                    |                                                                                    |
| 34.      | User-related values                                                                | 246                                                                            |                                                                                    |                                                                                    |
| 35.      | Group-related values                                                               | 246                                                                            |                                                                                    |                                                                                    |
| 36.      | Miscellaneous values                                                               | 247                                                                            |                                                                                    |                                                                                    |
|          | For 64-bit UNIX and Linux systems                                                  | 248                                                                            |                                                                                    |                                                                                    |
| 38.      | For 32-bit UNIX and Linux systems                                                  | 248                                                                            | For 32-bit UNIX and Linux systems                                                  | For 32-bit UNIX and Linux systems                                                  |
| 39.      | For Windows systems (both 64-bit and 32-bit)                                       | 248                                                                            | For Windows systems (both 64-bit and 32-bit)                                       | For Windows systems (both 64-bit and 32-bit)                                       |
| 40.      | Security plug-in return codes                                                      | 256                                                                            | Security plug-in return codes                                                      | Security plug-in return codes                                                      |
| 41.      | Required APIs and Definitions for GSS-API authentication plug-ins                  | 293                                                                            | Required APIs and Definitions for GSS-API authentication plug-ins                  | Required APIs and Definitions for GSS-API authentication plug-ins                  |
| 42_      | Return codes that a communication exit library can return to the database manager: | 312                                                                            | Return codes that a communication exit library can return to the database manager: | Return codes that a communication exit library can return to the database manager: |
| 43.      | Audit Record Object Types Based on Audit Events                                    | 321                                                                            | Audit Record Object Types Based on Audit Events                                    | Audit Record Object Types Based on Audit Events                                    |
| 44_      | Audit Record Layout for AUDIT Events                                               | 323                                                                            | Audit Record Layout for AUDIT Events                                               | Audit Record Layout for AUDIT Events                                               |
| 45.      | Audit record layout for CHECKING events                                            | 326                                                                            | Audit record layout for CHECKING events                                            | Audit record layout for CHECKING events                                            |
| 46.      | Audit Record Layout for OBJMAINT Events                                            | 332                                                                            | Audit Record Layout for OBJMAINT Events                                            | Audit Record Layout for OBJMAINT Events                                            |
| 47 . 48. | Audit Record Layout for SECMAINT Events Audit Record Layout for SYSADMIN Events    | 336 344                                                                        | Audit Record Layout for SECMAINT Events Audit Record Layout for SYSADMIN Events    | Audit Record Layout for SECMAINT Events Audit Record Layout for SYSADMIN Events    |
| 49.      |                                                                                    | 346                                                                            |                                                                                    |                                                                                    |
|          | Audit Record Layout for VALIDATE Events Audit Record Layout for CONTEXT Events     | Audit Record Layout for VALIDATE Events Audit Record Layout for CONTEXT Events | Audit Record Layout for VALIDATE Events Audit Record Layout for CONTEXT Events     | Audit Record Layout for VALIDATE Events Audit Record Layout for CONTEXT Events     |
| 50.      |                                                                                    | 347                                                                            |                                                                                    |                                                                                    |
| 51.      | Audit Record Layout for EXECUTE Events                                             | 349                                                                            | Audit Record Layout for EXECUTE Events                                             | Audit Record Layout for EXECUTE Events                                             |
| 52.      | Successful Connection Using a Domain Controller _                                  | Successful Connection Using a Domain Controller _                              | Successful Connection Using a Domain Controller _                                  | Successful Connection Using a Domain Controller _                                  |
| 53.      | Privileges for DBZADMNS and DBZUSERS                                               | Privileges for DBZADMNS and DBZUSERS                                           | Privileges for DBZADMNS and DBZUSERS                                               | Privileges for DBZADMNS and DBZUSERS                                               |
|          | groups                                                                             | 373                                                                            | groups                                                                             | groups                                                                             |

## Chapter 1. Db2 security model

Two modes of security control access to the Db2 database system data and functions. Access to the Db2 database system is managed by facilities that reside outside the Db2 database system (authentication), whereas access within the Db2 database system is managed by the database manager (authorization).

## Authentication

Authentication is the process by which a system verifies a user's identity: User authentication is completed by a security facility outside the Db2 database system, through an authentication security plug-in module: A default authentication security plug-in module that relies on operating-system-based authentication is included when you install the Db2 database For your convenience, the Db2 database manager also with authentication plug-in modules for Kerberos and lightweight directory access protocol (LDAP): To provide even greater flexibility in accommodating your specific authentication needs, YOu can build your own authentication security plug-in module: system: ships

The authentication process produces a Db2 authorization ID. Group membership information for the user is also acquired authentication. Default acquisition of group information relies on an operating-system based group-membership plug-in module that is included when you install the Db2 database system. If you prefer; you can acquire group membership information by a group-membership plug-in module, such as LDAP during using specific

## Authorization

After a user is authenticated, the database manager determines if that user is allowed to access Db2 data or resources. Authorization is the process whereby the Db2 database manager obtains information about the authenticated user; indicating which database operations that user can perform, and which data objects that user can access.

The different sources of permissions available to an authorization ID are as follows:

- 1\_ Primary permissions: those granted to the authorization ID directly:
- 2. Secondary permissions: those granted to the groups and roles in which the authorization ID is a member:
- 3. Public permissions: those granted to PUBLIC
- 4\_ Context-sensitive permissions: those granted to a trusted context role:

Authorization can be given to users in the following categories:

- System-level authorization
- The system administrator (SYSADM), control (SYSCTRL) , system maintenance (SYSMAINT) , and system monitor (SYSMON) authorities provide varying degrees of control over instance-level functions Authorities provide a way both to group privileges and to control maintenance and utility operations for instances, databases, and database objects. system
- Database-level authorization

The security administrator (SECADM), database administrator (DBADM), database access control (ACCESSCTRL), database data access (DATAACCESS) ,

## Authentication

SQL administrator (SQLADM), workload management administrator (WLMADM) , and explain (EXPLAIN) authorities provide control within the database: Other database authorities include LOAD (ability to load data into a table) , and CONNECT (ability to connect to a database)

- Object-level authorization

Object level authorization involves checking privileges when an operation is performed on an object: For example, to select from table a user must have SELECT privilege on a table (as a minimum).

- Content-based authorization

Views provide a way to control which columns or rows of a table specific users can read: Label-based access control (LBAC) determines which users have read and write access to individual rows and individual columns.

You can use these features, in conjunction with the Db2 audit facility for monitoring access, to define and manage the level of security your database installation requires

## Related information:

Best practices: IBM Data Server Security

Authentication of a user is completed security facility outside of the Db2 database The security facility can be part of the operating or separate product: using system. system

The security facility requires two items to authenticate a user: a user ID and a password. The user ID identifies the user to the security By supplying the correct password, information known only to the user and the security facility the user's identity (corresponding to the user ID) is verified. facility:

Note: In non-root installations, operating system-based authentication must be enabled by running the dbzrfe command.

## A authenticated: fter being

- A list of groups to which the user belongs is obtained. Group membership may be used when authorizing the user: Groups are security facility entities that must also map to Db2 authorization names. This mapping is done in a method similar to that used for user IDs:
- The user must be identified to Db2 an SQL authorization name or authid. This name can be the same as the user ID, or mapped value: For example, on UNIX operating systems, when you are the default security plug-in module, a Db2 authid is derived by transforming to uppercase letters a UNIX user ID that follows Db2 naming conventions using using

The Db2 database manager uses the security facility to authenticate users in one of two ways:

- successful security system login is used as evidence of identity, and allows:
- Use of local commands to access local data
- Use of remote connections when the server trusts the client authentication:
- Successful validation of a user ID and password by the security facility is used as evidence of identity and allows:
- Use of remote connections where the server requires of authentication proof

## Authorization

- Use of operations where the user wants to run a command under an identity other than the identity used for login.

Note: On some UNIX systems, the Dbzdatabase manager can failed password attempts with the operating system, and detect when a client has exceeded the number of allowable login tries, as specified by the LOGINRETRIES parameter: log

Authorization is performed using Db2 facilities. Db2 tables and configuration files are used to record the permissions associated with each authorization name:

When an authenticated user tries to access data, these recorded permissions are compared with the permissions of:

- The authorization name of the user
- The groups to which the user belongs
- The roles granted to the user directly or indirectly through a group or role
- The permissions acquired through a trusted context

Based on this comparison, the Db2 server determines whether to allow the requested access.

The types of permissions recorded are privileges, authority levels, and LBAC credentials.

privilege defines single permission for an authorization name, enabling a user to create or access database resources Privileges are stored in the database catalogs.

Authority levels provide a method of grouping privileges and control over database operations Database authorities are stored in the database catalogs; system authorities are associated with group membership, and the group names that are associated with the authority levels are stored in the database manager configuration file for a given instance:

LBAC credentials are LBAC security labels and LBAC rule exemptions that allow access to data protected by label-based access control (LBAC): LBAC credentials are stored in the database catalogs.

Groups provide a convenient means of performing authorization for a collection of users without having to grant or revoke privileges for each user individually: Unless otherwise specified, group authorization names can be used anywhere that authorization names are used for authorization purposes. In general, group membership is considered for dynamic SQL and non-database object authorizations (such as instance level commands and utilities), but is not considered for static SQL. The exception to this general case occurs when privileges are granted to PUBLIC: these are considered when static SQL is processed. Specific cases where group membership does not apply are noted throughout the Db2 documentation where applicable:

A role is database object that groups together one or more privileges and can be assigned to users, groups, PUBLIC, or other roles by using a GRANT statement or to trusted context by using a CREATE TRUSTED CONTEXT or ALTER TRUSTED CONTEXT statement A role can be specified for the SESSION\_USER ROLE connection attribute in workload definition. When you use roles, you

associate access permissions on database objects with the roles. Users that are members of those roles then have the privileges defined for the role with which to access database objects:

Roles provide similar functionality as groups; perform authorization for a collection of users without having to grant or revoke privileges for each user individually: One advantage of roles is that are managed by the Db2 database system: The permissions granted to roles are taken into consideration the authorization process for views, triggers, materialized query tables (MQTs), packages and SQL routines, unlike the permissions granted to groups. Permissions granted to groups are not considered during the authorization process for views, triggers, MQTs, packages and SQL routines, because the Db2 database system cannot discover when membership in a group changes, and s0 it cannot invalidate the objects mentioned previously, if appropriate: they they during

Note: Permissions granted to roles that are granted to groups are not considered during the authorization process for views, triggers, MQTs, packages and SQL routines:

During an SQL statement processing, the permissions that the Db2 authorization model considers are the union of the following permissions:

- 1. The permissions granted to the primary authorization ID associated with the SQL statement
- 2. The permissions granted to the secondary authorization IDs (groups or roles) associated with the SQL statement
- 3. The permissions granted to PUBLIC, including roles that are granted to PUBLIC, directly or indirectly through other roles.
- 4 The permissions granted to the trusted context role, if applicable:

## Security considerations when installing and using the Db2 database manager

Security considerations are important to the Db2 administrator from the moment the product is installed.

To complete the installation of the Db2 database manager; a user ID, a group name, and password are required: The GUI-based Db2 database manager install program creates default values for different user IDs and the group. Different or Windows operating systems:

- On UNIX and Linux operating systems, if you choose to create a Db2 instance in the instance setup window, the Db2 database install program creates, by default, different users for the DAS (dasusr), the instance owner (dbzinst), and the fenced user (db2fenc) Optionally, you can specify different user names
- The Db2 database install program appends a number from 1-99 to the default user name, until a user ID that does not already exist can be created. For example, if the users db2instl and db2inst2 already exist, the Db2 database install program creates the user db2inst3. If a number greater than 10 is used, the character portion of the name is truncated in the default user ID. For example, if the user ID db2fenc9 already exists, the Db2 database install program truncates the € in the user ID, then appends the 10 (db2fenl0). Truncation does not occur when the numeric value is appended to the default DAS user (for example, dasusr24):

- On Windows operating systems, the Db2 database install program creates, by default; the user dbzadmin for the DAS user; the instance owner; and fenced users (you can specify a different user name during setup, if you want): Unlike Linux and UNIXoperating systems, no numeric value is appended to the user ID

To minimize the risk of a user other than the administrator from learning of the defaults and them in an improper fashion within databases and instances, change the defaults the install to new or existing user ID of your choice: using during

Note: Response file installations do not use default values for user IDs or group names\_ These values must be

Passwords are very important when authenticating users. If no authentication requirements are set at the operating system level and the database is the operating to authenticate users, users will be allowed to connect: example on Linux and UNIX operating systems, undefined passwords are treated as NULL. In this situation, any user without a defined password will be considered to have a NULL password. From the operating system's perspective, this is a match and the user is validated and able to connect to the database. Use passwords at the operating system level if you want the operating system to do the authentication of users for your database: using For system

When working with partitioned database environments on Linux and UNIoperating systems, the Db2 database manager by default uses the rsh utility (remsh on HP-UX) to run some commands on remote members. The rsh transmits passwords in clear text over the network, which can be a security exposure if the Db2 server is not on a secure network. You can use the DBZRSHCMD registry variable to set the remote shell program to a more secure alternative that avoids this exposure. One example of a more secure alternative is ssh. See the DBZRSHCMD registry variable documentation for restrictions on remote shell configurations utility

After installing the Db2 database manager; also review, and change (if required) , the default privileges that have been granted to users. By default, the installation process grants administration (SYSADM) privileges to the following users on each operating system: system

## Linux and UNIX operating systems

To valid Db2 database user name that belongs to the primary group of the instance owner:

## Windows environments

- To members of the local Administrators group.
- If the Db2 database manager is configured to enumerate groups for users at the location where the users are defined, to members of the Administrators group at the Domain Controller: You use the DBZ  GRP LOOKUP environment variable to configure group enumeration on Windows operating systems.
- If Windows extended security is enabled, to members of the DBZADMNS group. The location of the DBZADMNS group is decided during installation.
- To the LocalSystem account

By updating the database manager configuration parameter sysadm\_group, the administrator can control which group of users possesses SYSADM privileges. You

must use the following guidelines to complete the security requirements for both the Db2 database installation and the subsequent instance and database creation.

group defined as the system administration group (by updating sysadm\_group) must exist: The name of this group should allow for easy identification as the group created for instance owners. User IDs and groups that to this group have system administrator authority for their corresponding instances: Any belong

The administrator should consider creating an instance owner user ID that is easily recognized as associated with particular instance: This user ID should have as one of its groups, the name of the SYSADM group created previously Another recommendation is to use this instance-owner user ID only as member of the instance owner group and not to use it in any other group. This should control the proliferation of user IDs and groups that can modify the instance: being

The created user ID must be associated with a password to provide authentication before permitted entry into the data and databases within the instance: The recommendation when creating a password is to follow your organization's password naming guidelines. being

Note: To avoid accidentally deleting or overwriting instance configuration or other files, administrators should consider another user account, which does not to the same primary group as the instance owner; for day-to-day administration tasks that are performed on the server directly: using belong

## File permission requirements for the instance and database directories

The Db2 database system requires that your instance and database directories have minimum level of permissions

Note: When the instance and database directories are created by the Db2 database manager; the permissions are accurate and should not be changed:

The minimum permissions of the instance directory and the NODEOOOx /sqldbdir directory on UNIX and Linux machines must be: U-rwx and go-rx The meaning of the letters is explained in the following table:

| Character   | Represents:   |
|-------------|---------------|
|             | User (owner)  |
| g           | Group         |
| 0           | Other users   |
|             | Read          |
|             | Write         |
| X           | Execute       |

For example, the permissions for the instance, dbzinstl, in /home are drwxr-Xr-X 36 dbzinstl db2grpl 4096  Jun 15 11:13 dbzinstl

For the directories containing the databases, each and every directory level up to and including NODEOOOx needs the following permissions: drwxrwxr-X 11 dbzinstl dbzgrpl 4096   Jun 14 15:53 NODEOOOO /

For example, if a database is located in /db2/data/dbzinstl/dbzinstl/NODEOOOO then the directories: /db2, /dbz/data, /dbz/data/dbzinstl, /dbz/data/dbzinstl/ dbzinstl and /dbz/data/dbzinstl/dbzinstl/NODEOOOO need drwxrwxr-X

Within the NODEOOOx directory, the sqldbdir directory requires the permissions drwxrwxr-X, for example:

drwx--

5 dbzinstl dbzgrpl

256 Jun 14 14:17 SAMPLE/

drwxr-X--

dbzinstl dbzgrpl

4096  Jun 14

drwxrwxr-X

2 dbzinstl dbzgrpl

256 Jun 14 13:02 sq]dbdir/

## CAUTION:

To maintain the security of your files, do not change the permissions on the DBNAME directories (such as SAMPLE) and the SQLxxxx directories from the permissions are assigned when the Db2 database manager creates them: they

## Authentication details

## Authentication methods for your server

Access to an instance or database first requires that the user be authenticated. The authentication type for each instance determines how and where a user will be verified.

The authentication type is stored in the configuration file at the server: It is initially set when the instance is created. There is one authentication type per instance, which covers access to that database server and all the databases under its control.

If you intend to access data sources from a federated database, you must consider data source authentication processing and definitions for federated authentication types.

Note: You can check the following website for certification information about the cryptographic routines used by the Db2 database management system to perform encryption of the user ID and password when SERVER\_ENCRYPT authentication, and of the user ID, password, and user data when using DATA ENCRYPT authentication: http:, /www.ibm com / security / standards, st\_evaluations shtml: using

## Switching User on an Explicit Trusted Connection

For CLI/ODBC and XA CLI/ODBC applications, the authentication mechanism when processing a switch user request that requires authentication is the same as the mechanism used to originally establish the trusted connection itself. Therefore, any other negotiated security attributes (for example, encryption algorithm, encryption and plug-in names) used the establishment of the explicit trusted connection are assumed to be the same for any authentication TM required for a switch user request on that trusted connection. Java applications allow the authentication method to be changed on switch user request (by use of datasource property) used keys,. during

Because a trusted context object can be defined such that switching user on trusted connection does not require authentication, in order to take full advantage of the switch user on an explicit trusted connection feature, user-written security plug-ins must be able to:

- Accept a user ID-only token

- Return valid Db2 authorization ID for that user ID

Note: An explicit trusted connection cannot be established if the CLIENT type of authentication is in effect:

## Authentication types provided

The following authentication types are provided:

## SERVER

Specifies that authentication occurs on the server through the security mechanism in effect for that configuration, for example, through a security plug-in module: The default security mechanism is that if a user ID and password are specified during the connection or attachment attempt, are sent to the server and compared to the valid user ID and password combinations at the server to determine if the user is permitted access the instance: they to

Note: The server code detects whether a connection is local or remote: For local connections, when authentication is SERVER, a user ID and password are not required for authentication to be successful.

## SERVER ENCRYPT

Specifies that the server accepts encrypted SERVER authentication schemes. If the client authentication is not specified, the client is authenticated the method selected at the server: The user ID and password are encrypted when using

When the resulting authentication method negotiated between the client and server is SERVER\_ENCRYPT, you can choose to encrypt the user ID and password an AES (Advanced Encryption Standard) 256-bit algorithm. To do this, set the alternate\_auth\_ enc database manager configuration parameter: This configuration parameter has three using settings:

- AESCMP means that if the connecting client proposes DES but supports AES encryption, the server renegotiates for AES encryption
- NOT\_SPECIFIED (default) means that the server accepts the encryption algorithm that the client proposes, including an AES 256-bit algorithm:
- AES\_ONLY means that the server accepts only AES encryption: If the client does not support AES encryption, the connection is rejected.

AES encryption can be used only when the authentication method negotiated between the client and server is SERVER\_ENCRYPT

## CLIENT

Specifies that authentication occurs on the database partition where the application is invoked operating system security: The user ID and password specified a connection or attachment attempt are compared with the valid user ID and password combinations on the client node to determine whether the user ID is permitted access to the instance: No further authentication will take place on the database server: This is sometimes called single signon. using during

If the user performs local or client login, the user is known only to that local client workstation.

If the remote instance has CLIENT authentication, two other parameters determine the final authentication type: trust\_allcInts and

## CLIENT level security for TRUSTED clients only:

Trusted clients are clients that have a reliable, local security system.

When the authentication type of CLIENT has been selected, an additional option might be selected to protect against clients whose operating environment has no inherent security:

To protect against unsecured clients, the administrator can select Trusted Client Authentication by the trust allclnts parameter to NO. This implies that all trusted platforms can authenticate the user on behalf of the server: Untrusted clients are authenticated on the Server and must provide a user ID and password. You use the trust\_allcInts configuration parameter to indicate whether you are trusting clients. The default for this parameter is YES. setting

Note: It is possible to trust all clients (trust\_allcInts is YES) have some of those clients as those who do not have a native safe security system for authentication. yet

You might also want to complete authentication at the server even for trusted clients. To indicate where to validate trusted clients, you use the trust\_clntauth configuration parameter: The default for this parameter is CLIENT.

Note: For trusted clients only, if no user ID Or password is explicitly provided when attempting to CONNECT or ATTACH, then validation of the user takes place at the client: The trust\_clntauth parameter is only used to determine where to validate the information provided on the USER or USING clauses.

To protect against all clients, including JCC type 4 clients on 2/OS and System but excluding native Db2 clients on 2/OS,0S/390 VM, VSE , and System i, set the trust\_allcInts parameter to DRDAONLY. Only these clients can be trusted to perform client-side authentication. All other clients must provide a user ID and password to be authenticated by the server:

The trust\_clntauth parameter is used to determine where the clients mentioned previously are authenticated: if trust\_clntauth is CLIENT, authentication takes place at the client: If trust\_clntauth is SERVER, authentication takes place at the client when no user ID and password are provided and at the server when a user ID and password are provided

Table 1. Authentication Modes using TRUST\_ALLCLNTS and TRUST\_CLNTAUTH Parameter Combinations:

| trust_ allclnts   | trust_ clntauth   | Untrusted non- DRDA Client Authen- tication (no user ID & password)   | Untrusted non- DRDA Client Authen- tication (with user ID & password)   | Trusted non- DRDA Client Authen- tication (no user ID & password)   | Trusted non- DRDA Client Authen- tication (with user ID & password)   | DRDA Client Authen- tication (no user ID & password)   | DRDA Client Authen- tication (with user ID & password)   |
|-------------------|-------------------|-----------------------------------------------------------------------|-------------------------------------------------------------------------|---------------------------------------------------------------------|-----------------------------------------------------------------------|--------------------------------------------------------|----------------------------------------------------------|
| YES               | CLIENT            | CLIENT                                                                | CLIENT                                                                  | CLIENT                                                              | CLIENT                                                                | CLIENT                                                 | CLIENT                                                   |
| YES               | SERVER            | CLIENT                                                                | SERVER                                                                  | CLIENT                                                              | SERVER                                                                | CLIENT                                                 | SERVER                                                   |

Table 1. Authentication Modes using TRUST\_ALLCLNTS and TRUST\_CLNTAUTH Parameter Combinations   (continued)

| trust allclnts   | trust clntauth   | Untrusted non- DRDA Client Authen- tication (no user ID & password)   | Untrusted non- DRDA Client Authen- tication (with user ID & password)   | Trusted non- DRDA Client Authen- tication (no user ID & password)   | Trusted non- DRDA Client Authen- tication (with user ID & password)   | DRDA Client Authen- tication (no user ID & password)   | DRDA Client Authen- tication (with user ID & password)   |
|------------------|------------------|-----------------------------------------------------------------------|-------------------------------------------------------------------------|---------------------------------------------------------------------|-----------------------------------------------------------------------|--------------------------------------------------------|----------------------------------------------------------|
| NO               | CLIENT           | SERVER                                                                | SERVER                                                                  | CLIENT                                                              | CLIENT                                                                | CLIENT                                                 | CLIENT                                                   |
| NO               | SERVER           | SERVER                                                                | SERVER                                                                  | CLIENT                                                              | SERVER                                                                | CLIENT                                                 | SERVER                                                   |
| DRDAONLY         | CLIENT           | SERVER                                                                | SERVER                                                                  | SERVER                                                              | SERVER                                                                | CLIENT                                                 | CLIENT                                                   |
| DRDAONLY         | SERVER           | SERVER                                                                | SERVER                                                                  | SERVER                                                              | SERVER                                                                | CLIENT                                                 | SERVER                                                   |

## DATA ENCRYPT

The server accepts encrypted SERVER authentication schemes and the encryption of user data: The authentication works the same way as that shown with SERVER\_ENCRYPT The user ID and password are encrypted when are sent over the network from the client to the server: they

The following user data are encrypted when using this authentication type:

- SQL and XQuery statements.
- SQL program variable data:
- Output data from the server processing of an SQL or XQuery statement and including a description of the data.
- Some or all of the answer set data resulting from a query:
- Large object (LOB) data streaming:
- SQLDA descriptors

## DATA ENCRYPT\_CMP

The server accepts encrypted SERVER authentication schemes and the encryption of user data. In addition, this authentication type allows compatibility with down level products not supporting DATA ENCRYPT authentication type: These products are permitted to connect with the SERVER ENCRYPT authentication type and without encrypting user data. Products supporting the new authentication type must use it: This authentication type is only valid in the server's database manager configuration file and is not valid when used on the CATALOG DATABASE command.

## KERBEROS

Used when both the Db2 client and server are on operating systems that support the Kerberos security protocol. The Kerberos security protocol performs authentication as third party authentication service by using conventional cryptography to create a shared secret This becomes a user's credential and is used to verify the identity of users all occasions when local or network services are requested: The eliminates the need to pass the user name and password across the network as clear text. the Kerberos security protocol enables the use of a single sign-on to a remote Db2 database server: The KERBEROS authentication type is supported on various operating systems, see the related information section for more information. key: key during key Using

Kerberos authentication works as follows:

- 1. A user logging on to the client machine a domain account authenticates to the Kerberos distribution center (KDC) at the domain controller: The distribution center issues a ticket-granting ticket (TGT) to the client: using key key
- 2 During the first phase of the connection the server sends the target principal name, which is the service account name for the Db2 database server service, to the client: the server's target principal name and the target-granting ticket, the client requests a service ticket from the ticket-granting service (TGS) which also resides at the domain controller: If both the client's ticket-granting ticket and the server's target principal name are valid, the TGS issues a service ticket to the client: The principal name recorded in the database directory can be specified as name/instance@REALM. (This is in addition to Windows:) Using
- 3 The client sends this service ticket to the server using the communication channel (which can be, as an example, TCP /IP)
- 4\_ The server validates the client's server ticket. If the client's service ticket is valid, then the authentication is completed.

It is possible to the databases on the client machine and explicitly specify the Kerberos authentication type with the server's target principal name\_ In this way, the first of the connection can be bypassed. catalog phase

If a user ID and password are specified, the client will request the ticket-granting ticket for that user account and use it for authentication.

## KRB\_SERVER ENCRYPT

Specifies that the server accepts KERBEROS authentication or encrypted SERVER authentication schemes. If the client authentication is KERBEROS, the client is authenticated using the Kerberos security system. If the client authentication is SERVER\_ENCRYPT, the client is authenticated user ID and encryption password. If the client authentication is not specified, then the client will use Kerberos if available, otherwise it will use password encryption: For other client authentication types, an authentication error is returned. The authentication type of the client cannot be specified as KRB\_SERVER\_ENCRYPT using

Note: The Kerberos authentication types are supported on clients and servers running on specific operating systems, see the related information section for more information. For Windows operating systems, both client and server machines must either belong to the same Windows domain or belong to trusted domains. This authentication type should be used when the server supports Kerberos and some, but not all, of the client machines support Kerberos authentication:

## GSSPLUGIN

Specifies that the server uses GSS-API plug-in to perform authentication: If the client authentication is not specified, the server returns a list of server-supported plug-ins, including any Kerberos plug-in that is listed in the srvcon\_gssplugin\_list database manager configuration parameter; to the client: The client selects the first plug-in found in the client plug-in directory from the list: If the client does not support any plug-in in the list, the client is authenticated using the Kerberos authentication scheme (if it is

returned): If the client authentication is the GSSPLUGIN authentication scheme, the client is authenticated the first supported plug-in in the list. using

## GSS\_SERVER ENCRYPT

Specifies that the server accepts plug-in authentication or encrypted server authentication schemes. If client authentication occurs through a plug-in, the client is authenticated using the first client-supported plug-in in the list of server-supported plug-ins

If the client authentication is not specified and an implicit connect is performed (that is, the client does not supply a user ID and password when making the connection), the server returns list of server-supported plug-ins, the Kerberos authentication scheme (if one of the plug-ins in the list is Kerberos-based) , and the encrypted server authentication scheme: The client is authenticated the first supported plug-in found in the client plug-in directory If the client does not support any of the plug-ins that are in the list, the client is authenticated using the Kerberos authentication scheme: If the client does not support the Kerberos authentication scheme, the client is authenticated the encrypted server authentication scheme, and the connection will fail because of a missing password. A client supports the Kerberos authentication scheme if Db2 supplied Kerberos plug-in exists for the operating system, Or Kerberos-based plug-in is specified for the srvcon\_gssplugin\_list database manager configuration parameter: being using using

If the client authentication is not specified and an explicit connection is performed (that is, both the user ID and password are supplied), the authentication type is equivalent to SERVER\_ENCRYPT: In this case, the choice of the encryption algorithm used to encrypt the user ID and password depends on the of the alternate auth enc database manager configuration parameter being setting

## Note:

- 1 Do not inadvertently lock yourself out of your instance when you are changing the authentication information, since access to the configuration file itself is protected by information in the configuration file: The following database manager configuration file parameters control access to the instance:
- authentication
- sysadm\_group
- trust\_allclnts
- trust cIntauth
- sysctr]\_group
- sysmaint\_group
- Indicates the two most important parameters.

There are some things that can be done to ensure this does not happen: If you do accidentally lock yourself out of the Db2 database system, have a fail-safe option available on all platforms that will allow you to override the Db2 database security checks to the database manager configuration file a highly privileged local operating system security user: This user always has the privilege to update the database manager configuration file and thereby correct the problem: However; this security bypass is restricted to a local of the database manager configuration file: You cannot use fail-safe user remotely or for any other Db2 database command: This user is identified as follows: you usual update using update special

- UNIX platforms: the instance owner
- Windows platform: someone belonging to the local Administrators' group
- Other platforms: there is no local security on the other platforms, SO all users pass local security checks anyway

## Authentication considerations for remote clients

When you a database for remote access, you can specify the authentication type in the database directory entry catalog

The authentication type is not required. If it is not specified the client will try to connect using the SERVER\_ENCRYPT authentication type first: If the server does not support SERVER\_ENCRYPT, the server returns a list of the authentication types that it supports. The client will use the first authentication type listed to connect to the server: While unspecified, the database catalog listed using the LIST DATABASE DIRECTORY command will not show an authentication type. If the authentication type is not specified in the database directory entry then the client may take longer to connect: If an authentication type is specified, authentication can begin immediately provided that value specified matches that at the server: If a mismatch is detected, Db2 database attempts to recover: Recovery may result in more flows to reconcile the difference, or in an error if the Db2 database cannot recover: In the case of a mismatch, the value at the server is assumed to be correct

The authentication type DATA ENCRYPT\_CMP is designed to allow clients from previous release that does not support data encryption to connect to a server SERVER\_ENCRYPT authentication instead of DATA ENCRYPT. This authentication does not work when the following statements are true: using

- The client level is Version 7.2.
- The gateway level is Version 8 FixPak 7 or later
- The server is Version 8 FixPak 7 or later:

When these are all true, the client cannot connect to the server: To allow the connection, you must either upgrade your client to Version 8 or later; or have your gateway level at Version 8 FixPak 6 or earlier:

The determination of the authentication type used when connecting is made by specifying the appropriate authentication type as a database entry at the gateway: This is true for both Db2 Connect scenarios and for clients and servers in partitioned database environment where the client has set the DBZNODE registry variable. You will the authentication type at the partition with the intent to "hop" to the appropriate partition: In this scenario, the authentication type cataloged at the gateway is not used because the negotiation is solely between the client and the server: catalog catalog catalog

You may have a need to multiple database aliases at the gateway different authentication types if need to have clients that use differing authentication types. When deciding which authentication type to catalog at a gateway; YOU can the authentication type the same as that used at the client and server; Or YOU can use the NOTSPEC authentication type with the understanding that NOTSPEC defaults to SERVER. catalog using they keep

## Partitioned database authentication considerations

In partitioned database, each partition of the database must have the same set of users and groups defined. If the definitions are not the same, the user may be authorized to do different on different partitions. things

Consistency across all partitions is recommended.

## Kerberos authentication

Kerberos is a third-party network authentication protocol that employs a system of shared secret keys to securely authenticate a user in an unsecured network environment: The Db2 database system provides support for the Kerberos authentication protocol on AIXT HP-UX, Solaris, Linux IA32 and AMD64, and Windows operating systems.

## Introduction

Kerberos authentication is managed by three-tiered system in which encrypted service tickets, rather than a plain-text user ID and password pair, are exchanged between the application server and client: These encrypted service tickets, called credentials, are provided by a separate server called the Kerberos Distribution Center (KDC): Credentials have a finite lifetime and are understood only by the client and the server: These features reduce the risk of a security exposure, even if the ticket is intercepted from the network. Each user; or principal in Kerberos terms, possesses a private encryption that is shared with the KDC. Collectively, the principals and computers that are registered with KDC are known as a realm. Key key

One feature of Kerberos is that it provides a single sign-on environment: user must verify identity only once to access the resources within the Kerberos realm: This single sign-on environment means that a user can connect or attach to a Db2 database server without providing a user ID or password. Another advantage is that the administration of user identification is Simplified because Kerberos uses central repository for principals: Finally, Kerberos supports mutual authentication, which enables the client to validate the identity of the server: key

## Setup

Before you can use Kerberos with Db2 database system, you must install and configure the Kerberos layer on all computers. For typical configuration, you must meet the following requirements:

- Create the appropriate principals.
- Ensure that the client and server computers and principals belong to the same realm or to trusted realms. Trusted realms are known as trusted domains in Windows terminology
- Where appropriate, create server keytab files.
- Synchronize the time clocks all computers. Kerberos typically permits a 5-minute time skew; if there is more than a 5-minute time skew; a preauthentication error occurs during an attempt to obtain credentials. on

## Setting up Kerberos for a Db2 server

Before you can use Kerberos authentication with a Db2 database system, you must install and configure the Kerberos layer on all computers For a typical configuration, you must follow the instructions on this page.

## Before you begin

If you are using a Linux, Sun Solaris, or HP-UX operating system, ensure that no Kerberos libraries other than the krb5 are installed on your Otherwise, Kerberos authentication fails, and message is logged in the db2diag files: library system. log

If you are using a Linux or Sun Solaris operating system, uninstall any instances of the IBM Network Authentication Service (NAS) Toolkit, and remove any reference to the NAS installation locations from the system PATH variable: path

## About this task

The use of Kerberos authentication by a Db2 database depends on whether the security authentication was successfully created the credentials provided by the connecting application: Furthermore, whenever available, Kerberos mutual authentication is supported, where the client and server must both prove their identities to use Kerberos. However; other Kerberos features, such as the signing or encryption of messages, are unavailable using

For additional details on installing and configuring Kerberos products on your systems, see / /www.ibm.com / developerworks / data / library / techarticle, dm0603see / index html, or the documentation provided with your Kerberos product: http:/

Kerberos support for a Db2 database provided through the IBMkrb5 GSS-API security plug-in. This plug-in is used for both server and client authentication. The plug-in library is installed Db2 installation in the following locations: system during

- On UNIX and Linux 32-bit operating systems: the sqllib/security32/plugin/ IBM/client and sq]lib/security32/plugin/IBM/server directories
- On UNIX and Linux 64-bit operating systems: the sqllib/securityb4/plugin/ IBM/client and sqllib/security64/plugin/IBM/server directories
- On Windows operating systems: the sq]liblsecuritylplugin| IBM c] ient and IBMI server directories

The source code for the UNIX and Linux plug-in, IBMkrb5.C, is available in the sq]lib/samp]es/security/plugins directory: For 64-bit Windows operating systems, the plug-in library is called IBMkrb564.d11.

## Kerberos and groups

Kerberos does not possess the concept of groups. As a result, the Db2 database instance relies upon the local operating system to obtain a group list for a Kerberos principal. For UNIX and Linux operating systems, this reliance requires an equivalent system account for each principal: For example, for the principal name@REALM, the Db2 database product collects group information by querying the local operating system for all group names to which the operating system user name belongs. If an operating system user name does not exist, the AUTHID belongs only to the PUBLIC group.

On Windows operating systems, a domain account is automatically associated with Kerberos principal. The additional step of creating a separate operating system account is not required:

## Kerberos keytab files

To accept security context requests, every Kerberos service on UNIX or Linux operating must place its credentials in keytab file. This requirement to those principals that the Db2 database instance uses as server principals. Only the default keytab file is searched for the server For instructions on adding a to the keytab see the documentation provided with the Kerberos product: system applies key: file, key

There is no concept of a keytab file on Windows operating systems; the system automatically handles and acquiring the credentials for a principal. storing

You can specify the default keytab file name by using the KRBS\_KTNAME environment variable: However; because the server plug-in runs within Db2 database engine process, this environment variable might not be accessible To avoid this situation, add the KRBS\_KTNAME environment variable to the DBZENVLIST registry variable the dbzset command: using dbzset DBZENVLIST-KRBSKTNAME

As keytab files are not used by Kerberos for Windows, this option is only available for a Linux or UNIX server:

## Procedure

To set up Kerberos for Db2 server:

- 1. Install Kerberos by performing one of the following steps:
- For AIX operating systems, install the NAS (Network Authentication Services) Toolkit for Db2 on AIX, Version 1.4 or later: You can download the NAS package from https: , [wwwibm.com services \_ forms , preLogin do?source-dm-nas.
- For Linux and HP-UX (64-bit only) operating systems, install the Kerberos package, krb5, that is included on your operating system installation media.
- For Sun Solaris operating systems, the Kerberos service is included in the Solaris 10 release. No additional installation is required.
- For Windows operating systems, enable the Active Directory on your domain controller
- 2. Configure the Db2 product to use the Kerberos plug-in. See "Deploying a Kerberos plug-in" on page 238.
- 3\_ Restart the Db2 server

## Naming and mapping for Kerberos

Before you can use Kerberos with Db2 database system, you must ensure that the client and server computers and principals to the same realm or to trusted realms. belong

## Client principals

unique identity that can receive Kerberos tickets for authentication is known as principal. A Kerberos principal identity is defined by either a two-part or multipart format, either name@REALM or name / instance@REALM. Because the name component is used in the authorization ID (AUTHID) mapping, the name must adhere to the Db2 database naming rules. Those rules limit a name to 128 characters and restrict the choice of characters. Any

Note: Windows operating systems directly associate a Kerberos principal identity with a domain user An implication is that Kerberos authentication is unavailable to Windows operating systems that are not associated with a domain or realm. Furthermore, Windows operating systems support only the two-part format for defining principal identities, that is, name@domain.

## Authorization ID mapping

Unlike operating system user IDs, whose scope of existence is usually restricted to single computer; Kerberos principals can be authenticated in realms other than their own. You can avoid the potential problem of duplicate principal names by using the realm name to qualify the principal name: In Kerberos, a qualified principal name takes the following form: fully fully

## name\_ instance@REALM

where instance can be multiple instance names separated by a forward slash (/), for example, name, instancel / instance2@REALM. Alternatively, you can omit the instance field:

The realm name must be unique within all the realms that are defined within a network: A one-to-one mapping is needed between the authorization ID and the principal name, that is, the name field in the qualified principal. This simple mapping is needed because the authorization ID is used as the default schema by the Db2 database manager and should be easily and logically derived. Be aware of the potential issues caused by the following mappings: fully

- Principals with the same name but from different realms are mapped to the same authorization ID. For example, the following two principal names both map to an authorization ID of gregorlx:
- gregorlx@WWWCOM
- gregorlx@EXAMPLE.COM
- Principals with the same name but on different instances are mapped to the same authorization ID. For example, the following two principal names both map to an authorization ID of gregorlx:
- gregorlx/bigmachine@EXAMPLE.COM
- gregorlx/ littlemachine@EXAMPLE.COM

Therefore, follow these guidelines:

- Maintain a unique namespace for a name in all the trusted realms that access the Db2 database server:
- Make all principals with the same name field, regardless of the instance, belong to the same user:

## Server principals

On UNIX and Linux operating systems, the server principal name for the Db2 database instance is assumed to be instance name / fully qualified hostname@REALM This principal must be able to accept Kerberos security contexts, and it must exist before you start the Db2 database instance, because the server name is reported to the Db2 database instance by the plug-in at initialization time.

On Windows operating systems, the server principal is usually identified by the domain account that is used to start the Db2 database service. An exception to this situation is when the instance is started by the LocalSystem account: In this case, the server principal name is reported as host/hostname. This identity is valid only if both the client and server to Windows domains. belong

Windows operating systems do not support names that have more than two parts For example: component / component@REALM. This creates an issue when Windows client attempts to connect to a UNIX server: As result, if you require

interoperability with UNIX Kerberos, you must create a mapping between the Kerberos principal and a Windows account in the Windows domain: For instructions, see the appropriate Windows documentation:

You can override the Kerberos server principal name that is used by the Db2z server on UNIX and Linux operating systems by environment variable to the qualified server principal name The replacement server principal name is recognized by the Db2 database system only after you restart the instance by issuing the db2start command. setting fully

## Kerberos authentication enablement

Before you can use Kerberos with a Db2 database system, you must enable Kerberos authentication:

## Enabling Kerberos authentication on the client

To enable Kerberos authentication on the client, set the clnt\_krb\_plugin database manager configuration parameter to the name of the Kerberos plug-in that you are using:

For local authorizations, the client will use Kerberos if the authentication configuration parameter is set to KERBEROS or KRB\_SERVER\_ENCRYPT. Otherwise, no client-side Kerberos support is assumed\_

Important: No checks are performed to validate that Kerberos support is available:

To enable Kerberos authentication outbound connections to Db2 server, you instead specify Kerberos as the authentication type when you catalog the database, as shown in the following example: on

CATALOG DATABASE testdb AT NODE testnode AUTHENTICATION KERBEROS TARGET PRINCIPAL servicelhost@REALM

However; if you do not provide authentication information, the server sends the name of the server principal to the client:

## Enabling Kerberos authentication on the server

To enable Kerberos authentication on the server; include the Kerberos plug-in name in the list of plug-ins that you specify for the srvcon\_gssplugin\_list database manager configuration parameter on the server: the Kerberos plug-in name in this list enables the client to scan the server and select the Kerberos authentication method when making a connection \_ specific Having

If this configuration parameter is left empty and you set the authentication plug-in, IBMkrb5, is used instead  You can specify only one Kerberos plug-in.

Finally, to use Kerberos for authorization of incoming connections only, set thesvrcon\_auth parameter to one of the following two options:

- KERBEROS to use only Kerberos authentication; or
- KRB\_SERVER\_ENCRYPT to use Kerberos and SERVER ENCRYPT authorization.

If you want to use Kerberos for incoming connections and local authorizations, leave the svrcon\_auth configuration parameter empty and set the value of the authentication configuration parameter to one of the Kerberos options.

## Kerberos plug-in creation

To customize the behavior of Kerberos authentication on Db2 database system, you can develop your own Kerberos authentication plug-ins.

Consider the following when creating Kerberos plug-in: points

- Write the Kerberos plug-in as a GSS-API plug-in, but in the initialization function, set the plugintype variable to DBZSEC\_PLUGIN\_TYPE\_KERBEROS for the function pointer array that is returned to the Db2 database instance:
- Under certain conditions, the server reports the server principal name to the client: The Kerberos plug-in must specify principals in the GSS C NT USERNAME format (that is, server / host@REALM): (that service@host) is not supported: iS,

## Kerberos compatibility

Db2 Kerberos authentication is compatible with IBM System z IBM i, and Windows systems.

## IBM System z and IBM compatibility

To connect to database on an IBM System z or IBM i system, you must the database by the AUTHENTICATION and KERBEROS TARGET PRINCIPAL parameters of the CATALOG DATABASE command: catalog using

Neither IBM System z nor IBM i operating systems support the mutual authentication security feature of Kerberos

## Windows issues

When you are Kerberos on Windows operating systems, be aware of the following issues: using

- Due to the manner in which Windows operating systems detect and report some errors, the following conditions result in a client security plug-in error:
- Expired account
- Invalid password
- Expired password
- Password change forced by administrator
- Disabled account

Furthermore, in all cases, the Db2 administration or the dbzdiag files contain Logon failed or Logon denied messages. log log

- If a domain account name is also defined locally, connections explicitly specifying the domain name and password fail with the following error: The Loca] Security Authority cannot be contacted. The error is result of the Windows operating system locating the local user first: The solution is to fully qualify the user in the connection string, for example name@DOMAIN. IBM. COM
- Windows accounts cannot include the at sign character in their names because the Db2 Kerberos plug-in assumes that the character is the domain name separator
- If the client and server are both on the Windows operating system, you can start the Db2 service using the Loca] System account: However; if the client and server are in different domains, the connection can fail with an invalid target principal name error: To avoid this error; explicitly catalog the target principal on the client with the CATALOG DATABASE command, the fully qualified server host name and the fully qualified domain name: Use the following format: using

host server hostname@server domain name\_ For example, host248/ server34.toronto ibm com@TORONTO.IBMCOM. An alternative to the LocalSystem account is to use valid domain account\_ using

## Maintaining passwords on servers

You might be required to perform password maintenance tasks. Because such tasks are typically required at the server; and many users are not able or comfortable working with the server environment, performing these tasks can pose a significant challenge: The Db2 database system provides a way to and verify passwords without having to be at the server: update

You can assign new passwords when you connect to databases on the following servers for the indicated (and later) releases: Db2 Universal Database Version 8 on AIX and Windows operating systems, Db2 Version 9.1 Fix Pack 3 or later on Linux example, if an error message SQL1404N "Password expired" or SQL3OO82N "Security processing failed with reason 1 (PASSWORD EXPIRED)" is received, use the CONNECT statement to change the password as follows: For

CONNECT TO database USER userid USING password NEW new\_password CONFIRM new\_password

## Authorization, privileges, and object ownership

Users (identified by an authorization ID) can successfully execute operations only if have the authority to perform the specified function. To create table, a user must be authorized to create tables; to alter a table, a user must be authorized to alter the table; and s0 forth: they

The database manager requires that each user be specifically authorized to use each database function needed to perform a specific task A user can acquire the necessary authorization through a of that authorization to their user ID or through membership in role or group that holds that authorization. grant

There are three forms of authorization, administrative authority, privileges, and LBAC credentials. In addition, ownership of objects brings with it a degree of authorization on the objects created: These forms of authorization are discussed in the following section:

## Administrative authority

The person or persons holding administrative authority are charged with the task of controlling the database manager and are responsible for the safety and integrity of the data\_

## System-level authorization

The system-level authorities provide varying degrees of control over instance-level functions:

- SYSADM (system administrator) authority

The SYSADM (system administrator) authority provides control over all the resources created and maintained by the database manager: The system administrator possesses all the authorities of SYSCTRL, SYSMAINT; and SYSMON authority: The user who has SYSADM authority is responsible both for controlling the database manager; and for ensuring the safety and integrity of the data.

- SYSCTRL authority

The SYSCTRL authority provides control over operations that affect system resources For example, a user with SYSCTRL authority can create, update, start, or a database. This user can also start Or an instance, but cannot access table data. Users with SYSCTRL authority also have SYSMON authority: drop stop, stop

- SYSMAINT authority
- SYSMON (system monitor) authority

The SYSMAINT authority provides the authority required to perform maintenance operations on all databases associated with an instance. A user with SYSMAINT authority can the database configuration, backup a database or table space, restore an existing database, and monitor a database: Like SYSCTRL, SYSMAINT does not provide access to table data. Users with SYSMAINT authority also have SYSMON authority: update

The SYSMON (system monitor) authority provides the authority required to use the database system monitor:

## Database-level authorization

The database level authorities provide control within the database:

- DBADM (database administrator)

The DBADM authority level provides administrative authority over single database. This database administrator possesses the privileges required to create objects and issue database commands\_

The DBADM authority can be granted only by user with SECADM authority: The DBADM authority cannot be granted to PUBLIC

- SECADM (security administrator)

The SECADM authority level provides administrative authority for security over single database: The security administrator authority possesses the ability to manage database security objects (database roles, audit policies, trusted contexts, security label components, and security labels) and grant and revoke all database privileges and authorities. A user with SECADM authority can transfer the ownership of objects that do not own: can also use the AUDIT statement to associate an audit policy with particular database Or database object at the server: they They

The SECADM authority has no inherent privilege to access data stored in tables. It can only be granted by a user with SECADM authority: The SECADM authority cannot be granted to PUBLIC

SQLADM (SQL administrator) The SQLADM authority level provides administrative authority to monitor and tune SQL statements within a single database: It can be granted by a user with ACCESSCTRL or SECADM authority:

- WLMADM (workload management administrator)

The WLMADM authority provides administrative authority to manage workload management objects, such as service classes, work action sets, work class sets, and workloads. It can be granted by a user with ACCESSCTRL or SECADM authority:

- EXPLAIN (explain authority)

The EXPLAIN authority level provides administrative authority to explain query plans without gaining access to data. It can only be granted by a user with ACCESSCTRL or SECADM authority

- ACCESSCTRL (database access control authority)

The ACCESSCTRL authority level provides administrative authority to issue the following GRANT (and REVOKE) statements.

- GRANT (Database Authorities) ACCESSCTRL authority does not give the holder the ability to grant ACCESSCTRL, DATAACCESS, DBADM, or SECADM authority: Only
- GRANT (Global Variable Privileges)

user who has SECADM authority can grant these authorities:

- GRANT (Index Privileges)
- GRANT (Module Privileges)
- GRANT (Routine Privileges)
- GRANT (Package Privileges)
- GRANT (Schema Privileges)
- GRANT (Server Privileges)
- GRANT (Sequence Privileges)
- GRANT (Table, View, or Nickname Privileges)
- GRANT (Table Space Privileges)
- GRANT (Workload Privileges)
- GRANT (XSR Object Privileges)

ACCESSCTRL authority can only be granted by a user with SECADM authority: The ACCESSCTRL authority cannot be granted to PUBLIC:

- DATAACCESS (database data access authority)

The DATAACCESS authority level provides the following privileges and authorities:

- LOAD authority
- SELECT, INSERT, UPDATE, DELETE privilege on tables, views, nicknames, and materialized query tables
- EXECUTE privilege on packages
- EXECUTE privilege on modules
- EXECUTE privilege on routines Except on the audit routines: AUDIT ARCHIVE, AUDIT\_LIST\_LOGS,

AUDIT\_DELIM\_EXTRACT:

- READ privilege on all global variables and WRITE privilege on all global variables except variables which are read-only
- USAGE privilege on all XSR objects
- USAGE privilege on all sequences

It can be granted only by a user who holds SECADM authority The DATAACCESS authority cannot be granted to PUBLIC

- Database authorities (non-administrative)

To perform activities such as creating a table Or a routine, Or for loading data into a table, database authorities are required. For example, the LOAD database authority is required for use of the Ioad utility to load data into tables (a user must also have the privilege to insert data into the table): specific

## Privileges

A privilege is a permission to perform an action or task. Authorized users can create objects, have access to objects own, and can pass on privileges on their own objects to other users by using the GRANT statement: they

Privileges may be granted to individual users, to groups, or to PUBLIC PUBLIC is special group that consists of all users, including future users. Users that are members of a group will indirectly take advantage of the privileges granted to the group, where groups are supported:

The CONTROL privilege: Possessing the CONTROL privilege on an object allows a user to access that database object, and to grant and revoke privileges to or from other users that object: on

Note: The CONTROL privilege only apples to tables, views, nicknames, indexes, and packages.

If a different user requires the CONTROL privilege to that object, a user with SECADM or ACCESSCTRL authority could the CONTROL privilege to that object: The CONTROL privilege cannot be revoked from the object owner; however; the object owner can be changed by the TRANSFER OWNERSHIP statement: grant using

Individual privileges: Individual privileges can be granted to allow a user to carry out specific tasks on specific objects. Users with the administrative authorities ACCESSCTRL or SECADM, or with the CONTROL privilege, can grant and revoke privileges to and from users.

Individual privileges and database authorities allow a specific function, but do not include the right to grant the same privileges or authorities to other users The right to table, view, schema, package, routine, and sequence privileges to others can be extended to other users through the WITH GRANT OPTION on the GRANT statement. However; the WITH GRANT OPTION does not allow the person granting the privilege to revoke the privilege once granted: You must have SECADM authority, ACCESSCTRL authority, or the CONTROL privilege to revoke the privilege. grant

Privileges on objects in a package or routine: When a user has the privilege to execute package or routine, do not necessarily specific privileges the objects used in the package or routine: If the package or routine contains static SQL or XQuery statements, the privileges of the owner of the package are for those statements. If the package or routine contains dynamic SQL or XQuery statements, the authorization ID used for privilege checking depends on the setting of the DYNAMICRULES BIND of the package issuing the dynamic query statements, and whether those statements are issued when the package is used in the context of a routine (except on the audit routines: AUDIT\_ARCHIVE, AUDIT\_LIST\_LOGS, AUDIT\_DELIM\_EXTRACT) they require on used option being user or group can be authorized for any combination of individual privileges or authorities. When a privilege is associated with an object, that object must exist: For example, a user cannot be given the SELECT privilege on a table unless that table has previously been created:

Note: Care must be taken when an authorization name representing a user or a group is granted authorities and privileges and there is no user; Or group created

with that name At some later time, a user or a group can be created with that name and automatically receive all of the authorities and privileges associated with that authorization name\_

The REVOKE statement is used to revoke previously granted privileges. The revoking of a privilege from an authorization name revokes the privilege granted by all authorization names\_

Revoking a privilege from an authorization name does not revoke that same privilege from any other authorization names that were granted the privilege by that authorization name\_ For example, assume that CLAIRE grants SELECT WITH GRANT OPTION to RICK, then RICK grants SELECT to BOBBY and CHRIS. If CLAIRE revokes the SELECT privilege from RICK, BOBBY and CHRIS still retain the SELECT privilege.

## LBAC credentials

Label-based access control (LBAC) lets the security administrator decide exactly who has write access and who has read access to individual rows and individual columns. The security administrator configures the LBAC system by creating security policies: A security policy describes the criteria used to decide who has access to what data. Only one security policy can be used to protect any one table but different tables can be protected by different security policies:

After creating security policy, the security administrator creates database objects, called security labels and exemptions that are part of that policy A security label describes a certain set of security criteria. An exemption allows rule for comparing security labels not to be enforced for the user who holds the exemption, when access data protected by that security policy: they

Once created, a security label can be associated with individual columns and rows in a table to protect the data held there. Data that is protected by a security label is called protected data. A security administrator allows users access to protected data by granting them security labels. When user tries to access protected data, that user's security label is compared to the security label protecting the data. The protecting label blocks some security labels and does not block others.

## Object ownership

When an object is created, one authorization ID is assigned ownership of the object: Ownership means the user is authorized to reference the object in any applicable SQL or XQuery statement

When an object is created within a schema, the authorization ID of the statement must have the required privilege to create objects in the implicitly o explicitly specified schema. That is, the authorization name must either be the owner of the schema, or possess the CREATEIN privilege on the schema.

Note: This requirement is not applicable when creating table spaces, buffer or database partition groups. These objects are not created in schemas. pools

When an object is created, the authorization ID of the statement is the definer of that object and by default becomes the owner of the object after it is created:

Note: One exception exists. If the AUTHORIZATION option is specified for the CREATE SCHEMA statement, any other object that is created as part of the

CREATE SCHEMA operation is owned by the authorization ID specified by the AUTHORIZATION objects that are created in the schema after the initial CREATE SCHEMA operation, however; are owned by the authorization ID associated with the specific CREATE statement: option. Any

For example, the statement CREATE SCHEMA SCOTTSTUFF AUTHORIZATION ScOTT CREATE TABLE Tl (C1 INT) creates the schema SCOTTSTUFF and the table SCOTTSTUFF.T1, which are both owned by SCOTT: Assume that the user BOBBY is granted the CREATEIN privilege on the SCOTTSTUFF schema and creates an index on the SCOTTSTUFF . Tl table: Because the index is created after the schema, BOBBY owns the index on SCOTTSTUFF. Tl.

Privileges are assigned to the object owner based the type of object created: being on

- The CONTROL privilege is implicitly granted on newly created tables, indexes, and packages. This privilege allows the object creator to access the database object, and to grant and revoke privileges to or from other users on that object: If a different user requires the CONTROL privilege to that object, a user with ACCESSCTRL or SECADM authority must grant the CONTROL privilege to that object: The CONTROL privilege cannot be revoked by the object owner:
- The CONTROL privilege is implicitly granted on newly created views if the object owner has the CONTROL privilege on all the tables, views, and nicknames referenced by the view definition:
- Other objects like triggers, routines, sequences, table spaces, and buffer do not have a CONTROL privilege associated with them. The object owner does, however; automatically receive each of the privileges associated with the object and those privileges are with the WITH GRANT OPTION, where supported: Therefore the object owner can provide these privileges to other users by using the GRANT statement\_ For example, if USERL creates table space, USERI automatically has the USEAUTH privilege with the WITH GRANT OPTION on this table space and can grant the USEAUTH privilege to other users In addition, the object owner can alter; add comment or drop the object: These authorizations are implicit for the object owner and cannot be revoked: pools on,

Certain privileges on the object, such as altering table, can be granted by the owner; and can be revoked from the owner by a user who has ACCESSCTRL or SECADM authority Certain privileges on the object, such as commenting on table, cannot be granted by the owner and cannot be revoked from the owner: Use the TRANSFER OWNERSHIP statement to move these privileges to another user: When an object is created, the authorization ID of the statement is the definer of that object and by default becomes the owner of the object after it is created. However; when you use the BIND command to create a package and you specify the OWNER authorization id option, the owner of objects created by the static SQL statements in the package is the value of authorization id. In addition, if the AUTHORIZATION clause is specified on a CREATE SCHEMA statement, the authorization name specified after the AUTHORIZATION keyword is the owner of the schema:

A security administrator or the object owner can use the TRANSFER OWNERSHIP statement to change the ownership of a database object: An administrator can therefore create an object on behalf of an authorization ID, by creating the object the authorization ID as the qualifier; and then the TRANSFER OWNERSHIP statement to transfer the ownership that the administrator has on the object to the authorization ID. using using

## Authorities overview

Various administrative authorities exist at the instance level and at the database These administrative authorities group together certain privileges and authorities s0 that YOu can grant them to the users who are responsible for these tasks in your database installation.

## Instance level authorities

Instance level authorities enable you to perform instance-wide functions, such as creating and upgrading databases, managing table spaces, and monitoring activity and performance on your instance No instance-level authority provides access to data in database tables. The following diagram summarizes the abilities given by each of the instance level administrative authorities:

- SYSADM -for users managing the instance as a whole
- SYSMAINT -for users maintaining databases within an instance
- SYSCTRL -for users administering database manager instance
- SYSMON -for users monitoring the instance and its databases

user with higher-level authority also has the abilities given by the lower level authorities. For example, a user with SYSCTRL authority can perform the functions of users with SYSMAINT and SYSMON authority as well:

## SYSADM

Figure 1. Instance-level authorities

<!-- image -->

## Database level authorities

Database level authorities enable you to perform functions within specific database, such as granting and revoking privileges, inserting, selecting, deleting and updating data, and managing workloads. The following diagram summarizes the abilities given by each of the database level authorities. The administrative database authorities are:

- SECADM for users managing security within a database
- DBADM for users administering database
- ACCESSCTRL for users who need to grant and revoke authorities and privileges (except for SECADM, DBADM, ACCESSCTRL, and DATAACCESS authority, SECADM authority is required to grant and revoke these authorities)
- DATAACCESS for users who need to access data
- SQLADM for users who monitor and tune SQL queries

- WLMADM for users who manage workloads
- EXPLAIN for users who need to explain query plans (EXPLAIN authority does not give access to the data itself)

The following diagram shows, where appropriate, which higher level authorities include the abilities given by a lower level authority For example, a user with DBADM authority can perform the functions of users with SQLADM and EXPLAIN authority, and all functions except granting USAGE privilege on workloads, of users with WLMADM authority

## SECADM

- Create, alter , drop and comment on security objects
- Grant and revoke all privileges and authorities
- EXECUTE privilege on audit system-defined routines
- TRANSFER OWNERSHIP statement
- Grant EXECUTE privilege on audit system-defined routines
- SELECT privilege on system catalog tables and views
- AUDIT statement
- CONNECT authority

## ACCESSCTRL

SELECT privilege on system catalog tables and views

Grant and revoke SQLADM, WLMADM; EXPLAIN, BINDADD

CONNECT

CREATETAB, CREATE

CREATE\_NOT\_FENCED\_ROUTINE, IMPLICIT\_SCHEMA,

EXTERNAL\_ROUTINE,

- LOAD, QUIESCE\_CONNECT
- Grant and revoke all privileges on global variables, indexes, nicknames packages, routines (except system-defined audit routines), schemas sequences, servers tables, table spaces views, XSR objects

## DBADM

- Create , alter, drop non-security-related objects
- BINDADD authority
- Read log files
- Create activate, drop event monitors
- Query the state of a table space
- Quiesce table space
- Update log history files
- Use any table space
- Reorganize indexesltables
- Use RUNSTATS

## SQLADM

- CREATE EVENT MONITOR
- DROP EVENT MONITOR
- FLUSH EVENT MONITOR
- SET EVENT MONITOR STATE
- FLUSH OPT. PROFILE CACHE
- FLUSH PACKAGE CACHE
- PREPARE
- REORG INDEXESITABLES
- RUNSTATS
- EXECUTE privilege on all system-defined routines (except audit routines)
- EXPLAIN
- SELECT priv on sys catalog tables and views
- Certain clauses of ALTER SERVICE CLASS, ALTER THRESHOLD, ALTER WORK ACTION SET, ALTER WORKLOAD

## EXPLAIN

- EXPLAIN statement
- PREPARE statement
- EXECUTE privilege on the system-defined explain routines

- CREATETAB authority

## DATAACCESS

- LOAD authority
- SELECT, INSERT, UPDATE, AND DELETE

views, MQTs\_

privileges on all tables, nicknames

and

- (except system-defined audit routines)
- SELECT privilege on system catalog tables and views EXECUTE privilege on all routines
- EXECUTE privilege on all packages
- READ privilege on all global variables and WRITE
- EXECUTE privilege on all modules
- privilege on all global variables which are not read-only
- USAGE privilege on all sequences
- USAGE privilege on all XSR objects
- CONNECT authority
- CREATE\_EXTERNAL ROUTINE authority
- IMPLICIT\_SCHEMA authority
- CREATE NOT FENCED\_ROUTINE authority
- LOAD authority
- QUIESCE\_CONNECT authority

## WLMADM

- and drop workload manager objects
- EXECUTE privilege on the system-defined workload management routines

Grant and revoke USAGE privilege on workloads

## Internal system-defined routine

When Security Administrator (SECADM) users GRANT privileges to individual routines for users, SECADM users might come across certain internal routines. When users do not have the required privileges for these internal routines, operations that require the privilege of these internal routines might fail.

This table can be useful when deploying a restrictive database. Users can encounter missing privilege errors on certain internal routines. SECADM must consult this table and the routine description to decide whether need to grant EXECUTE privilege on the specific internal routine that is failing with an authorization error they

This table can also be useful when the SECADM is trying to harden / secure non-restrictive database. After you receive the report of privileges on internal routines that are granted to the special group PUBLIC, SECADM user can consult this table to decide which internal routines still need EXECUTE privilege granted to specific users, roles, Or groups.

These internal routines, their respective description, and the appropriate criteria to use them in a GRANT statement are as follows:

Table 2. Internal system-defined routine needed by non-SECADM users

## Instance level authorities

## System administration authority (SYSADM)

The SYSADM authority level is the highest level of administrative authority at the instance level. Users with SYSADM authority can run some utilities and issue some database and database manager commands within the instance.

SYSADM authority is assigned to the group specified by the sysadm\_group configuration parameter: Membership in that group is controlled outside the database manager through the security facility used on your platform:

Only user with SYSADM authority can perform the following functions:

- Upgrade database
- Restore a database
- Change the database manager configuration file (including specifying the groups having SYSADM, SYSCTRL, SYSMAINT, or SYSMON authority)

user with SYSADM authority can grant and revoke table space privileges and can also use any table space:

Note: When user with SYSADM authority creates database, that user is automatically granted ACCESSCTRL, DATAACCESS, DBADM and SECADM authority on the database: If you want to prevent that user from accessing that database as database administrator or a security administrator; you must explicitly revoke these database authorities from the user:

In releases before Version 9.7, SYSADM authority included implicit DBADM authority and also provided the ability to grant and revoke all authorities and privileges. In Version 9.7, the Db2 authorization model has been updated to clearly separate the duties of the system administrator; the database administrator; and the security administrator As part of this enhancement, the abilities given by the SYSADM authority have been reduced.

In Version 9.7, only SECADM authority provides the ability to grant and revoke all authorities and privileges.

a user holding SYSADM authority to obtain the same capabilities as in Version 9.5 (other than the ability to SECADM authority), the security administrator must explicitly grant the user DBADM authority and grant the user the new DATAACCESS and ACCESSCTRL authorities. These new authorities can be granted by the GRANT DBADM ON DATABASE statement with the WITH DATAACCESS and WITH ACCESSCTRL options of that statement, which are default options. The DATAACCESS authority is the authority that allows access to data within a specific database, and the ACCESSCTRL authority is the authority that allows a user to grant and revoke privileges and non-administrative authorities within specific database: For grant using

## Considerations for the Windows LocalSystem account

On Windows systems, when the sysadm\_group database manager configuration parameter is not specified, the LocalSystem account is considered a administrator (holding SYSADM authority). Db2 application that is run by LocalSystem is affected by the change in scope of SYSADM authority in Version 9.7. These applications are typically written in the form of Windows services and run under the LocalSystem account as the service logon account: If there is a need for these applications to perform database actions that are no longer within the scope of SYSADM, you must grant the LocalSystem account the required database privileges or authorities. For example, if an application requires database administrator capabilities, the LocalSystem account DBADM authority the GRANT (Database Authorities) statement Note that the authorization ID for the LocalSystem account is SYSTEM system Any grant using

## System control authority (SYSCTRL)

SYSCTRL authority is the highest level of system control authority: This authority provides the ability to perform maintenance and utility operations the database manager instance and its databases. These operations can affect system resources, but do not allow direct access to data in the databases. against they

System control authority is designed for users administering a database manager instance containing sensitive data

SYSCTRL authority is assigned to the group specified by the sysctrI\_group configuration parameter: If a group is specified, membership in that group is controlled outside the database manager through the security facility used on your platform.

Only a user with SYSCTRL authority or higher can perform the following actions:

- Update a database, node, or distributed connection services (DCS) directory
- Create or a database drop
- create, or alter a table space Drop,
- Use any table space

- Restore to a new or an existing database:

In addition, a user with SYSCTRL authority can perform the functions of users with system maintenance authority (SYSMAINT) and system monitor authority (SYSMON):

Users with SYSCTRL authority also have the implicit privilege to connect to a database:

Note: When users with SYSCTRL authority create databases, are automatically granted explicit ACCESSCTRL, DATAACCESS, DBADM, and SECADM authorities on the database. If the database creator is removed from the SYSCTRL group, and if you want to also prevent them from accessing that database as an administrator; you must explicitly revoke the four administrative authorities mentioned previously: they

## System maintenance authority (SYSMAINT)

SYSMAINT authority is the second level of system control authority: This authority provides the ability to perform maintenance and utility operations against the database manager instance and its databases. These operations can affect system resources, but do not allow direct access to data in the databases. they

System maintenance authority is designed for users maintaining databases within a database manager instance that contains sensitive data.

SYSMAINT authority is assigned to the group specified by the sysmaint\_group configuration parameter: If a group is specified, membership in that group is controlled outside the database manager through the security facility used on your platform.

Only a user with SYSMAINT or higher system authority can perform the following actions:

- Restore to an existing database
- Perform roll forward recovery
- Force users off the system
- Start or an instance stop
- Restore a table space
- Run trace, using the dbztrc command
- Take database system monitor snapshots of a database manager instance or its databases

user with SYSMAINT authority can perform the following actions:

- Query the state of a table space
- Update history files log
- Quiesce a table space
- Reorganize a table
- Collect statistics the RUNSTATS utility: catalog using

Users with SYSMAINT authority also have the implicit privilege to connect to a database, and can perform the functions of users with system monitor authority (SYSMON):

## System monitor authority (SYSMON)

SYSMON authority provides the ability to take database system monitor snapshots of a database manager instance or its databases.

SYSMON authority is assigned to the group specified by the sysmon\_group configuration parameter: If a group is specified, membership in that group is controlled outside the database manager through the security facility used on your platform:

SYSMON authority enables the user to run the following commands:

- GET DATABASE MANAGER MONITOR SWITCHES
- GET MONITOR SWITCHES
- GET SNAPSHOT
- LIST (some commands):
- LIST ACTIVE DATABASES
- LIST APPLICATIONS
- LIST DATABASE PARTITION GROUPS
- LIST DCS APPLICATIONS
- LIST PACKAGES
- LIST TABLES
- LIST TABLESPACE  CONTAINERS
- LIST TABLESPACES
- LIST UTILITIES
- RESET MONITOR
- UPDATE

SYSMON authority enables the user to use the following APIs:

- db2GetSnapshotSize Estimate Size Required for db2GetSnapshot() Output Buffer
- db2GetSnapshot Get Snapshot
- db2MonitorSwitches Get/ Update Monitor Switches
- db2ResetMonitor Reset Monitor
- Memory tracker

SYSMON authority enables the user use the following SQL table functions:

- All snapshot table functions without previously running SYSPROCSNAP\_WRITE\_FILE

SYSPROCSNAP\_WRITE\_FILE takes a snapshot and saves its content into a file If any snapshot table functions are called with null input parameters, the file content is returned instead of a real-time snapshot system

Important: The SYSPROC.SNAP\_WRITE\_FILE procedure is deprecated in Version 10.5 and might be removed in a future release. For more information, see "SNAP WRITE\_FILE procedure" in Administrative Routines and Views.

## Database authorities

Each database authority allows the authorization ID holding it to perform some particular type of action on the database as a whole: Database authorities are different from privileges, which allow a certain action to be taken on a particular database object, such as a table or an index:

These are the database authorities:

## ACCESSCTRL

Allows the holder to grant and revoke all object privileges and database

authorities except for privileges on the audit routines, and ACCESSCTRL, DATAACCESS, DBADM, and SECADM authority:

## BINDADD

Allows the holder to create new packages in the database:

## CONNECT

Allows the holder to connect to the database:

## CREATETAB

Allows the holder to create new tables in the database.

## CREATE\_EXTERNAL\_ROUTINE

Allows the holder to create a procedure for use by applications and other users of the database:

## CREATE\_NOT\_FENCED\_ROUTINE

Allows the holder to create a user-defined function (UDF) Or procedure that is not fenced. CREATE\_EXTERNAL\_ROUTINE is automatically granted to any user who is granted CREATE\_NOT\_FENCED\_ROUTINE.

Attention: The database manager does not protect its storage Or control blocks from UDFs or procedures that are not fenced: A user with this authority must, therefore, be very careful to test their UDF extremely well before registering it as not fenced:

## DATAACCESS

Allows the holder to access data stored in database tables:

## DBADM

Allows the holder to act as the database administrator In particular it gives the holder all of the other database authorities except for ACCESSCTRL, DATAACCESS, and SECADM

## EXPLAIN

Allows the holder to query plans without requiring them to hold the privileges to access data in the tables referenced by those query plans: explain

## IMPLICIT\_SCHEMA

Allows any user to create a schema implicitly by creating an object using a CREATE statement with a schema name that does not already exist: SYSIBM becomes the owner of the implicitly created schema and PUBLIC is given the privilege to create objects in this schema.

## LOAD

Allows the holder to load data into a table

## QUIESCE\_CONNECT

Allows the holder to access the database while it is quiesced:

## SECADM

Allows the holder to act as a security administrator for the database:

## SQLADM

Allows the holder to monitor and tune SQL statements.

## WLMADM

Allows the holder to act as a workload administrator: In particular; the holder of WLMADM authority can create and workload manager objects, and revoke workload manager privileges, and execute workload manager routines. drop grant

Only authorization IDs with the SECADM authority can grant the ACCESSCTRL, DATAACCESS, DBADM, and SECADM authorities. All other authorities can be granted by authorization IDs that hold ACCESSCTRL or SECADM authorities.

To remove any database authority from PUBLIC, an authorization ID with ACCESSCTRL or SECADM authority must explicitly revoke it:

## Security administration authority (SECADM)

SECADM authority is the security administration authority for a database: This authority allows to create and manage security-related database objects and to grant and revoke all database authorities and privileges. Additionally the security administrator can execute, and manage who else can execute, the audit system routines specific you

SECADM authority has the ability to SELECT from the tables and views, but cannot access data stored in user tables: catalog catalog

SECADM authority can be granted only by the security administrator (who holds SECADM authority) and can be granted to a user; a group, or role. PUBLIC cannot obtain the SECADM authority directly or indirectly

The database must have at least one authorization ID of type USER with the SECADM authority: The SECADM authority cannot be revoked from every authorization ID of type USER

SECADM authority gives a user the ability to perform the following operations:

- Create, alter; comment 0n, and drop:
- Audit policies
- Security label components
- Security policies
- Trusted contexts
- Create, comment 0n, and drop:
- Roles
- Security labels
- Grant and revoke database privileges and authorities
- The SYSPROCAUDIT\_ ARCHIVE stored procedure and table function archive audit logs:
- Execute the following audit routines to perform the specified tasks:
- The SYSPROC.AUDIT\_LIST\_LOGS table function allows you to locate of interest: logs
- The SYSPROC.AUDIT\_DELIM\_EXTRACT stored procedure extracts data into delimited files for analysis.

Also, the security administrator can grant and revoke EXECUTE privilege on these routines, therefore enabling the security administrator to delegate these tasks, if required. Only the security administrator can EXECUTE privilege on these routines. EXECUTE privilege WITH GRANT OPTION cannot be granted for these routines (SQLSTATE 42501). grant

- Execute the following security routines to perform the specified tasks:
- Change the settings of the encr]ib and encropts database configuration parameters:
- The SYSPROCADMIN\_ROTATE\_MASTER\_KEY stored procedure to rotate the master for an encrypted database: key

- The SYSPROCADMIN\_GET\_ENCRYPTION\_INFO table function to return the encryption information about the database:
- Use of the AUDIT statement to associate an audit policy with a particular database or database object at the server
- Use of the TRANSFER OWNERSHIP statement to transfer objects not owned by the authorization ID of the statement

No other authority gives these abilities

Only the security administrator has the ability to other users, groups, or roles the ACCESSCTRL, DATAACCESS, DBADM, and SECADM authorities. grant

In Version 9.7, the Db2 authorization model has been updated to clearly separate the duties of the system administrator; the database administrator; and the security administrator: As part of this enhancement, the abilities given by the SECADM authority have been extended: In releases before Version 9.7 , SECADM authority did not provide the ability to and revoke all privileges and authorities. Also, SECADM authority could be granted only to a user; not to role or group: itionally, SECADM authority did not provide the ability to grant EXECUTE privilege to other users on the audit built-in procedures and table function: grant

## Database administration authority (DBADM)

DBADM authority is an administrative authority for a specific database: The database administrator possesses the privileges that are required to create objects and issue database commands DBADM authority has SELECT privileges on system catalog tables and views, and can run all built-in Db2 routines, except audit routines and the SET\_MAINT\_MODE\_RECORD\_NO\_TEMPORALHISTORY procedure:

DBADM authority can only be granted or revoked by the security administrator (who holds SECADM authority) and can be granted to a user; group, or role: PUBLIC cannot obtain the DBADM authority either directly or indirectly

Holding the DBADM authority for a database allows user to perform these actions on that database:

- Create, alter; and non-security related database objects drop
- Read files log
- Create, activate, and event monitors drop
- Query the state of a table space
- Update history files log
- Quiesce a table space
- Use any table space
- Reorganize a table
- Collect statistics the RUNSTATS utility catalog using

SQLADM authority and WLMADM authority are subsets of the DBADM authority: WLMADM authority has the additional ability to grant the USAGE privilege on workloads:

## Granting DATAACCESS authority with DBADM authority

The security administrator can specify whether a database administrator can access data within the database: DATAACCESS authority is the authority that allows access to data within a specific database: The security administrator can use the

WITH DATAACCESS of the GRANT DBADM ON DATABASE statement to provide database administrator with this ability If neither the WITH DATAACCESS or WITHOUT DATAACCESS options are specified, by default DATAACCESS authority is granted. option

To grant database administrator authority without DATAACCESS authority, use GRANT DBADM WITHOUT DATAACCESS in your SQL statement:

## Granting ACCESSCTRL authority with DBADM authority

The security administrator can specify whether a database administrator can grant and revoke privileges within the database. ACCESSCTRL authority is the authority that allows a user to grant and revoke privileges and non-administrative authorities within specific database: The security administrator can use the WITH ACCESSCTRL of the GRANT DBADM ON DATABASE statement to provide database administrator with this ability If neither the WITH ACCESSCTRL or WITHOUT ACCESSCTRL options are specified, by default ACCESSCTRL authority is granted: option

To grant database administrator authority without ACCESSCTRL authority, use GRANT DBADM WITHOUT ACCESSCTRL in SQL statement: your

## Revoking DBADM authority

If a security administrator has granted DBADM authority that includes DATAACCESS or ACCESSCTRL authority, to revoke these authorities, the security administrator must explicitly revoke DATAACCESS or ACCESSCTRL authority For example, if the security administrator DBADM authority to user: grants

GRANT DBADM ON DATABASE TO userl

By default, DATAACCESS and ACCESSCTRL authority are also granted to userl.

Later, the security administrator revokes DBADM authority from userl: REVOKE DBADM ON  DATABASE FROM userl

Now userl no longer holds DBADM authority, but still has both DATAACCESS and ACCESSCTRL authority:

To revoke these remaining authorities, the security administrator needs to revoke them explicitly:

REVOKE ACCESSCTRL, DATAACCESS ON DATABASE FROM userl

## Differences for DBADM authority in prior releases

In Version 9.7, the Db2 authorization model has been to clearly separate the duties of the system administrator; the database administrator; and the security administrator: As part of this enhancement, the abilities given by the DBADM authority have changed: In releases before Version 9.7, DBADM authority automatically included the ability to access data and to grant and revoke privileges for database In Version 9.7, these abilities are given by the new authorities, DATAACCESS and ACCESSCTRL as explained earlier: updated

Also, in releases before Version 9.7, granting DBADM authority automatically granted the following authorities too:

- BINDADD

- CONNECT
- CREATETAB
- CREATE\_EXTERNAL\_ROUTINE
- CREATE\_NOT\_FENCED\_ROUTINE
- IMPLICIT\_SCHEMA
- QUIESCE\_CONNECT
- LOAD

Before Version 9.7 , when DBADM authority was revoked these authorities were not revoked:

In Version 9.7, these authorities are now part of DBADM authority: When DBADM authority is revoked in Version 9.7, these authorities are lost:

However; if a user held DBADM authority when you upgraded to Version 9.7, these authorities are not lost if DBADM authority is revoked. Revoking DBADM authority in Version 9.7 causes a user to lose these authorities only if acquired them through holding DBADM authority that was granted in Version 9.7. they

## Access control administration authority (ACCESSCTRL)

ACCESSCTRL authority is the authority required to grant and revoke privileges on objects within specific database. ACCESSCTRL authority has no inherent privilege to access data stored in tables, except the catalog tables and views:

ACCESSCTRL authority can only be granted by the security administrator (who holds SECADM authority): It can be granted to a user; a group, or a role. PUBLIC cannot obtain the ACCESSCTRL authority either directly or indirectly ACCESSCTRL authority gives a user the ability to perform the following

- Grant and revoke the following administrative authorities:

operations:

- EXPLAIN
- SQLADM
- WLMADM
- Grant and revoke the following database authorities:
- BINDADD
- CONNECT
- CREATETAB
- CREATE\_EXTERNAL\_ROUTINE
- CREATE\_NOT\_FENCED\_ROUTINE
- IMPLICIT\_SCHEMA
- LOAD
- QUIESCE\_CONNECT
- Grant and revoke all privileges on the following objects, regardless who granted the privilege:
- Index
- Nickname
- Package
- Routine (except audit routines)
- Schema

- Sequence
- Server
- Table
- Table Space
- View
- XSR Objects
- SELECT privilege on the system catalog tables and views

This authority is a subset of security administrator (SECADM) authority:

## Data access administration authority (DATAACCESS)

DATAACCESS is the authority that allows access to data within a database: specific

DATAACCESS authority can be granted only by the security administrator (who holds SECADM authority). It can be granted to user; a group, or role: PUBLIC cannot obtain the DATAACCESS authority either directly or indirectly:

For all tables, views, materialized query tables, and nicknames it gives these authorities and privileges:

- SELECT privilege (including system catalog tables and views)
- LOAD authority on the database
- INSERT privilege
- UPDATE privilege
- DELETE privilege

In addition, DATAACCESS authority provides the following privileges:

- EXECUTE on all packages
- EXECUTE on all routines (except audit routines, the SET\_MAINT\_MODE\_RECORD\_NO\_TEMPORALHISTORY procedure, the ADMIN\_SET\_MAINT\_MODE procedure, and the encryption related routines ADMIN\_ROTATE\_MASTER\_KEY and ADMIN\_GET\_ENCRYPTION\_INFO)
- EXECUTE on all modules
- READ on all global variables and WRITE on all global variables except variables which are read-only
- USAGE on all XSR objects
- USAGE on all sequences

## SQL administration authority (SQLADM)

SQLADM authority is the authority required to monitor and tune SQL statements.

SQLADM authority can be granted by the security administrator (who holds SECADM authority) or user who possesses ACCESSCTRL authority: SQLADM authority can be granted to a user, a grOup, a role, or to PUBLIC. SQLADM authority gives a user the ability to perform the following functions:

- Execution of the following SQL statements:
- CREATE EVENT MONITOR
- DROP EVENT MONITOR
- EXPLAIN
- FLUSH EVENT MONITOR

- FLUSH OPTIMIZATION PROFILE CACHE
- FLUSH PACKAGE CACHE
- PREPARE
- RUNSTATS
- SET EVENT MONITOR STATE

Note: If the DBZAUTH registry variable is set to SQLADM\_NO\_RUNSTATS\_REORG, users with SQLADM authority will not be able to perform Teorg Or runstats operations.

- Execution of certain clauses of the following workload manager SQL statements:
- The following clauses of the ALTER SERVICE CLASS statement:
- COLLECT AGGREGATE ACTIVITY DATA
- COLLECT AGGREGATE REQUEST DATA
- COLLECT REQUEST METRICS
- The following clause of the ALTER THRESHOLD statement
- WHEN EXCEEDED COLLECT ACTIVITY DATA
- The following clauses of the ALTER WORK ACTION SET statement that allow you to alter a work action:
- ALTER WORK ACTION COLLECT ACTIVITY DATA
- ALTER WORK ACTION COLLECT AGGREGATE ACTIVITY DATA
- ALTER WORK ACTION WHEN EXCEEDED COLLECT ACTIVITY DATA
- The following clauses of the ALTER WORKLOAD statement:
- COLLECT ACTIVITY METRICS
- COLLECT AGGREGATE ACTIVITY DATA
- COLLECT LOCK TIMEOUT DATA
- COLLECT LOCK WAIT DATA
- COLLECT UNIT OF WORK DATA
- SELECT privilege on the tables and views catalog system
- EXECUTE privilege on all built-in Db2 routines (except audit routines and the SET\_MAINT\_MODE\_RECORD\_NO\_TEMPORALHISTORY procedure)

SQLADM authority is a subset of the database administrator (DBADM) authority:

EXPLAIN authority is a subset of the SQLADM authority:

## Workload administration authority (WLMADM)

WLMADM authority is the authority required to manage workload objects for a specific database This authority allows you to create, alter; comment on, and grant and revoke access to workload manager objects. drop,

WLMADM authority can be granted by the security administrator (who holds SECADM authority) or user who possesses ACCESSCTRL authority: WLMADM authority can be granted to a user; group, a role, or to PUBLIC. WLMADM authority gives a user the ability to perform the following operations:

- Create, alter; comment 0n, and the following workload manager objects: drop
- Histogram templates

- Service classes
- Thresholds
- Work action sets
- Work class sets
- Workloads
- Grant and revoke workload privileges
- Execute the built-in workload management routines.

WLMADM authority is a subset of the database administrator authority, DBADM:

## Explain administration authority (EXPLAIN)

EXPLAIN authority is the authority required to explain query plans without gaining access to data for specific database. This authority is subset of the database administrator authority and has no inherent privilege to access data stored in tables\_

EXPLAIN authority can be granted by the security administrator (who holds SECADM authority) or by a user who possesses ACCESSCTRL authority: The EXPLAIN authority can be granted to a user; a grOup, a role, or to PUBLIC. It gives the ability to execute the following SQL statements:

- EXPLAIN
- PREPARE
- DESCRIBE on output of a SELECT statement or of an XQuery statement

EXPLAIN authority also provides EXECUTE privilege on the built-in explain

EXPLAIN authority is a subset of the SQLADM authority:

## LOAD authority

Users LOAD authority at the database level, as well as INSERT privilege on table, can use the LOAD command to load data into a table: having

Note: Having DATAACCESS authority gives a user full access to the LOAD command\_

Users LOAD authority at the database level, as well as INSERT privilege on table, can LOAD RESTART or LOAD TERMINATE if the previous load operation is a load to insert data: having

Users having LOAD authority at the database level, as well as the INSERT and DELETE privileges on table, can use the LOAD REPLACE command\_

If the previous load operation was a load replace, the DELETE privilege must also have been granted to that user before the user can LOAD RESTART or LOAD TERMINATE:

If the exception tables are as part of a load operation, the user must have INSERT privilege on the exception tables: used

The user with this authority can perform QUIESCE TABLESPACES FOR TABLE, RUNSTATS, and LIST TABLESPACES commands.

## Implicit schema authority (IMPLICIT\_SCHEMA) considerations

authority, unless the RESTRICTIVE command

When a new database is created, PUBLIC is given IMPLICIT\_SCHEMA database is specified on the CREATE DATABASE option

With the IMPLICIT\_SCHEMA authority, a user can create a schema by creating an object and specifying a schema name that does not exist: SYSIBM becomes the owner of the implicitly created schema and PUBLIC is given the privilege to create objects in this schema: When the database is restrictive, PUBLIC does not have the CREATEIN privilege on the schema. The user who implicitly creates the schema has CREATEIN privilege on the schema.

If control of who can implicitly create schema objects is required for the database, the database must be created with the RESTRICTIVE specified. If the database is not restrictive, IMPLICIT\_SCHEMA database authority must be revoked from PUBLIC. In this scenario, there are only three ways that a schema object is created: option

- user can create schema with their own authorization name on CREATE SCHEMA statement: Any
- user with DBADM authority can explicitly create any schema which does not exist, and can optionally specify another user as the owner of the schema. Any
- user with DBADM authority has IMPLICIT\_SCHEMA database authority, SO that can implicitly create a schema with any name at the time are creating other database objects. Any they they

## Related information:

Best practices: A practical guide to restrictive databases

## Privileges

## Authorization ID privileges: SETSESSIONUSER

Authorization ID privileges involve actions on authorization IDs. There is currently only one such privilege: the SETSESSIONUSER privilege.

The SETSESSIONUSER privilege can be granted to a user or to a group and allows the holder to switch identities to any of the authorization IDs on which the privilege was granted. The identity switch is made by the SQL statement SET SESSION AUTHORIZATION. The SETSESSIONUSER privilege can only be granted by user holding SECADM authority using

Note: When you upgrade a Version 8 database to Version 9.1, or later; authorization IDs with explicit DBADM authority on that database are automatically granted SETSESSIONUSER privilege on PUBLIC. This prevents breaking applications that rely on authorization IDs with DBADM authority able to set the session authorization ID to any authorization ID. This does not happen when the authorization ID has SYSADM authority but has not been explicitly granted DBADM being

## Schema privileges

Schema privileges are in the object privilege category

Object privileges are shown in Figure 3 on page 42.

Figure 3. Object Privileges

<!-- image -->

Schema privileges involve actions on schemas in a database: user; group, role, or PUBLIC can be granted any of the following privileges:

- CREATEIN allows the user to create objects within the schema.
- ALTERIN allows the user to alter objects within the schema.
- DROPIN allows the user to drop objects from within the schema.

The owner of the schema has all of these privileges and the ability to them to others The objects that are manipulated within the schema object include: tables, views, indexes, packages, data types, functions, triggers, procedures, and aliases. grant

## Table space privileges

The table space privileges involve actions on the table spaces in a database: A user can be granted the USE privilege for a table space, which then allows them to create tables within the table space:

The owner of the table space is granted USE privilege with the WITH GRANT OPTION on the table space when it is created: Also, users who hold SECADM or ACCESSCTRL authority have the ability to USE privilege on the table space: grant

Users who hold SYSADM or SYSCTRL authority are able to use any table space:

Upon creating non-restrictive database, by default, the USE privilege for the table space USERSPACEL is granted to PUBLIC. This privilege can be later revoked.

You cannot GRANT the USE privilege to SYSCATSPACE and any other system temporary table spaces.

## Table and view privileges

Table and view privileges involve actions on tables or views in a database.

user must have CONNECT authority the database to use any of the following privileges: on

- CONTROL provides the user with all privileges for a table or view including the ability to it, and to grant and revoke individual table privileges. You must have ACCESSCTRL or SECADM authority to grant CONTROL. The creator of a table automatically receives CONTROL privilege the table: The creator of a view automatically receives CONTROL privilege only if have CONTROL privilege on all tables, views, and nicknames referenced in the view definition: drop on they
- ALTER allows the user to modify on a table, for example, to add columns o\_ unique constraint to the table: A user with ALTER privilege can also COMMENT ON table, or on columns of the table: For information about the possible modifications that can be performed on table, see the ALTER TABLE and COMMENT statements.
- DELETE allows the user to delete rows from a table or view:
- INDEX allows the user to create an index on table. Creators of indexes automatically have CONTROL privilege on the index
- INSERT allows the user to insert a row into table or view, and to run the IMPORT utility:
- REFERENCES allows the user to create and a foreign specifying the table as the parent in relationship. The user might have this privilege only on columns\_ drop key, specific
- SELECT allows the user to retrieve rows from table or view, to create a view on table, and to run the EXPORT utility
- UPDATE allows the user to change an entry in table, a view, or for one or more specific columns in a table or view. The user may have this privilege only on columns\_ specific

The privilege to grant these privileges to others may also be granted using the WITH GRANT OPTION on the GRANT statement

Note: When user or group is granted CONTROL privilege on a table, all other privileges on that table are automatically granted WITH GRANT OPTION: If you subsequently revoke the CONTROL privilege on the table from user; that user will still retain the other privileges that were automatically granted. To revoke all the privileges that are granted with the CONTROL privilege, you must either explicitly revoke each individual privilege or specify the ALL keyword on the REVOKE statement, for example:

REVOKE ALL ON   EMPLOYEE FROM USER HERON

When working with typed tables, there are implications regarding table and view privileges.

Note: Privileges may be granted independently at every level of a table hierarchy: As a result, a user granted privilege on a supertable within hierarchy of typed tables may also indirectly affect any subtables. However; a user can only operate directly on a subtable if the necessary privilege is held on that subtable:

The supertable / subtable relationships among the tables in a table hierarchy mean that operations such as SELECT, UPDATE, and DELETE will affect the rows of the operation's target table and all its subtables (if any) This behavior can be called substitutability. For example, suppose that you have created an Employee table of type Employee\_ t with subtable Manager of type Manager A manager is a (specialized) kind of employee, as indicated by the type relationship between the structured types Employee\_t and Manager\_t and the corresponding table/ subtable relationship between the tables Employee and Manager: As a result of this relationship, the SQL query: subtype

SELECT FROM Emp]oyee will return the object identifier and Employee\_t attributes for both employees and managers. Similarly, the operation: update

UPDATE Emp]oyee SET Salary Salary 1000

will give a thousand dollar raise to managers as well as regular employees:

user with SELECT privilege on Employee will be able to perform this SELECT operation even if do not have an explicit SELECT privilege on Manager: However; such user will not be permitted to perform SELECT operation directly on the Manager subtable, and will therefore not be able to access any of the non-inherited columns of the Manager table they

Similarly, a user with UPDATE privilege on Employee will be able to perform an UPDATE operation on Manager, thereby affecting both employees and managers, even without the explicit UPDATE privilege on the Manager table: However; such user will not be permitted to perform UPDATE operations directly on the Manager subtable, and will therefore not be able to non-inherited columns of the Manager table: regular having update

## Package privileges

A package is a database object that contains the information needed by the database manager to access data in the most efficient way for a particular application program. Package privileges enable user to create and manipulate packages.

The user must have CONNECT authority on the database to use any of the following privileges:

- CONTROL provides the user with the ability to rebind, drop, Or execute package as well as the ability to extend those privileges to others The creator of package automatically receives this privilege: A user with CONTROL privilege is granted the BIND and EXECUTE privileges, and can also these privileges to other users by the GRANT statement: (If a privilege is granted using WITH GRANT OPTION, a user who receives the BIND or EXECUTE privilege can, in turn, grant this privilege to other users: To grant CONTROL privilege, the user must have ACCESSCTRL or SECADM authority: grant using
- BIND privilege on a package allows the user to rebind or bind that package and to add new package versions of the same package name and creator:
- EXECUTE allows the user to execute or run package

Note: All package privileges apply to all VERSIONs that share the same package name and creator

In addition to these package privileges, the BINDADD database authority allows users to create new packages or rebind an existing package in the database:

Objects referenced by nicknames need to pass authentication checks at the data sources containing the objects. In addition, package users must have the appropriate privileges or authority levels for data source objects at the data source:

It is possible that packages containing nicknames might require additional authorization steps because Db2 database uses dynamic queries when communicating with Db2 Family data sources. The authorization ID running the package at the data source must have the appropriate authority to execute the package dynamically at that data source.

## Index privileges

The creator of an index or an index specification automatically receives CONTROL privilege on the index CONTROL privilege on an index is really the ability to drop the index To CONTROL privilege on an index, a user must have ACCESSCTRL or SECADM authority: grant

The table-level INDEX privilege allows a user to create an index on that table:

The nickname-level INDEX privilege allows a user to create an index specification on that nickname:

## Privileges on expression-based indexes:

Special consideration must be given to privileges when you use expression-based indexes.

The authorization that is required to create an index with an expression-based is the same authorization that is required for a regular index For details, refer to the Authorization" section of the CREATE INDEX topic in SQL Reference Volume 2 key

When you create an expression-based index, more database objects are system-generated and associated with the index The first is a statistical view, and the second is a package: These additional objects are not system-generated when you create a regular index A restricted set of privileges is granted on these additional objects. two

## Statistical view privileges

Normally, the authorization ID must hold either SELECT or DATAACCESS privilege on the table to create statistical view. The same privilege is required to ALTER the same table to enable query optimization for the view:

For a system-generated statistical view that is associated with an index, these privileges are not required. The statistical view is automatically created if the authorization ID has the required authority to create an index on the table: However; the set of privileges that is granted on the statistical view that is associated with an index differ from a set of privileges on a normal statistical view: Namely, no privileges are granted to any authorization ID on the statistical view, including the owner of the index The owner of the index is also the owner of the

statistical view. No one, including authorization IDs with the SECADM or DBADM authority can modify privileges on statistical view An attempt to GRANT or REVOKE privilege on the statistical view results in an error (SQLSTATE 42501).

The ability to issue RUNSTATS on the statistical view or manually its statistics is governed by the authorities and privileges on the underlying table: update

The TRANSFER OWNERSHIP operation on the statistical view is not allowed and results in SQL20344N, reason code 7. However; TRANSFER OWNERSHIP of an index with an expression-based implicitly transfers the ownership of the associated statistical view key

## Package privileges

No extra privileges are required to run any statement or command in the system-generated package. When an index is created with an expression-based any user with privileges on the table can use the package: That is, any user with INSERT, UPDATE, DELETE, or SELECT on the table EXECUTE privilege on that package: This authorization is implicit as part of the statement or command that is run. key, has

The TRANSFER OWNERSHIP operation on the package is not allowed and results in SQL2O344N, reason code 5. However; TRANSFER OWNERSHIP of an index with an expression-based implicitly transfers the ownership of the associated the package: key

## Sequence privileges

The creator of a sequence automatically receives the USAGE and ALTER privileges on the sequence The USAGE privilege is needed to use NEXT VALUE and PREVIOUS VALUE expressions for the sequence:

To allow other users to use the NEXT VALUE and PREVIOUS VALUE expressions, sequence privileges must be granted to PUBLIC. This allows all users to use the expressions with the specified sequence.

ALTER privilege on the sequence allows the user to perform tasks such as restarting the sequence or changing the increment for future sequence values. The creator of the sequence can grant the ALTER privilege to other users, and if WITH GRANT OPTION is used, these users can, in turn, grant these privileges to other users\_

## Routine privileges

Execute privileges involve actions on all types of routines such as functions, procedures, and methods within a database Once having EXECUTE privilege, a user can then invoke that routine, create function that is sourced from that routine (applies to functions only), and reference the routine in any DDL statement such as CREATE VIEW or CREATE TRIGGER.

The user who defines the externally stored procedure, function, or method receives EXECUTE WITH GRANT privilege. If the EXECUTE privilege is granted to another user via WITH GRANT OPTION, that user can, in turn, grant the EXECUTE privilege to another user:

## Usage privilege on workloads

To enable use of a workload, a user who holds ACCESSCTRL, SECADM, or WLMADM authority can USAGE privilege on that workload to a user; a group, or a role the GRANT USAGE ON WORKLOAD statement: grant using

When the Db2 database system finds a matching workload, it checks whether the session user has USAGE privilege on that workload. If the session user does not have USAGE privilege on that workload, then the Db2 database system searches for the next matching workload in the ordered list: In other words, the workloads that the session user does not have USAGE privilege on are treated as if do they

The USAGE privilege information is stored in the catalogs and can be viewed through the SYSCATWORKLOADAUTH view:

The USAGE privilege can be revoked using the REVOKE USAGE ON WORKLOAD statement:

Users with the ACCESSCTRL, DATAACCESS, DBADM, SECADM, or WLMADM authority implicitly have the USAGE privilege on all workloads

## The SYSDEFAULTUSERWORKLOAD workload and the USAGE privilege

USAGE privilege on SYSDEFAULTUSERWORKLOAD is granted to PUBLIC at database creation time, if the database is created without the RESTRICT option. Otherwise, the USAGE privilege must be explicitly granted by a user with ACCESSCTRL, WLMADM, or SECADM authority:

If the session user does not have USAGE privilege on any of the workloads, including SYSDEFAULTUSERWORKLOAD, an SQL error is returned.

## The SYSDEFAULTADMWORKLOAD workload and the USAGE privilege

USAGE privilege on SYSDEFAULTADMWORKLOAD cannot be explicitly granted to any user: Only users who issue the SET WORKLOAD TO SYSDEFAULTADMWORKLOAD command and whose session authorization ID has ACCESSCTRL, DATAACCESS, DBADM, WLMADM or SECADM authority are allowed to

The GRANT USAGE ON WORKLOAD and REVOKE USAGE ON WORKLOAD statements do not have any effect on SYSDEFAULTADMWORKLOAD.

## Authorization IDs in different contexts

An authorization ID is used for two purposes: identification and authorization checking: For example, the session authorization ID is used for initial authorization checking:

When referring to the use of an authorization ID in a context, the reference to the authorization is qualified to identify the context; as shown in the following sectionspecific

## Contextual reference to authorization ID Definition

## System authorization ID

The authorization ID used to do any initial authorization checking, such as

checking for CONNECT privilege CONNECT processing: As part of the authentication process CONNECT processing, an authorization ID compatible with Db2 naming requirements is produced that represents the external user ID within the Db2 database system. The system authorization ID represents the user that created the connection. Use the SYSTEM\_USER special register to see the current value of the system authorization ID. The system authorization ID cannot be changed for a connection. during during

## Session authorization ID

The authorization ID used for any session authorization checking subsequent to the initial checks performed during CONNECT processing: The default value of the session authorization ID is the value of the system authorization ID Use the SESSION\_USER register to see the current value of the session authorization ID. The USER register is synonym for the SESSION\_USER register: The session authorization ID can be changed by using the SET SESSION AUTHORIZATION special special special

## Package authorization ID

The authorization ID used to bind a package to the database. This authorization ID is obtained from the value of the OWNER authorization id of the BIND command. The package authorization ID is sometimes referred to as the package binder or package owner: option

## Routine owner authorization ID

The authorization ID listed in the system catalogs as the owner of the SQL routine that has been invoked.

## Routine invoker authorization ID

The authorization ID that is the statement authorization ID for the statement that invoked an SQL routine:

## Statement authorization ID

The authorization ID associated with a specific SQL statement that is to be used for any authorization requirements as well as for determining object ownership (where appropriate). It takes its value from the appropriate source authorization ID, depending on the type of SQL statement:

- Static SQL

The package authorization ID is used:

- Dynamic SQL (from non-routine context)

The table shows which authorization ID is in each case: used

| Value of DYNAMICRULES option for issuing the package   | Authorization ID used    |
|--------------------------------------------------------|--------------------------|
| RUN                                                    | Session authorization ID |
| BIND                                                   | Package authorization ID |
| DEFINERUN, INVOKERUN                                   | Session authorization ID |
| DEFINEBIND, INVOKEBIND                                 | Package authorization ID |

- Dynamic SQL (from routine context)

The table shows which authorization ID is in each case: used

| Value of DYNAMICRULES option for issuing the package   | Authorization ID used          |
|--------------------------------------------------------|--------------------------------|
| DEFINERUN, DEFINEBIND                                  | Routine owner authorization ID |

| Value of DYNAMICRULES for issuing the package option   | Authorization ID used            |
|--------------------------------------------------------|----------------------------------|
|                                                        | Routine invoker authorization ID |

Use the CURRENT\_USER special register to see the current value of the statement authorization ID. The statement authorization ID cannot be changed directly; it is changed automatically by the Db2 database system to reflect the nature of each SQL statement\_

## Default privileges granted on creating a database

When you create a database, default database level authorities and default object level privileges are granted to you within that database:

The authorities and privileges that you are granted are listed according to the system views where are recorded: catalog they

## 1 SYSCATDBAUTH

- The database creator is granted the following authorities:
- DATAACCESS
- DBADM
- SECADM
- In a non-restrictive database, the group PUBLIC is granted the following authorities: special
- CREATETAB
- BINDADD
- CONNECT
- IMPLICIT\_SCHEMA

## 2 SYSCATTABAUTH

In a non-restrictive database, the special group PUBLIC is granted the following privileges:

- SELECT on all SYSCAT and SYSIBM tables
- SELECT and UPDATE on all SYSSTAT tables
- SELECT on the following views in schema SYSIBMADM:
- ALL\_'
- USER
- ROLE
- SESSION\_
- DICTIONARY
- TAB

## 3\_ SYSCATROUTINEAUTH

In a non-restrictive database, the special group PUBLIC is granted the following privileges:

- EXECUTE with GRANT on all functions and procedures in schema SYSFUN
- EXECUTE with GRANT on all procedures in schema SQL)
- EXECUTE with GRANT on most functions and procedures in schema SYSPROC, for a list of exceptions see "Default PUBLIC privilege for built-in routines" on page 50
- EXECUTE on all table functions in schema SYSIBM

- EXECUTE on all other procedures in schema SYSIBM

## 4 SYSCATMODULEAUTH

In a non-restrictive database, the special group PUBLIC is granted the following privileges:

- DBMS\_DDL
- EXECUTE on the following modules in schema SYSIBMADM:
- DBMS\_JOB
- DBMS\_LOB
- DBMS\_OUTPUT
- DBMS\_SQL
- DBMS\_STANDARD
- DBMS\_UTILITY

## 5. SYSCATPACKAGEAUTH

- The database creator is granted the following privileges:
- CONTROL on all packages created in the NULLID schema
- BIND with GRANT on all packages created in the NULLID schema
- EXECUTE with GRANT on all packages created in the NULLID schema
- In a non-restrictive database, the group PUBLIC is granted the following privileges: special
- BIND on all packages created in the NULLID schema
- EXECUTE on all packages created in the NULLID schema

## 6\_ SYSCATSCHEMAAUTH

In a non-restrictive database, the special group PUBLIC is granted the following privileges:

- CREATEIN on schema SQLJ
- CREATEIN on schema NULLID

## 7 . SYSCATTBSPACEAUTH

In a non-restrictive database, the special group PUBLIC is granted the USE privilege on table space USERSPACEL.

## SYSCATWORKLOADAUTH

In a non-restrictive database, the special group PUBLIC is granted the USAGE privilege on SYSDEFAULTUSERWORKLOAD.

## 9\_ SYSCATVARIABLEAUTH

In a non-restrictive database, the special group PUBLIC is granted the READ privilege on schema global variables in the SYSIBM schema, execpt for the following variables:

- SYSIBMCLIENT\_ORIGUSERID
- SYSIBMCLIENT\_USRSECTOKEN

non-restrictive database is a database created without the RESTRICTIVE option on the CREATE DATABASE command:

## Related information:

Best practices: A practical to restrictive databases guide

## Default PUBLIC privilege for built-in routines

When non-restrictive database is created, the special group PUBLIC is granted EXECUTE with GRANT to the majority of built-in routines.

The exceptions are listed in Table 1. All the listed routines are in the schema SYSPROC.

Table 3. Built-in routines with no default PUBLIC privilege

| Routine Name                          | Routine Type   |
|---------------------------------------|----------------|
| ADMIN_GET_INTRA PARALLEL              | Function       |
| ADMIN_GET_MEM_USAGE                   | Function       |
| ADMIN GET_STORAGE PATHS               | Function       |
| ADMIN_GET_TAB_COMPRESS_INFO           | Function       |
| ADMIN_GET TAB_COMPRESS INFO_V97       | Function       |
| ADMIN GET TAB_DICTIONARY_INFO         | Function       |
| ADMIN_SET_INTRA PARALLEL              | Procedure      |
| AUDIT ARCHIVE                         | Function       |
| AUDIT ARCHIVE                         | Procedure      |
| AUDIT_DELIM EXTRACT                   | Procedure      |
| AUDIT_LIST_LOGS                       | Function       |
| AUTOMAINT_GET_POLICYFILE              | Procedure      |
| AUTOMAINT_GET_ POLICY                 | Procedure      |
| AUTOMAINT SET_POLICYFILE              | Procedure      |
| AUTOMAINT_SET_POLICY                  | Procedure      |
| DB2_GET_CLUSTER_HOST_STATE            | Function       |
| DB2_GET_INSTANCE INFO                 | Function       |
| ENV GET DB2_EDU_SYSTEM_RESOURCES      | Function       |
| ENV_GET DB2_SYSTEM_RESOURCES          | Function       |
| ENV_GET_NETWORK_RESOURCES             | Function       |
| ENV GET REG VARIABLES                 | Function       |
| ENV_GET_SYS_RESOURCES                 | Function       |
| ENV_GET_SYSTEM_RESOURCES              | Function       |
| EVMON_UPGRADE TABLES                  | Procedure      |
| EXPLAIN_FROM ACTIVITY                 | Procedure      |
| EXPLAIN FROM_CATALOG                  | Procedure      |
| EXPLAIN FROM_DATA                     | Procedure      |
| EXPLAIN_FROM_SECTION                  | Procedure      |
| MON_CAPTURE ACTIVITY_IN_PROGRESS      | Procedure      |
| MON_COLLECT_STATS                     | Procedure      |
| MON_ FORMAT_LOCK_NAME                 | Function       |
| MON FORMAT_XML_COMPONENT_TIMES_BY_ROW | Function       |
| MON FORMAT XML_METRICS_BY_ROW         | Function       |
| MON_ FORMAT_XML_WAIT_TIMES_BY_ROW     | Function       |
| MON GET_ACTIVITY_DETAILS              | Function       |
| MON GET ACTIVITY                      | Function       |
| MON_GET AGENT                         | Function       |
| MON GET_APPL_LOCKWAIT                 | Function       |
| MON GET AUTO_MAINT_QUEUE              | Function       |
| MON_GET AUTO_RUNSTATS_QUEUE           | Function       |
| MON GET BUFFERPOOL                    | Function       |
| MON_ GET_CF_CMD                       | Function       |
| MON_GET_CF                            | Function       |

Table 3. Built-in routines with no default PUBLIC privilege (continued)

| Routine Name                     | Routine Type   |
|----------------------------------|----------------|
| MON GET_CF_WAIT TIME             | Function       |
| MON_GET_CONNECTION_DETAILS       | Function       |
| MON_GET_CONNECTION               | Function       |
| MON GET CONTAINER                | Function       |
| MON_ GET DATABASE DETAILS        | Function       |
| MON_GET_DATABASE                 | Function       |
| MON GET EXTENDED_LATCH_WAIT      | Function       |
| MON_ GET EXTENT_MOVEMENT_STATUS  | Function       |
| MON_GET_FCM_CONNECTION_LIST      | Function       |
| MON GET FCM                      | Function       |
| MON_ GET_GROUP BUFFERPOOL        | Function       |
| MON_GET_HADR                     | Function       |
| MON GET_INDEX                    | Function       |
| MON_ GET INDEX_USAGE LIST        | Function       |
|                                  | Function       |
| MON_GET_LOCKS                    | Function       |
| MON_GET_MEMORY POOL              | Function       |
| MON_GET_MEMORY_SET               | Function       |
| MON_GET_PAGE_ACCESS_INFO         | Function       |
| MON_GET_PKG_CACHE_STMT_DETAILS   | Function       |
| MON_GET_PKG_CACHE STMT           | Function       |
| MON_GET_QUEUE_STATS              | Function       |
| MON_GET_REBALANCE_STATUS         | Function       |
| MON_GET_ROUTINE_DETAILS          | Function       |
|                                  | Function       |
| MON_GET_ROUTINE                  | Function       |
| MON_GET_RTS_RQST                 | Function       |
| MON_GET_SECTION                  | Function       |
| MON_GET_SECTION_OBJECT           | Function       |
| MON_GET_SECTION_ROUTINE          | Function       |
| MON_GET_SERVERLIST               | Function       |
| MON_GET_SERVICE SUBCLASS_DETAILS | Function       |
| MON_GET_SERVICE_SUBCLASS         | Function       |
| MON_GET_SERVICE_SUBCLASS_STATS   | Function       |
| MON_GET_SERVICE_SUPERCLASS_STATS | Function       |
| MON_GET_TABLE                    | Function       |
| MON_ GET TABLESPACE              | Function       |
| MON_GET_TABLESPACE_QUIESCER      | Function       |
| MON_GET_TABLESPACE_RANGE         | Function       |
| MON_ GET TABLE USAGE_LIST        | Function       |
| MON_GET_TRANSACTION LOG          | Function       |
| MON_GET_UNIT_OF_WORK DETAILS     | Function       |
|                                  | Function       |
| MON_GET_USAGE_LIST_STATUS        | Function       |

Table 3. Built-in routines with no default PUBLIC privilege (continued)

| Routine Name                                   | Routine Type   |
|------------------------------------------------|----------------|
| MON GET WORK ACTION_SET_STATS                  | Function       |
| MON GET_WORKLOAD_DETAILS                       | Function       |
| MON_GET_WORKLOAD                               | Function       |
| MON_ GET WORKLOAD_STATS                        | Function       |
| MON_INCREMENT_INTERVAL_ID                      | Procedure      |
| MON_SAMPLE_SERVICE_CLASS_METRICS               | Function       |
| MON_ SAMPLE_WORKLOAD_METRICS                   | Function       |
| SET_MAINT_MODE_RECORD_NO_TEMPORALHISTORY       | Procedure      |
| SYSTS_ALTER                                    | Procedure      |
| SYSTS_CLEANUP                                  | Procedure      |
| SYSTS_CLEAR_COMMANDLOCKS                       | Procedure      |
| SYSTS_CLEAR_EVENTS                             | Procedure      |
| SYSTS_CONFIGURE                                | Procedure      |
| SYSTS_CREATE                                   | Procedure      |
| SYSTS_DISABLE                                  | Procedure      |
| SYSTS_DROP                                     | Procedure      |
| SYSTS_ENABLE                                   | Procedure      |
| SYSTS_UPDATE                                   | Procedure      |
| SYSTS_UPGRADE_CATALOG                          | Procedure      |
| SYSTS_UPGRADE_ INDEX                           | Procedure      |
| WLM_ALTER_MEMBER_SUBSET                        | Procedure      |
| WLM_CANCEL_ ACTIVITY                           | Procedure      |
| WLM_CAPTURE ACTIVITY_IN_PROGRESS               | Procedure      |
| WLM_COLLECT_STATS                              | Procedure      |
| WLM_CREATE_MEMBER_SUBSET                       | Procedure      |
| WLM_DROP_MEMBER_SUBSET                         | Procedure      |
| WLM_GET_ACTIVITY_DETAILS                       | Function       |
| ENV                                            | Function       |
| WLM_GET_QUEUE_STATS                            | Function       |
| WLM_GET_SERVICE_CLASS_AGENTS                   | Function       |
| WLM_GET_SERVICE_CLASS_AGENTS_V97               | Function       |
| WLM_GET_SERVICE_CLASS_WORKLOAD_OCCURRENCES     | Function       |
| WLM_GET_SERVICE_CLASS_WORKLOAD_OCCURRENCES V97 | Function       |
| WLM_GET_SERVICE_SUBCLASS_STATS                 | Function       |
| WLM_GET_SERVICE_SUBCLASS_STATS_V97             | Function       |
| WLM_GET_SERVICE_SUPERCLASS_STATS               | Function       |
| WLM_GET_ WORK ACTION_SET_STATS                 | Function       |
| WLM_GET_WORKLOAD_OCCURRENCE_ ACTIITIES         | Function       |
| WLM_GET_WORKLOAD_OCCURRENCE ACTIVITIES_V97     | Function       |
| WLM_GET_ WORKLOAD_STATS                        | Function       |
| WLM_GET_WORKLOAD_STATS_V97                     | Function       |
| WLM_SET_CLIENT_INFO                            | Procedure      |
| WLM_SET_CONN_ENV                               | Procedure      |

## Granting and revoking access

## Granting privileges

To grant privileges on most database objects, you must have ACCESSCTRL authority, SECADM authority, or CONTROL privilege on that object; O, you must hold the privilege WITH GRANT OPTION. Additionally, users with SYSADM O1 SYSCTRL authority can grant table space privileges. You can grant privileges only on existing objects:

## About this task

To grant CONTROL privilege to someone else, you must have ACCESSCTRL or SECADM authority To grant ACCESSCTRL, DATAACCESS, DBADM or SECADM authority, must have SECADM authority: you

The GRANT statement allows an authorized user to grant privileges. A privilege can be granted to one or more authorization names in one statement; or to PUBLIC, which makes the privileges available to all users. Note that an authorization name can be either an individual user or a group.

On operating systems where users and groups exist with the same name, you should specify whether you are granting the privilege to the user or group. Both ROLE. If these optional keywords are not used, the database manager checks the operating system security facility to determine whether the authorization name identifies a user Or a group; it also checks whether an authorization ID of type role with the same name exists. If the database manager cannot determine whether the authorization name refers to a user; group, or role, an error is returned. The following example grants SELECT privileges on the EMPLOYEE table to the user HERON:

GRANT SELECT ON  EMPLOYEE TO USER HERON

The following example grants SELECT privileges on the EMPLOYEE table to the group HERON:

GRANT   SELECT

To GROUP HERON

## Revoking privileges

The REVOKE statement allows authorized users to revoke privileges previously granted to other users.

## About this task

To revoke privileges on database objects, must have ACCESSCTRL authority, SECADM authority, or CONTROL privilege on that object: Table space privileges can also be revoked by users with SYSADM and SYSCTRL authority Note that holding privilege WITH GRANT OPTION is not sufficient to revoke that privilege: To revoke CONTROL privilege from another user; you must have ACCESSCTRL, or SECADM authority: To revoke ACCESSCTRL, DATAACCESS, DBADM or SECADM authority, you must have SECADM authority: Table space privileges can be revoked only by user who holds SYSADM, or SYSCTRL authority Privileges can only be revoked on existing objects. you

Note: user without ACCESSCTRL authority, SECADM authority, or CONTROL privilege is not able to revoke a privilege that granted through their use of the they

WITH GRANT OPTION. Also, there is no cascade on the revoke to those who have received privileges granted by the revoked: If an explicitly granted table (or view) privilege is revoked from user with DBADM authority, privileges will not be revoked from other views defined on that table: This is because the view privileges are available through the DBADM authority and are not dependent on explicit privileges on the underlying tables. being person

If a privilege has been granted to a user; a group, or role with the same name, you must specify the GROUP; USER, or ROLE keyword when revoking the privilege. The following example revokes the SELECT privilege on the EMPLOYEE table from the user HERON:

REVOKE SELECT ON   EMPLOYEE FROM USER HERON

The following example revokes the SELECT privilege on the EMPLOYEE table from the group HERON:

REVOKE SELECT ON  EMPLOYEE FROM GROUP HERON

Note that revoking privilege from a group may not revoke it from all members of that group: If an individual name has been directly granted privilege, it will keep it until that privilege is directly revoked:

If a table privilege is revoked from a user; privileges are also revoked on any view created by that user which depends on the revoked table privilege. However; only the privileges implicitly granted by the system are revoked. If a privilege on the view was granted directly by another user; the privilege is still held.

If a table privilege is revoked from a user; privileges are also revoked on any view created by that user which depends on the revoked table privilege. However; only the privileges implicitly granted the system are revoked. If a privilege on the view was granted directly by another user; the privilege is still held. by

You may have a situation where you want to GRANT privilege to a group and then REVOKE the privilege from just one member of the group. There are only a couple of ways to do that without receiving the error message SQLOSS6N:

- You can remove the member from the group; O, create a new group with fewer members and GRANT the privilege to the new group.
- You can REVOKE the privilege from the group and then GRANT it to individual users (authorization IDs):

Note: When CONTROL privilege is revoked from a user on table or a view, the user continues to have the ability to grant privileges to others. When given CONTROL privilege, the user also receives all other privileges WITH GRANT OPTION. Once CONTROL is revoked, all of the other privileges remain WITH GRANT OPTION until are explicitly revoked: they

All packages that are dependent on revoked privileges are marked invalid, but can be validated if rebound by user with appropriate authority Packages can also be rebuilt if the privileges are subsequently granted again to the binder of the application; running the application wiil trigger a successful implicit rebind: If privileges are revoked from PUBLIC, all packages bound by users only been able to bind based on PUBLIC privileges are invalidated. If DBADM authority is revoked from a user; all packages bound by that user are invalidated including those associated with database utilities. Attempting to use a package that having

has been marked invalid causes the system to attempt to rebind the package: If this rebind attempt fails, an error occurs (SQLCODE -727). In this case, the packages must be explicitly rebound by a user with:

- Authority to rebind the packages
- Appropriate authority for the objects used within the packages

These packages should be rebound at the time the privileges are revoked.

If you define a trigger or SQL function based on one or more privileges and you lose one or more of these privileges, the trigger or SQL function cannot be used.

## Managing implicit authorizations by creating and dropping objects

The database manager implicitly certain privileges to a user that creates database object such as table or a package: Privileges are also granted when objects are created by users with DBADM authority: Similarly, privileges are removed when an object is dropped: grants

## About this task

When the created object is a table, nickname, index, or package, the user receives CONTROL privilege on the object: When the object is view, the CONTROL privilege for the view is granted implicitly only if the user CONTROL privilege for all tables, views, and nicknames referenced in the view definition. has

When the object explicitly created is schema, the schema owner is given ALTERIN, CREATEIN, and DROPIN privileges WITH GRANT OPTION. An implicitly created schema has CREATEIN granted to PUBLIC.

## Establishing ownership of a package

The BIND and PRECOMPILE commands create or change an application package. On either one, use the OWNER option to name the owner of the resulting package.

## About this task

There are simple rules for naming the owner of a package:

- user can name themselves as the owner This is the default if the OWNER is not specified. Any option
- user ID with DBADM authority can name any authorization ID as the owner the OWNER using option.

Not all operating systems that can bind a package Db2 database products support the OWNER option: using

## Implicit privileges through a package

Access to data within a database can be requested by application programs, as well as by persons engaged in an interactive workstation session. A package contains statements that allow users to perform variety of actions on many database objects. Each of these actions requires one or more privileges.

Privileges granted to individuals binding the package and to PUBLIC, as well as to the roles granted to the individuals and to PUBLIC, are used for authorization checking when static SQL and XQuery statements are bound. Privileges granted through groups, and the roles granted to groups, are not used for authorization checking when static SQL and XQuery statements are bound.

Unless VALIDATE RUN is specified when binding the package, the user with a valid authorization ID who binds a package must either:

- XQuery statements in the package:
- Have acquired the necessary privileges through membership in one Or more of:
- PUBLIC
- The roles granted to PUBLIC
- The roles granted to the user

If VALIDATE RUN is specified at BIND time, all authorization failures for any static SQL or XQuery statements within this package will not cause the BIND to fail, and those SQL or XQuery statements are revalidated at run time. PUBLIC, group, role, and user privileges are all used when checking to ensure the user has the appropriate authorization (BIND or BINDADD privilege) to bind the package may include both static and dynamic SQL and XQuery statements\_ To process a package with static queries, a user need only have EXECUTE privilege on the package. This user can then implicitly obtain the privileges of the package binder for any static queries in the package but only within the restrictions imposed by the package Packages

If the package includes dynamic SQL or XQuery statements, the privileges depend on the value that was specified for DYNAMICRULES when the package was precompiled or bound. For more information, see the topic that describes the effect of DYNAMICRULES on dynamic queries. required

## Indirect privileges through a package containing nicknames

When a package contains references to nicknames, authorization processing for package creators and package users is slightly more complex

When a package creator successfully binds packages that contain nicknames, the package creator does not have to pass authentication checking or privilege checking for the tables and views that the nicknames reference at the data source: However; the package executor must pass authentication and authorization checking at data sources.

For example, assume that a package creator's .SQC file contains several SQL or XQuery statements. One static statement references a local table: Another dynamic statement references a nickname: When the package is bound, the package creator's authid is used to verify privileges for the local table and the nickname, but no checking is done for the data source objects that the nickname identifies When another user executes the package, assuming have the EXECUTE privilege for that package, that user does not have to pass any additional privilege checking for the statement referencing the table However; for the statement referencing the nickname, the user executing the package must pass authentication checking and privilege checking at the data source: they

When the .SQC file contains only dynamic SQL and XQuery statements and mixture of table and nickname references, Db2 database authorization checking for local objects and nicknames is similar: Package users must pass privilege checking for any local objects (tables, views) within the statements and also pass privilege checking for nickname objects (package users must pass authentication and privilege checking at the data source containing the objects that the nicknames identify). In both cases, users of the package must have the EXECUTE privilege.

The authorization ID and password of the package executor is used for all data source authentication and privilege processing: This information can be changed by creating a user mapping:

Note: Nicknames cannot be specified in static SQL and XQuery statements Do not use the DYNAMICRULES option (set to BIND) with packages containing nicknames.

It is possible that packages containing nicknames might require additional authorization steps because Db2 database uses dynamic SQL when communicating with Db2 Family data sources. The authorization ID running the package at the data source must have the appropriate authority to execute the package dynamically at that data source:

## Controlling access to data with views

view provides a means of controlling access or extending privileges to table:

Using a view allows the following kinds of control over access to table:

- Access only to designated columns of the table: For users and application programs that require access only to specific columns of a table, an authorized user can create a view to limit the columns addressed
- only to those required.
- Access only to a subset of the rows of the table By specifying a WHERE clause in the subquery of a view definition, an
- authorized user can limit the rows addressed through a view
- Access only to a subset of the rows or columns in data source tables or views. If you are accessing data sources through nicknames, you can create local Db2 database views that reference nicknames. These views can reference nicknames from one or many data sources.

Note: Because you can create a view that contains nickname references for more than one data source, your users can access data in multiple data sources from one view. These views are called multi-location views. Such views are useful when joining information in columns of sensitive tables across distributed environment or when individual users lack the privileges needed at data sources for specific objects.

To create view, a user must have DATAACCESS authority, or CONTROL or SELECT privilege for each table, view, or nickname referenced in the view definition. The user must also be able to create an object in the schema specified for the view. That is, DBADM authority, CREATEIN privilege for an existing schema, or IMPLICIT\_SCHEMA authority on the database if the schema does not already exist:

If you are creating views that reference nicknames, you do not need additional authority on the data source objects (tables and views) referenced by nicknames in the view; however; users of the view must have SELECT authority or the equivalent authorization level for the underlying data source objects when access the view: they

If your users do not have the proper authority at the data source for underlying objects (tables and views) , you can:

- Create a data source view over those columns in the data source table that are OK for the user to access
- 2. Grant the SELECT privilege on this view to users

- 3\_ Create a nickname to reference the view

Users can then access the columns by issuing a SELECT statement that references the new nickname

The following scenario provides a more detailed example of how views can be used to restrict access to information.

people might require access to information in the STAFF table, for different reasons\_ For example: Many

- The personnel department needs to be able to and look at the entire table: update

This requirement can be easily met by granting SELECT and UPDATE privileges on the STAFF table to the group PERSONNL:

GRANT   SELECT , UPDATE ON  TABLE STAFF TO GROUP PERSONNL

- Individual department managers need to look at the salary information for their employees:

This requirement can be met by creating a view for each department manager: For example, the following view can be created for the manager of department number 51:

CREATE VIEW EMPO51 AS SELECT NAME, SALARY ,JOB FROM STAFF WHERE DEPT=51

GRANT   SELECT ON  TABLE EMPO51

The manager with the authorization name JANE would query the EMPOS1 view When accessing the EMPOS1 view of the STAFF table, this manager views the following information:

| NAME      |   SALARY | JOB   |
|-----------|----------|-------|
| Fraye     |  45150   | Mgr   |
| Williams  |  37156.5 | Sales |
| Smith     |  35654.5 | Sales |
| Lundquist |  26369.8 | Clerk |
| Wheeler   |  22460   | Clerk |

- All users need to be able to locate other employees. This requirement can be met by creating view on the NAME column of the STAFF table and the LOCATION column of the ORG table, and by joining the two tables on their corresponding DEPT and DEPTNUMB columns:

CREATE VIEW EMPLOCS AS SELECT NAME , LOCATION FROM STAFF, ORG WHERE   STAFF . DEPT=ORG . DEPTNUMB

GRANT SELECT ON TABLE EMPLOCS TO PUBLIC

Users who access the employee location view will see the following information:

| NAME     | LOCATION   |
|----------|------------|
| Molinare | New York   |
| Lu       | New York   |
| Daniels  | New York   |
| Jones    | York New   |
| Hanes    | Boston     |
| Rothman  | Boston     |

| NAME      | LOCATION      |
|-----------|---------------|
| Ngan      | Boston        |
| Kermisch  | Boston        |
| Sanders   | Washington    |
| Pernal    | Washington    |
| James     | Washington    |
| Sneider   | Washington    |
| Marenghi  | Atlanta       |
| O'Brien   | Atlanta       |
| Quigley   | Atlanta       |
| Naughton  | Atlanta       |
| Abrahams  | Atlanta       |
| Koonitz   | Chicago       |
| Plotz     | Chicago       |
| Yamaguchi | Chicago       |
| Scoutten  | Chicago       |
| Fraye     | Dallas        |
| Williams  | Dallas        |
| Smith     | Dallas        |
| Lundquist | Dallas        |
| Wheeler   | Dallas        |
| Lea       | San Francisco |
| Wilson    | San Francisco |
| Graham    | San Francisco |
| Gonzales  | San Francisco |
| Burke     | San Francisco |
| Quill     | Denver        |
| Davis     | Denver        |
| Edwards   | Denver        |
| Gafney    | Denver        |

## Controlling access for database administrators (DBAs)

You may want to monitor; control, or prevent access to data by database administrators (users holding DBADM authority).

## Monitoring access to data

You can use the Db2 audit facility to monitor access by database administrators. To do s0, follow these steps:

- 1\_ Create an audit policy that monitors the events you want to capture for users who hold DBADM authority:
- 2 Associate this audit policy with the DBADM authority:

## Controlling access to data

You can use trusted contexts in conjunction with role to control access by database administrators. To do S0, follow these steps:

- 1\_ Create a role and grant DBADM authority to that role:
- 2. Define a trusted context and make the role the default role for this trusted context.
- Do not membership in the role to any authorization ID explicitly: This way, the role is available only through this trusted context and user acquires DBADM capability only when are within the confines of the trusted context. grant they
- 3\_ There are two ways you can control how users access the trusted context:
- Implicit access: Create unique trusted context for each user: When the user establishes a regular connection that matches the attributes of the trusted context, are implicitly trusted and access to the role: they gain
- Explicit access: Create a trusted context using the WITH USE FOR clause to define all users who can access it. Create an application through which those users can make database requests. The application establishes an explicit trusted connection, and when a user issues a request, the application switches to that user ID and executes the request as that user on the database.

If you want to monitor the use of this trusted context, you can create an audit policy that captures the events you are interested in for users of this trusted context: Associate this audit policy with the trusted context

## Preventing access to data

To prevent access to data in tables, choose one of these options:

- To prevent access to data in all tables, revoke DATAACCESS from your DBADM user; role or group. Alternatively you could grant DBADM to the user; role or group of interest without the DATAACCESS option
- Assign a security label to every column in the table:
- To prevent access to data in one particular table, follow these steps:
- Grant that security label to a role:
- Grant that role to all users (or roles) that have a legitimate need to access the table:

No user; regardless of their authority, will be able to access data in that table unless are a member in that role: they

## Gaining access to data through indirect means

To successfully manage security, you need to be aware of indirect ways that users can access to data: gain

The following list represents the indirect means through which users can access to data might not be authorized to access: gain they

- Catalog views: The Db2 database system catalog views store metadata and statistics about database objects. Users with SELECT access to the catalog views can some knowledge about data that might not be qualified for: For better security, make sure that only qualified users have access to the catalog views they gain

Note: In Db2 Universal Database Version 8, or earlier; SELECT access on the views was granted to PUBLIC by default: In Db2 Version 9.1, or later; database systems, users can choose whether SELECT access to the views is granted to PUBLIC or not by using the new RESTRICTIVE option on the CREATE DATABASE command. catalog catalog

- Explain snapshot: The explain snapshot is compressed information that is\_ collected when an SQL or XQuery statement is explained. It is stored as a binary large object (BLOB) in the EXPLAIN\_STATEMENT table, and contains column statistics that can reveal information about table data: For better security, access to the explain tables should be granted to qualified users only:
- Section explain: The section explain procedures (EXPLAIN\_FROM\_SECTION, EXPLAIN\_FROM\_CATALOG, EXPLAIN\_FROM\_ACTIVITY and EXPLAIN\_FROM\_DATA) can populate tables with information from any section that resides in the package cache. This information includes statement text which may contain input data values For better security access to the section procedures and tables should be granted to qualified users only: explain explain explain
- reader functions: A user authorized to run function that reads the can access to data might not be authorized for if are able to understand the format of a record. These functions read the logs Log they gain they log logs:
- Replication: When you replicate data, even the protected data is reproduced at the target location. For better security, make sure that the target location is at least as secure as the source location:
- Exception tables: When you specify an exception table while loading data into a table, users with access to the exception table can information that might not be authorized for: For better security, only grant access to the exception table to authorized users and the exception table as soon as you are done with it: gain they drop
- Backup table space or database: Users with the authority to run the BACKUP DATABASE command can take a backup of a database o a table space, including any protected data, and restore the data somewhere else. The backup can include data that the user might not otherwise have access to.
- The BACKUP DATABASE command can be executed by users with SYSADM, SYSCTRL, or SYSMAINT authority:
- Set session authorization: In Db2 Universal Database Version 8, or earlier; user with DBADM authority could use the SET SESSION AUTHORIZATION SQL statement to set the session authorization ID to any database user: In Db2 Version 9.1, or later; database systems a user must be explicitly authorized through the GRANT SETSESSIONUSER statement before can set the session authorization ID. they

| Function         | Authority needed in order to execute the function   |
|------------------|-----------------------------------------------------|
| db2ReadLog       | SYSADM or DBADM                                     |
| db2ReadLogNoConn | None_                                               |

When upgrading an existing Version 8 database to a Db2 Version 9.1, or later; database system, however; user with existing DBADM authority (for example, granted in SYSCATDBAUTH) will the ability to set the session authorization to any database user: This is allowed s0 that existing applications will continue to work: able to set the session authorization potentially allows access to all protected data. For more restrictive security, you can override this setting by executing the REVOKE SETSESSIONUSER SQL statement explicit keep Being

- Lock monitoring: As part of the lock monitoring activity of Db2 database management systems, values associated with parameter markers are written to the monitoring output when the HIST\_ AND\_ VALUES collection level is specified. Values may also be embedded in the statement text captured by the lock event monitor: user with access to the monitoring output can access to information for which might not be authorized. gain they
- Package cache monitoring: As part of monitoring the package cache in a Db2 database management using a package cache event monitor; the statement text (which may contain input data values) is written to the monitoring output whenever a section is ejected from the package cache For better security, access to the CREATE EVENT MONITOR statement and any event monitor tables should be granted to qualified users only: system
- Activity monitoring: As part of monitoring activities in a Db2 database management system using an activity event monitor; the values associated with parameter markers are written to the monitoring output when the VALUES clause is specified, and the statement text (which may contain input data values) is written to the monitoring output when the WITH DETAILS clause is specified A user with access to the monitoring output can access to information for which might not be authorized. For better security, access to the CREATE EVENT MONITOR statement and any event monitor tables should be granted to qualified users only: gain they
- Monitor table functions, views and reports: The following monitor table functions, views and reports expose statement text for either currently executing statements or statements in the package cache:
- SYSPROCMON\_GET\_ACTIVITY\_DETALS
- SYSPROCMON\_GET\_PKG\_CACHE\_STMT
- SYSPROCMON\_GET\_PKG\_CACHE\_STMT\_DETALS
- SYSIBMADMMON\_PKG\_CACHE\_SUMMARY
- SYSIBMADMMON\_CURRENT\_SQL
- SYSIBMADMMON\_LOCKWAITS
- SYSIBMADMMONREPORTLOCKWAIT
- SYSIBMADMMONREPORTCURRENTSQL
- SYSIBMADMMONREPORTPKGCACHE

The statement text may contain input data values. For better security, EXECUTE privilege on these table functions and reports and SELECT privilege on these views should be granted to qualified users only:

- Traces: A trace can contain table data: A user with access to such a trace can access to information that might not be authorized for: they gain
- Dump files: To help in debugging certain problems, Db2 database products might generate memory dump files in the sq]1ib Idbzdump directory These memory dump files might contain table data: If do, users with access to the files can access to information that might not be authorized for: For they gain they
- dbzdart: The dbzdart tool examines a database and reports any architectural errors that it finds. The tool can access table data and Db2 does not enforce access control for that access\_ user with the authority to run the dbzdart tool or with access to the dbzdart output can access to information that might not be authorized for: they gain
- REOPT bind option: When the REOPT bind option is specified, explain snapshot information for each reoptimizable incremental bind SQL statement is placed in the explain tables at run time. The will also show input data values. explain

- dbzcat: The dbzcat tool is used to dump a table's packed descriptor: The tables descriptor contains statistics that can reveal information about a table's contents. A user who runs the dbzcat tool or has access to the output can access to information that might not be authorized for: packed gain they

## Data encryption

The Db2 database system offers several ways to encrypt data, both while in storage, and while in transit over the network:

## Encrypting data in storage

You have the following for encrypting data in storage: options

- You can use Db2 native encryption to encrypt your databases and backup images.
- You can Guardium Data Encryption to encrypt the underlying operating system data and backup files.
- If you are running a Db2 system on the AIX operating system, and you are interested in file-level encryption only, can use encrypted file system (EFS) to encrypt your operating system data and backup files you

## Encrypting data in transit

To encrypt data in-transit between clients and Db2 databases, you can use the DATA ENCRYPT authentication type, Or, the Db2 database system support of Secure Sockets Layer (SSL)

Note: DATA ENCRYPT and SERVER\_ENCRYPT with DES use algorithms that are not compliant with NIST SP 800-131A. If you must comply with NIST SP 800-1314, must not be used. If compliance to NIST SP 800-131A is not an issue, are still valid. they they

## Configuring Secure Sockets Layer (SSL) support in a Db2 instance

The Db2 database system supports SSL, which means that a Db2 client application that also supports SSL can connect to Db2 database by using a SSL socket: CLI, CLP; and .Net Data Provider client applications and applications that use the IBM Data Server Driver for JDBC and SQLJ (type 4 connections) support SSL.

## Before you begin

This procedure helps you to configure client applications to communicate with Db2 SSL. In addition, starting in Db2 Version 11.1, databases configured with High Availability Disaster Recovery (HADR) can also be configured to transmit transaction data between primary and standby database servers SSL. For more information, see Configuring SSL for the communication between primary and standby HADR servers. using log using

Before you configure SSL support, perform the following steps:

- Ensure that the to the IBM Global Security Kit (GSKit) libraries appears in the PATH environment variable on Windows platforms and the LIBPATH, SHLIB\_PATH or LD\_LIBRARY\_PATH environment variables Linux and UNIX platforms GSKit is automatically included when you install the Db2 database path on

On Windows 32-bit platforms, the GSKit libraries are located in C: | Program Files" IBM GSK8| 1ib. In this case, the system PATH must include C: | Program Files" IBMIGSK8| 1ib. On Windows 64-bit platforms, the 64-bit GSKit libraries are located in C: | Program Files IBMIGSK8| 1ib64 and the 32-bit GSKit libraries are located in C: | Program Files (x86) IBMIGSK8 ib\_

On UNIX and Linux platforms, the GSKit libraries are located in sq]lib/lib/gskit.

On non-Windows platforms, the Db2 database manager installs GSKit locally, and for a given instance, the GSKit libraries would be located in sq]lib/lib/gskit or of GSKit installed in a global location to bring up the instance: If a global copy of GSKit does exist, the version of the global GSKit at the same version of the local GSKit: keep

- Ensure that the connection concentrator is not activated: SSL support will not be enabled in the Db2 instance if connection concentrator is running:
- To determine whether connection concentrator is activated, issue the GET DATABASE MANAGER CONFIGURATION command\_ If the configuration parameter max\_connections is set to a value greater than the value of max\_coordagents, connection concentrator is activated.

## About this task

The SSL communication will always be in FIPS mode

## SSL support for Db2 Connect

If you are Db2 Enterprise Server Edition on an intermediate server computer to connect Db2 clients to a host or System i database, SSL support is available in any of the following configurations: using

- Between the client and the Db2 Connect server
- Between the Db2 Connect server and the server
- Between both the client and the Db2 Connect server and the Db2 Connect server and the server

Note: For SSL support to be enabled on all in the configuration, each client or server must fulfill all requirements for SSL support: For example, if the Db2 Connect connection concentrator is 0n, the inbound request to the Db2 Connect server cannot use SSL. However; the outbound request to the target server can use SSL\_ paths

## SSL support for databases that are configured with High Availability Disaster Recovery (HADR)

SSL is supported between clients and the HADR primary Or standby database servers, including standby databases enabled for Reads on Standby: Clients connecting to the HADR primary database by using SSL are able to reroute to the HADR standby database server configured with SSL. In addition, starting in Version 11.1, SSL is also supported for transaction data transmission between primary and standby database servers. For more information, see Configuring SSL for the communication between primary and standby HADR servers. log

## Documentation for the GSKit tool: GSKCapiCmd

For information about the GSKit tool GSKCapiCmd, see the GSKCapiCmd User' s Guide, available at ftp.software ibm.com software webserver appserv / library / v80/GSK\_CapiCmd\_UserGuide:pdf: ftp: /

## Configuring SSL support

To configure SSL support, first, you create database to manage your digital certificates. These certificates and encryption keys are used for establishing the SSL connections. Second, the Db2 instance owner must configure the Db2 instance for SSL support key

## Procedure

- 1. Create a database and set up your digital certificates. key
- a Use the GSKCapiCmd tool to create your database. It must be a Certificate Management System (CMS) type database. The GSKCapiCmd is a non-Java-based command-line tool, and Java does not need to be installed on your system to use this tool. key key

For example, the following command creates database called mydbserver.kdb and a stash file called mydbserver.sth: gsk8capicmd\_64 -keydb ~create -db "mydbserver.kdb" ~pW "myServerPasswOrdpwo ~stash key

You invoke GSKCapiCmd the gskcapicmd command, as described in the GSKCapiCmd User' $ Guide. The path for the command is sq]ib/gskit/bin on Linux and UNIX platforms, and C: | Program Files IBM| GSK8|bin on both 32-bit and 64-bit Windows platforms. (On 64-bit platforms, the 32-bit GSKit executable files and libraries are also present; in this case, the for the command is C: | Program Files (x86) IBM  GSK8|bin:) Ensure PATH (on the Windows platform) includes the proper GSKit path, and LIBPATH, SHLIB\_PATH, Or LD\_LIBRARY\_PATH (on UNIX or Linux platforms) include the proper GSKit library such as sqllib /lib64 / using library path, gskit

The ~stash option creates a stash file at the same path as the database, with a file extension of sth. At instance start-up, GSKit uses the stash file to obtain the password to the database: key key

Note: You should use strong file system protection on the stash file: By default; only the instance owner has access to this file (both read and write access) \_

When you create a key database, it is automatically populated with signer certificates from a few certificate authorities (CAs), such as Verisign.

- Add a certificate for server to database. The server sends this certificate to clients the SSL handshake to provide authentication for the server: To obtain a certificate, you can either use GSKCapiCmd to create a new certificate request and submit it to CA to be signed, or you can create self-signed certificate for testing purposes. key your your during

For example, to create a self-signed certificate with a label of myselfsigned, use the GSKCapiCmd command as shown in the following example:

gsk8capicmd\_64 ~cert ~create ~pw "myServerPasswOrdpwo" "mysel fsigned" ~dn "CN-myhost. mycompany. COm, 0-myOrganization, OU-myOrganizationUnit,L-myLocation,ST-ON,C-CA ~size 2048 -sigalg SHA256 WITH RSA

## Where:

- ~cert is the certificate request command which creates new RSA private-public and PKCS1O certificate request in the specified database key pair key
- ~db is the qualified name of a database fully path key

- ~pW is the password for the database identified by the -db or ~tokenlabel tags Specify a hyphen (-) as the password to cause the program to read the password from stdin. This allows you to pipe in the password key
- -Iabel is the label to be attached to the certificate request on creation The user uses this label to uniquely identify the certificate request
- ~dn &lt;dist\_name&gt; is the X.5OO distinguished name that will uniquely identify the certificate. The input must be a quoted of the following format (only CN is required): string
- CN =common name
- 0 = organization
- OU organization unit
- L location
- ST State, Provice
- C = country
- DC = domain component
- EMAIL =email address
- -size &lt;key\_size&gt; is the size, in bits, of the new to be created. key pair
- ~sigalg ~sig\_alg &lt;signature\_algorithm&gt; is the signing algorithm to be used the creation of the self-signed certificate This algorithm is used to create the signature associated with the new self-signed certificate: The generated type will be chosen to match this signing algorithm during key
- C\_ Extract the certificate you just created to file, s0 that you can distribute it to computers running clients that will be establishing SSL connections to your Db2 server:
- For example, the following GSKCapiCmd command extracts the certificate to file called mydbserver.arm:
- gsk8capicmd\_64 -cert ~extract -db "mydbserver.kdb" "myServerPasswOrdpwo' "mysel fsigned" -target "mydbserver.arm" format ascii -fips
- 2 To set up Db2 server for SSL support, in as the Db2 instance owner and set the following configuration parameters and the DBZCOMM registry variable: log your
- a\_ Set the ssl\_svr\_keydb configuration parameter to the fully qualified of the database file: For example: path key
- dbm cfg using SSL\_SVR\_KEYDB /home/test/sqlib/security/keystore/key.kdb
- If ssl\_svr\_keydb is null (unset), SSL support is not enabled.
- b Set the ss] stash configuration parameter to the fully qualified of the stash file: For example: path ~svr
- dbz update dbm cfg using SSL\_SVR\_STASH /home/test/sqllib/security/keystore/mydbserver.sth
- If ssl\_svr\_stash is null (unset), SSL support is not enabled.
- C. Set the ssl\_svr\_label configuration parameter to the label of the digital certificate of the server; which you added in 1 If ss]\_ svr Iabel is not set, the default certificate in the database is If there is no default certificate in the database, SSL is not enabled. For example: db2 update dbm cfg using SSL\_SVR\_LABEL fsigned where myselfsigned is sample label: Step used. key key mysel -

- d\_ database system should listen on for SSL connections. If TCP /TP and SSL are both enabled (the DBZCOMM registry variable is set to 'TCPIP; SSL'), you must set ss] svcename to a different port than the port to which svcename is set: The svcename configuration parameter sets the that the Db2 database system listens on for TCP /IP connections. If you set ss]\_svcename to the same port as svcename, neither TCP /IP or SSL will be enabled. If ss] port

Note: In HADR environments, do not set hadr\_Iocal\_ on the primary or standby database to the same value as you set for ss]\_svcename: Also, do not set hadr\_Iocal\_ plus one system

Note: When the DBZCOMM registry variable is set to 'TCPIP,SSL' , if TCPIP support is not properly enabled, for example due to the svcename configuration parameter set to null, the error SQL5043N is returned and SSL support is not enabled: being

- (Optional) If you want to specify which cipher suites the server can use, set the ss1 cipherspecs configuration parameter: If you leave ss]\_ cipherspecs as null (unset) , this allows GSKit to pick the strongest available cipher suite that is supported by both the client and the server: See "Supported cipher suites" on page 87 for information about which cipher suites are available
- Add the value SSL to the DBZCOMM registry variable For example: dbzset dbzinstl DBZCOMM-SSL

where db2instl is the Db2 instance name The database manager can support For example, to enable both TCP /IP

dbzset dbzinstl DBZCOMM-SSL, TCPIP

multiple protocols at the same time. and SSL communication protocols:

- Restart the Db2 instance: For example:

dbzstop dbzstart

## Example

The following example demonstrates how to display a certificate: This example uses the self-signed certificate created by the following command:

gsk8capi 64 ~cert -create ~db "mydbserver.kdb" ~pw "mydbserverpwo -Iabel "myselfsigned" ~dn "CN-myhost.mycompany \_ com, 0-myOrganization, OU-myOrganizationUnit,L-myLocation,ST-ON,C-CA ~Size 2048 ~Sigalg SHA256\_WITH RSA cmd

To display the certificate, issue the following command: gsk8capicmd\_64 ~details ~db "mydbserver.kdb" ~pw  "mydbserverpwo

-cert -Iabel "mysel fsigned"

The output is displayed is as follows: Tabel mysel fsigned key size 2048 vers X50g V3 serial 45095be96766f560 issue:CN-myhost.mycompany.com,OU-myOrganizationUnit,0-myOrganization,L-myLocation,ST-ON,C-CA subject:CN-myhost.mycompany. Com,OU-myOrganizationUnit,O-myOrganization,L-myLocation,ST-ON,C-CA not before June 13 , 2016 2:01:19 PM EDT not after June 14 2017 2:01:19 public 30 82 01 ion Key

01 37 82 43 08 68 7D 9C 87 73 34 81 5A 3B AC 5E 34 69 39 17 CA DB 08 E7 F6 26 FB A6 El 12 B8 13 3E 30 56 62 40 8B 73 EC CC 01 BA B7 22 D7 5C BF 7E EC 9B FC D8 81 34 DD A8 96 19 4A C4 CC 95 9C 3E 02 3D 1C D8 18 AA 88 99 15 24 5B 4A BB 8E 05 5B 98 41 FB C3 71 8A 31 89 OF 35 C5 74 91 30 80 36 A6 65 C7 AA C5 91 3C 89 9F 41 D2 7D 26 AA 78 E7 50 7F 95 D2 El ED Ag C8 02 5C 3D 1F 20 10 57 A4 D8 E6 DC FF 52 B9 1A 89 75 9F 2E 68 98 88 C6 40 81 12 75 AA DF 7B F2 8B 44 2F AE C7 8A A8 87 66 4E FA CE A8 21 82 4D A0 83 33 EZ AA 23 A3 9B 22 43 9B Co AC 74 ES 57 99 E6 C1 03 96 93 AD CO AF 02 03 01 00 01

finger print ic key type

RSA (1.2.840.113549.1.1.1)

SHA1

63 51 15 06 5E F8 7B

Fingerprint

MDS

64 5C 62 42 D1 3E AC 02 C6 73 BF FC F6 D5 D5 E8 Fingerprint SHA256

22 A7 FF 41 A4 27 92  8D 20 FB F2 88 F4 3C B5 7C 2A 82 47 04 37

## Extensions

keyIdentifier:

SubjectKeyIdentifier

15 5C FO 3E E8 35 CF 14 C8 31 1F C6 BB D1 5D 68

OD 38 19 B4

AuthorityKeyIdentifier keyIdentifier:

OD 38 19 B4

authorityIdentifier:

Signature Algorithm SHAZS6WithRSASignature (1.2.840.113549.1.1.11)

authorityCertSeria] Number:

70 76 1D 2E F6 49 CD AO 46 84 37 88 96 FF A8 7A 06 39 E8 C9 87 04 D8 45 6C BC 12 DA 7E C4 BE OA 03 AF EF FB 4C OA DO 73 90 67 8B CE FC F3 FO 6B F8 38 52 EZ A8 41 El C7 DF BD 9E D8 90 CO 84 CE B5 22 75 C5 EB 65 52 4B CD 69 BO B7 71 8F 18 35 81 D9 70 BA 55 DD 3C 82 52 4D E7 4C 38 B3 5E 7E FE CC CE 94 5E 77 8B 8C 64 56 E3 2A 41 C7 5D AE 6E 21 46 EE 3F  84 A6 20 C4 A7 28 2E EB B8 8B 90 31 D9 F8 C5 A8 A6 6C 29 1D 44 A5 5D F4 39 A3 3C 04 31 5E 65 48 F6 73 A8 45 16 75 EA 84 4C 44 03 1F 53 C2 A5 FD AD 27 OA EB AA 37 8A 83 AC 14 33 65 55 21 39 F7 61 Fl 6F 12 EF A3 AE 26 57 57 CD 4B A7

Trust Status Enabled

To obtain a CA-signed certificate for your server (instead of a self-signed certificate), you to generate certificate signing request and pay the well known CA, such as VeriSign, to sign the certificate: After you the signed database: The following example demonstrates how to request and receive a certificate: It uses a trial version of a certificate: need get key

- 1\_ First, create a Certificate Signing Request (CSR) for mydbserverkdb The following command creates a new RSA private-public pair and a PKCS1O certificate request in the specified database. For CMS databases, the certificate request information is stored in the file with the rdb" extension. The file specified by the -file option is the one that needs to be sent to a CA key key key

gsk8capicmd\_64

~certreq

-create

~db "mydbserver.kdb'

~pw "mydbserverpwo

- O-myOrganization,OU-myOrganizationUnit,L-myLocation,ST-ON,C-CA" -file "mycertRequestNew' SHA256 WITH RSA
- -Iabel 'mycert -dn CN-myhost.mycompany.com\_

The following command lists the detailed information of the certificate request for my db server:

```
gsk8capicmd_64 -certreq ~details ~showOID "mydbserver.kdb" ~pw "mydbserverpwo "mycert'
```

The output would display as follows:

```
Tabel mycert key size 2048 subject Common Name (CN) Type 2.5.4.3 Value: myhost.mycompany com Organizational Unit (OU) Type 2.5.4.11 Value: myOrganizationUnit OrganizationName (0) Type 2.5.4.10 Value: myOrganization Locality (L) : Type 2.5.4.7 Value: myLocation StateOrProvinceName (ST) Type 2.5.4.8 Value: ON CountryName (C) Type 2.5.4.6 Value: CA ic 30 82 01 22 01 01 05 00 03 82 01 OF 00 30 82 01 OA 02 82 01 01 00 CE FO 92 OE 7C 78 AD C9 26 7A C8 82 CE DA A3 CC 88 35 37 9B 27 3F 49 E8 09 90 ED 25 AD 56 AF EO BB 3A 13 E3 EE ED 28 32 0A D8 82 BC F5 7F F7 9A B9 35 4A 4F BE 9D 33 B9 01 54 1B 8F 22 62 C4 DO 41 14 D8 BF 7A DD E8 OA 16 F1 3A 81 63 1D 8F 45 84 7F FB 25 91 FB 03 7F CC 86 16 54 BC FF 58 F2 15 73 F7 D5 CD 40 63 3C 37 48 FE 51 22 43 61 6A FA EO CD 74 C5 29 7E 30 46 AE FB B1 EA A3 EA 64 AE DO 64 49 26 DC 58 44 C8 28 D2 76 94 3F B3 8D 37 AE 92 1d 00 CF 10 3F 28 E9 11 C3 55 7C C4 16 92 3E 04 F2 DD 84 3F 02 03 01 00 01 Public Key Type RSA (1.2.840.113549.1.1.1) Finger print eaad5783226fbfee46a5eflla4605a76 04cc89b9 Attributes Signature Algorithm SHAWithRSASignature (1.2.840.113549.1.1.5) Value Key
```

77 91 EB 56 61 DD E2

FA 67 C5 90 E6 BF 33 AE CA 51 33 AA 48 76 25 1B 2C OF Al A8 20 23 ED 7C 9E EE 1B E7 79 39 B7 7A 64 B7 E4 3A 82 BB 5B 7B OF BA 19 EE 43 40 77 B4 C8 1B 3F 37 E7 E9 01 76 8A C7 8A 31 41 08 CC 02 92 74 34 90 9E 21 7D 64 67 5B 97 F4 EB B3 B2 AD 99 C7 7C 99 67 49 EO C5 66 61 A3 C4 3D 61 D5 34 C7 1F 40 58 98 61 76 6C 60 6B C1 34 18 26 68 CE BD C4 F1 8D 4E 7E D4 79 45 OD 46 5E 6D 27 1D 07 50 83 64 EB A3 B5 A2 B3 8C AD 57 84 B2 F6 BE E7 55 4B B6 38 F8 2E 96 2C 96 2D AE 14 09 Al 9F 7E 43 7A 53 EF 4F 4E

To display the certificate request file:

cat mycertRequestNew

MIIBrjCCARcCAQAwbjELMAKGALUEBhMCQOExEDAOBgNVBAgTBOgudGFyaW8xEDAO ADCBiQKBgQCctGI8iQJOsNjqC? jMcGNKWR8P /ZiaGjmU4OPBY3rNIUdXZYZvEbiR CKzj4iEy/kMfB8nlQGs+TVYIBWLWeAvjlyj3JzGkBbZyOkRrZNH/HtpZY+ZJUjIF nB6OzNqh20861glmXIkjLu4xZYZHjr]hxmm8pdvrAxbmM4UUaLzd8QIDAQABoAAw N3fibRAXUBnQfZHHyFR728lvRSg+f]rMZCCF]ahex3379Ip/S3RvCsbvCecKFRfM HdJd7QKhvh388mXrDeKTv IhMTHNZFp8bEjtbac/gYSfoOALZR+ZyFRmTfd/nhPa dqI=

END NEW CERTIFICATE REQUEST -

In case you need to delete the certificate request; use command similar to the following example:

gsk8capicmd\_64 -certreq ~delete ~db "mydbserver.kdb ~pw "mydbserverpwo -Tabel "mycert

- 2 Next, go to the VeriSign website, register and you will be asked to cut and paste the request file to submit the request: For trial version, you would receive an email that contains the signed certificate. The email also contains links for downloading the trial root CA certificate and the trial intermediate CA certificate. Use notepad or vi to save all three certificates into files:
- RootCert.arm
- IntermediateCertarm
- MyCertificate arm

These three are in a chain of trust.

Add the trial Root CA Certificate into mydbserverkdb with the following command:

gsk8capicmd 64 ~cert ~add ~db "mydbserver.kdb" trialRootCACert -file RootCert.arm -format ascii

Add the trial Intermediate CA Certificate into mydbserverkdb with the following command:

gsk8capicmd 64 -cert ~add ~db "mydbserver.kdb" ~pw  "mydbserverpwo trial IntermediateCACert -file IntermediateCert.arm format ascii

Receive the trial Certificate into mydbserverkdb with the following command: cat SSLCertificate.cer2

MIIFVjCCBD6gAwIBAgIQdOydrySM+J4uUPNzbPHhVjANBgkqhkiG9wOBAQUFADCB LMAkGALUEBhMCVVMxFzAVBgNVBAoTDIZI cm] TaWduLCBJbmMuMTAwLgYDVQQL BAsTOVRI cmlzIGImIHVzZSBhdCBodHRwczovL3d3dyS2ZXJpczInbiSjbzovY3Bz cnZIciBUZXNOIENBMB4XDTASMDIyMzAwMDAwMFoXDTASMDMwOT IzNTklOVowgaox CzAJBgNVBAYTAkNBMRAwDg YDVQQIEwdPbnRhcm] vMRAwDgYDVQQHFAdNYXJraGFt MQwwCgYDVQQKFANJQkOxDDAKBgNVBAsUAORCMjE6MDgGAIUECxQxVGVybXMgbzYg dXNI IGFOIHd3dy52ZXJpc2 nbiSjbzovY3BzL3RIc3Rj YSAoYykwNTEfMBOGAIUE AxQWZZI sZXJhLnRvcmgs YWIuaWJtLmNvbTCBnzANBgkqhkiGIwOBAQEFAAOBjQAw gYkCgYEAnLRiPIkCTrDY6gu4zHBjSlkfD/?Ymho5] ONDwWN6zSFHVImGbxG4kQis jszaodkPOpYJZIyJIy7UMWWNh465YcZpvKXbbwMWSjOFFGi83fECAWEAAaOCAdcw TMAkGAIUdEwQCMAAwCwYDVROPBAQDAgWgMEMGALUdHwQ8MDowOKAZoDSGMmho MEoGAIUdIARDMEEwPwYKYIZIAYb4RQEHFTAxMCSGCCSGAQUFBwIBFiNodHRwczov nbiSjbzovY3BzL3RIc3Rj YTAdBgNVHSUEFjAUBggrBgEFBQcD AQYIKwYBBQUHAwIwHwYDVROjBBgwFoAUZi KOgeAxWdOqfbtGxTYCBnAnhloweAYI KwYBBQUHAQEEbDBqMCQGCCsGAQUFBzABhhhodHRwOi 8vbZNzcCSZZXJpczInbi5j bSgTVI JUcmlhbDIwMDUtYWIhLmN]cjBuBggrBgEFBQcBDARiMGChXqBcMFowWDBW FgIpbWFnZSgnaWYwITAfMAcGBSsOAwIaBBRLa7kolgYMugBSOJsprEsHiyEFGDAm AQEFBQADggEBAKslYpleOALbmTryIXpYfokkzRdwPSooDutHhVbRYcPwqgynOrHM 1B66QpsFYGTLtGyd/4w4BAgq/QLmcstmpjc= YZEL ggHT

END CERTIFICATE-=

gsk8capicmd\_64 -cert ~receive -file MyCertificate.arm ~db "mydbserver.kdb' ~pw "mydbserverp -format ascii

List all the certificates in mydbserverkdb with the following command: gsk8capicmd\_64 -cert -ist a11 -db "mydbserver.kdb' ~pW "mydbserverpwo'

certificates found default, persona] =

trusted

mycert

trial IntermediateCACert

trial RootCACert

mysel fsigned

db2 update dbm cfg using SSL\_SVR\_LABEL mycert

## Notes:

- When self-signed client certificate created in keystore database is extracted, the extract command extracts the public data from the keystore database and places it into an identified file. However; no information that is related to the private is extracted. If such certificate is imported into another keystore database, only the data is imported and the private data is not present in the new keystore database. So, an authentication of a client the new keystore database fails. As solution, either the entire keystore database needs to be shared by various applications or different client certificates need to be generated for each client: key key public key key using

## Configuring SSL for the communication between primary and standby HADR servers

SSL is supported between the HADR primary and standby servers on environments that do not use IBM Db2 pureScale"

## Before you begin

## Configuring HADR to use SSL

To configure HADR to use SSL communications, procedures are similar to the ones described in Configuring Secure Sockets Layer (SSL) support in a DB2 instance. In particular; the steps that describe how to set up your SSL database and certificate must be done for all instances in the HADR configuration. The steps for configuring the HADR environment by a self-signed certificate are described in the following section. key using

An activated connection concentrator does not inhibit the use of SSL for HADR communications. For SSL support to be enabled, each primary and standby database in the HADR configuration must fulfill all requirements for SSL support

## Prior to configuring SSL support, perform the following steps on each primary and standby in the HADR configuration

Ensure that the to the IBM Global Security Kit (GSKit) libraries appears in the LIBPATH, SHLIB\_PATH, or LD\_LIBRARY\_PATH environment variables on Linux and UNIX operating systems. GSKit is automatically included when you install a Db2 database server product: path

On UNIX and Linux operating systems, the GSKit libraries are located in sq]lib/liblgskit\_

On Linux platforms, the GSKit is installed locally when Db2 is installed. The GSKit libraries are located in sqllib/lib/gskit or It is unnecessary to have another copy of GSKit installed in global location to start the instance: If a global copy of GSKit does exist, keep the version of the global GSKit at the same version of the local GSKit:

For information about the GSKit tool GSKCapiCmd, see the GSKCapiCmd User'$ Guide, available at ftp:, software, webserver /

## About this task

## Configuring SSL support

The general steps for configuring SSL support are:

- 1\_ Create a database on the primary and each standby instance to manage your digital certificates: These certificates and encryption keys are used for establishing the SSL connections. key
- 2. Configure the Db2 instance for SSL support: This step is done by Db2 instance owner:
- 3 Configured SSL for the particular database for which SSL is to be used.

The procedure section details this configuration process for the communication between primary and standby HADR servers

## Restrictions

Table 4. SSL support between the HADR primary and standby servers:

| Platform                       | Supported starting in Db2 Version   |
|--------------------------------|-------------------------------------|
| Linux on AMD64 and Intel EM64T | 11.1.1.1                            |
| All other platforms            |                                     |

## Procedure

- 1. Create a database and set up your digital certificates on the primary and standby instances. key
- a Use the gskcapicmd command to create your key database. The database type must be a Certificate Management System (CMS): GSKCapiCmd is a non Java based command-line tool, and Java does not need to be installed on your system to use this tool. key
- The gskcapicmd command is described in the GSKCapiCmd User's Guide. The for the command is sqllib/gskit/bin on Linux and UNIX operating systems. On Linux and UNIX, ensure that the LIBPATH, SHLIB\_PATH, or LD\_LIBRARY\_ PATH environment variables include the proper GSKit library path path,

For example, the following command creates a database that is called myprimary.kdb and stash file that is called myprimary.sth: key

-db primary.kdb' ~pw  "myPrimaryPasswOrdpwo' ~stash

The -stash option creates stash file at the same as the key database, with file extension of sth: At instance start-up, GSKit uses the stash file to obtain the password to the database: path key

When create a database, it is automatically populated with signer certificates from a few certificate authorities (CAs), such as Verisign. key you

Note: You should use strong file system protection on the stash file: By default, only the instance owner has read and write access to this file. Since this file is a user-managed file, it is not to be stored in the Db2 sql1ib directory: Create keystore directory under each instance's home directory to store the database and stash files. For example, key mkdir /home/test/keystore

- b\_ Add database. The standby instance sends this certificate to the primary instance the SSL handshake to provide authentication for the standby instance: To obtain certificate, YOu can either use the gskcapicmd command to create a new certificate request and submit it to a CA to be signed, Or YOu can create a self-signed certificate: The following examples are for a self-signed certificate: key during

To create a self-signed certificate with a label of myPrimarysigned, use the following gskcapicmd:

gsk8capicmd\_64 -cert -create -db "primary.kdb' ~pw "myPrimaryPasswOrdpwo "myPrimarysi ~dn "CN-myhost.mycompany. com,0-myOrganization, OU-myOrganizationUnit,L-myLocation,ST-ON,C=

To use CA signed certificate, you must obtain one, as described in Configuring Secure Sockets Layer (SSL) support in DB2 instance.

- C. Extract the certificate that you created to file s0 that you can distribute it to each standby instance.

For example, the following gskcapicmd command extracts the certificate to a file called primary.arm:

gsk8capicmd\_64 -cert -extract -db primary.kdb" ~pw  "myPrimaryPasswOrdpwo "myPrimarys -target primary . format ascii arm" -fips

- d\_ Repeat steps la through 1c on each standby database:

To create a keydb on the standby:

gsk8capicmd\_64 -keydb -create ~db "standbyl.kdb ~pw "myStandbylPasswOrdpwo ~stash

Create the certificate on the standby:

gsk8capicmd\_64 ~cert -create ~db "standbyl.kdb" ~pw "myStandbylPasswOrdpwo' -Iabel "myStandby -dn CN-myhost.mycompany. com,0-myOrganization, OU-myOrganizationUnit,L-myLocation,ST-ON,C=

- 3\_

Extract the standby certificate into a file called standbyl.arm:

- gsk8capicmd\_64 -cert ~extract ~db "standbyl.kdb" ~pw "myStandbylPasswOrdpwo" "myStar ~target "standbyl.arm" -format ascii -fips
- 2\_ Add the primary and standby certificates to the database at each primary and standby instance key
- a FTP the file that contains the primary instance's certificate to the standby instance This file was extracted in a previous into file called primary.arm Also, FTP the file that contains the standby instance's certificate, standbyl.arm; to the primary instance. Place these files into the directory where you created your step key
- Add the primary instance's certificate into the standby's database. For example, the following gsk8capicmd command imports the certificate from the file primary.arm into the database called standbyl.kdb: gsk8capicmd\_64 ~cert -add -db "standbyl.kdb" ~pw  "myStandbylPasswOrdpwo' -Tabel "myPrimary -file primary.arm -format ascii -fips key key
- C. On the primary instance, add the standby's certificate into the primary's database. key
- For example, the following gsk8capicmd command imports the certificate from the file standbyl.arm into the database called primary.kdb. key
- gsk8capicmd\_64 -cert -add -db primary. kdb" ~pw "myPrimaryPasswOrdpwo" -Iabel "myStandbyls -file "standbyl.arm" format ascii -fips
- d\_ If multiple standby databases exist, the certificate from each instance in the HADR configuration must be imported into the instance, in the same manner described in steps 2a through 2c key
- Set up your Db2 instances for SSL support: To set up your Db2 instances for SSL support, in as the Db2 instance owner and set the following configuration parameters. This step must be done on the Db2 instance of the primary and all standby databases. log
- a\_ Set the ss1 keydb configuration parameter to the fully qualified of the database file on the instance. For example, on the primary instance: db2 update dbm cfg using SVR\_KEYDB /home/test/keystorelprimary.kdb path ~svr key SSL\_=
- On the standby instance:
- dbz update dbm cfg ing SSL\_SVR\_KEYDB /home/test/keystore/standbyl.kdb If ss]\_svr\_keydb is null (unset) on any instance in the HADR configuration, SSL support fails.
- The paths
- b Set the ss1 stash configuration parameter to the qualified of the stash file: For example, on the primary instance: fully path ~svr
- dbz update dbm cfg using SSL\_SVR\_STASH /home/test/keystorelprimary.sth On the standby instance:
- dbz update dbm cfg using SSL\_SVR\_STASH /home/test/keystore/standbyl.sth If ss]\_svr\_stash is null (unset) on any instance in the HADR configuration, SSL support fails.
- The paths do not have to be the same on the primary and each standby
- Restart each primary and standby Db2 instance:

dbzstop

- dbzstart
- 4\_ Enable SSL communications for each primary and standby database:

On the primary and each standby database, set the hadr\_ \_abel database configuration parameter to the label of the digital certificate, which you added in steps 1 on page 74 and 2 on page 75. For example, on the primary database: dbz update db cfg for dbzdb using HADR\_SSL\_LABEL myPrimarysigned ss]

created in step 1 on page 74.

On the secondary database:

db2 update db cfg for dbzdb using HADR\_SSL\_LABEL myStandbylsigned primary and standby databases in the configuration. If hadr\_ssl\_abel is not set for all databases, then some HADR connections between primary and standby databases fail.

The label does not have to be the same on each primary and standby

If the hadr ss] \_abel is set, then both the ss] svr\_keydb and ss1\_svr\_stash must be set: If not, then HADR cannot be started, or some HADR connections between primary and standby databases fail.

## Related reference:

HADR\_SSL\_LABEL Label name in the key file for SSL communication between HADR primary and standby instances configuration parameter

## Secure Sockets Layer (SSL) support in federation server for wrapper

The Db2 database system supports SSL, which means that a Db2 client application that also supports SSL can connect to Db2 database an SSL socket: using

## Before you begin

- Ensure to DBZCOMM registry variable dbzset dbzinstl DBZCOMM-SSL update
- Ensure to enable both TCP /IP and SSL communication protocols dbzset dbzinstl DBZCOMM-SSL, TCPIP

Note: Specify different service for SSL and TCPIP ports

- Ensure to enable SSL connection on data source side. For more information, see "Configuring Secure Sockets Layer (SSL) support in a Db2 instance" on page 64. Some important configuration parameters are:
- SSL\_SVR\_KEYDB
- SSL\_SVR\_STASH
- SSL\_SVR\_LABEL
- SSL\_SVCENAME

## Procedure

To configure SSL support in a federation server:

- 1. Obtain the signer certificate of the server digital certificate on the client: The server certificate can either be a self-signed certificate or a certificate signed by certificate authority (CA):
- If your server certificate is a self-signed certificate, you must extract its signer certificate to a file on the server computer and then distribute it to computers running clients that will be establishing SSL connections to that server: See "Configuring Secure Sockets Layer (SSL) support in Db2 instance" on page 64 for information about how to extract the certificate to a file:

- If your server certificate is signed by a well known CA, your client database might already contain the CA certificate that signed your server certificate. If it does not, you must obtain the CA certificate, which is usually done by visiting the website of the CA key
- You invoke GSKCapiCmd the gskcapicmd command, as described in the GSKCapiCmd User' $ Guide. The for the command is sqhlib/gskit/bin on Linux and UNIX operating systems, and C: | Program Files IBMI GSK8|bin on both 32-bit and 64-bit Windows operating systems. (On 64-bit operating systems, the 32-bit GSKit executable files and libraries are also present; in this case, the for the command is C: | Program Files (x86) ` IBM  GSK8|bin) using path path
- 2\_ On the Db2 client system, use the GSKCapiCmd tool to create a database, of CMS type: The GSKCapiCmd tool is a non-Java-based command-line tool (Java does not need to be installed on your system to use this tool)\_ key

For example, the following command creates a database called mydbc] ient.kdb and a stash file called mydbc] ient.sth: gsk8capicmd\_ 64 -keydb -create ~db "mydbc] ient.kdb' ~stash key

The -stash creates stash file at the same as the database, with a file extension of sth: At connect time, GSKit uses the stash file to obtain the password to the database. option path key key

- 3 Add the signer certificate into the client database following gskBcapicmd command imports the certificate from key
- For example, the the file mydbserver.arm into the database called mydbc] ient.kdb: gsk8capicmd 64 ~cert ~add ~db "mydbclient.kdb" dbsel fsigned' ~file "mydbserver.arm -format ascii -fips key
- 4 To connect to the data source by using mydbc] ient.kdb and mydbc] ient.sth, perform the following steps
- a Configure and start the federation server:
- b\_ Run the CREATE SERVER command: create server SERVERNAME type TYPE version Version\_Number wrapper drda authorization "uid"
- C Run the CREATE USER MAPPING command
- create user mapping for user server SERVERNAME options (remote\_authid remote\_userid remote If everything goes fine, now you are connect to data source You can check it on netstat ~anp grep server\_ss]\_Tisten\_ ~port

Connection is established to the data source SSL. Run the following command to check the connection on the server side: using netstat ~anp grep server\_ss]\_Tisten\_port

If the status of server SSL listen port is 'ESTABLISHED' then it is connected.

- 5\_ To connect to the data source by using the server signer certificate only, run the following command:

create server SERVERNAME type TYPE version Version Number wrapper drda authorization "uid" pas

## Configuring Secure Sockets Layer (SSL) support in non-Java Db2 clients

You can configure Db2 database clients, such as CLI, CLP; and  Net Data Provider server

## Before you begin

Note: If your Version 9.7 Db2 client or Db2 Connect server establishes an SSL connection to a Db2 for z/OS server on 2/OS V1.8, V1.9, or V1.1O system, the appropriate PTF for APAR PKZ2201 must be to the Communication Server for z/OS IP Services. applied

Note: Due to an incompatibility between GSKit version 8 and GSKit 7d versions before 7.0.4.20, CLI applications connecting to an IDS data server GSKit 7d versions before 7.0.4.20 will fail. To correct the problem, upgrade the GSKit library on the IDS data server to GSKit 7.0.4.20 or later using

Before configuring SSL support for a client; perform the following steps:

- If both the client and the server are on the same physical computer; you do not need to install GSKit, because GSKit is automatically installed with the Db2 server

Starting with Version 9.7 Fix Pack 1, when you install the 64-bit version of the Db2 server; the 32-bit GSKit libraries are automatically included in the installation. To use these libraries, on Linux and UNIX operating you must ensure that the LDLIBRARY PATH, LIBPATH, or SHLIB\_PATH environment variable is correctly set\_ On Windows operating systems, ensure that the PATH environment variable is correctly set, as shown in the following table: systems

| Application   | Operating system      | Location of GSKit libraries            | Environment variable setting                                                                               |
|---------------|-----------------------|----------------------------------------|------------------------------------------------------------------------------------------------------------|
| 32-bit        | Linux and UNIX 64-bit | SINSTHOME/sq]ib/1ib32/ gskit           | Include SINSTHOME/sq]1ib/]ib32 / gskit in the LD_LIBRARY_PATH, LIBPATH, or SHLIB_PATH environment variable |
| 64-bit        | Linux and UNIX 64-bit | gskit                                  | Include SINSTHOME/sq]lib/1ib64/ gskit in the LD_LIBRARY_PATH, LIBPATH, or SHLIB_PATH environment variable  |
| 32-bit        | Windows 64-bit        | C:|Program Files (x86) | IBMIGSK8| 1ib | Include C: | Program Files (x86) environment variable                                                      |
| 64-bit        | Windows 64-bit        | C:|Program Files                       | Include C: | Program Files IBMIGSK8| 1ib64 in PATH environment variable                                    |

SSL communication will always be in FIPS mode:

On non-Windows platforms, the Db2 database manager installs GSKit locally, and for a given instance, the GSKit libraries would be located in sq]lib/lib/gskit or sq]lib/libb4/gskit\_ It is unnecessary to have another copy of GSKit installed in a global location: If a global copy of GSKit does exist, the version of the GSKit at the same version of the local GSKit: keep global

- If the client is installed in a separate computer; for "C" based clients, you must install GSKit if the clients use SSL to communicate with the servers. You can install the GSKit libraries from the IBM Db2 Support Files for SSL Functionality DVD. Alternatively, you can install from an image that you downloaded from Passport Advantage" being
- Ensure that the to the IBM Global Security Kit (GSKit) libraries appears in the PATH environment variable on Windows and in the LIBPATH, SHLIB\_PATH path

or LD\_LIBRARY PATH environment variables on Linux and UNIX For example, on Windows, add the GSKit bin and Tib directories to the PATH environment variable:

set PATH-"C: |Program Files" 1 set PATH-"C: |Program Files" 1 bmlgsk8|1ib"

- From Db2 V10.5 FP5 onwards, if the client is installed on separate computer and uses SSL to communicate with servers, ignore numbers two and three of the Procedure section. GSK also does not need to be installed for CLI, NET, and open source drivers. You can pass the SSL Certificate to these client drivers the SSLServerCertificate keyword in the CLI connection string, db2cli.ini or db2dsdriver.cfg file. The client driver will create an internal database and add the certificate to it: You do not need to modify any environment variable: being using file, key

Note: GSK is still required for Certificate-based authentication, such as two-way authentication supported by Db2 for 2/OS.

## Documentation for the GSKit tool: GSKCapiCmd

For information about the GSKit tool GSKCapiCmd, see the GSKCapiCmd User' s Guide, available at ftp software ibm.com software, webserver ftp: /

## About this task

The SSL communication will always be in FIPS mode

## Procedure

To configure SSL support in a Db2 client:

- 1. Obtain the signer certificate of the server digital certificate on the client: The server certificate can either be a self-signed certificate or a certificate signed by certificate authority (CA)
- certificate to a file on the server computer and then distribute it to computers running clients that will be establishing SSL connections to that server: See "Configuring Secure Sockets Layer (SSL) support in a Db2 instance" on page 64 for information about how to extract the certificate to a file:
- If your server certificate is signed by a well known CA, your client database might already contain the CA certificate that signed your server certificate. If it does not you must obtain the CA certificate, which is usually done by visiting the website of the CA key
- 2 On the Db2 client computer; use the GSKCapiCmd tool to create a database, of CMS type. The GSKCapiCmd tool is a non-Java-based command-line tool (Java does not need to be installed on your system to use this tool). key
- You invoke GSKCapiCmd using the gskcapicmd command, as described in the GSKCapiCmd User's Guide. The for the command is sq]lib/gskit/bin on Linux and UNIX operating systems, and C: | Program Files IBMI GSK8bin on both 32-bit and 64-bit Windows operating systems. (On 64-bit operating systems, the 32-bit GSKit executable files and libraries are also present; in this case, the path for the command is C: | Program Files (x86) ` IBM  GSK8|bin:) path

For example, the following command creates a database called mydbc] ient.kdb and stash file called mydbc] ient.sth: key

- 3.
- Tabel "dbsel fsigned" -file "mydbserver.arm" -format ascii -fips

gsk8capicmd\_64 -keydb -create ~db "mydbclient.kdb" ~stash

The -stash option creates a stash file at the same as the database, with a file extension of sth: At connect time, GSKit uses the stash file to obtain the password to the database. key path key

- Add the signer certificate into the client database For example, the following gsk8capicmd command imports the certificate from the file mydbserver.arm into the database called mydbc] ient.kdb: gsk8capicmd\_ 64 -cert -add ~db "mydbc] ient.kdb" key key
- 4 For your client application, set the appropriate connection or configuration parameters, as shown in the applicable example for client: string your

## Example

## CLP and embedded SQL clients

CLP clients and embedded SQL clients can connect to database on a remote host that has been added to the node catalog the CATALOG TCPIP NODE command. Issue the CATALOG TCPIP NODE command with the SECURITY keyword set to SSL to specify SSL for that connection. using

The following example demonstrates how to node and database sO that a CLP client can connect to them an SSL connection. catalog using

First, catalog the node and database so that client applications can establish SSL connections to them:

catalog TCPIP NODE mynode REMOTE 127.0.0.1 SERVER 50001 SECURITY SSL

catalog DATABASE Samp]e AS myss]db AT NODE mynode AUTHENTICATION SERVER

stash configuration parameters to specify the client key-database and the stash file: You set the ss] keydb configuration parameter to the fully qualified of the database file (. kdb) and the ss]\_ cInt\_stash configuration parameter to the fully qualified of the stash file: \_clnt\_ path key path dbz update dbm cfg using

SSL\_CLNT\_KEYDB /home/testl/sqhlib/security/keystore/cl ientkey.kdb SSL\_CLNT\_STASH /home/testl/sqllib/securitylkeystore/cl ientstore.sth

If either the ss1\_ keydb or ssl\_clnt\_stash configuration parameter is null (unset), the connection fails and returns error SQL1O013N with token GSKit Error: \_clnt

Then, connect to the server from the CLP client: dbz connect to myss]db user userl using password

Alternatively, an embedded SQL application could use the following statement to connect:

Strcpy(dbA]ias, "myss]db") EXEC SQL CONNECT To USER

dbAlias user USING :pswd;

## CLIIODBC client applications

Depending in which environment you are running your CLI application, you use either connection parameters (SSLClientKeystoredb and SSLClientKeystash) or Db2 configuration parameters (ss] keydb ss] clnt\_stash) to specify the for the client database and for the stash file: string and path key

- If you are using the IBM Data Server Driver for ODBC and CLI, you use connection parameters, as shown in this example: string
- Call SQLDriverConnect with a connection string that contains the SECURITY-SSL keyword. For example:
- "Database-sampledb; Protocol-tcpip; Hostname= myhost; Servicename-50001; Security-ss]; SSLCI ientKeystoredb-/home/testl/keystore/cl ientstore.kdb; SSLCTientKeystash-/home/testl/keystore/c] ientstore.sth;
- In this case, because Security-ss] is specified, the SSLClientKeystoredb and SSLClientKeystash connection parameters must be set, otherwise the connection will fail. string
- If you are the IBM data server client or IBM Data Server Runtime Client; can use either connection parameters or Db2 configuration parameters to set the path for the client database and for the stash file: If the SSLCI ientKeystoredb and SSLCI ientKeystash connection parameters are set, override any values set by the ss] \_clnt\_keydb Or the ssl\_clnt\_stash configuration parameters using string you key they string

This example uses the dbzc] i.ini file to set connection string parameters:

[samp] edb]

Database-samp]edb

Protocol-tcpip

Hostname-myhost

Servicename-50001

Security-ss]

SSLCT ientKeystash-/home/testl/keystore/c] ientstore.sth

This example uses the FileDSN CLI/ODBC keyword to identify DSN file that contains the database connectivity information, which sets the connection string parameters. For example, the DSN file may look like this:

[ODBC] DRIVER-IBM DBZ ODBC DRIVER DBZCOPY1 UID-userl AUTHENTICATION-SERVER PORT-50001 HOSTNAME-myhost PROTOCOL-TCPIP DATABASE=SAMPLEDB SECURITY-SSL SSLC] ientKeystoredb-/home/testl/keystore/c] ientstore.kdb

In these cases, because Security-ss] is specified, if the SSLCI ientKeystoredb and SSLCI ientKeystash connection string parameters are not set, and also the ssl\_clnt\_keydb and ss]\_clnt\_stash configuration parameters are not set, the connection will fail.

From Db2 V10.5 FP5 onwards, the SSLClientKeystoredb and SSLClientKeystash keywords are not needed in the connection db2cli.ini FileDSN, or db2dsdrivercfg file: If you have not set or passed values for the SSLClientKeystoreddb and SSLClientKeystash keywords, the CLI/ODBC client driver will create a default database internally the first SSL connection. The Client driver will call GSKit APIs to create a database populated with the default root certificates: If the application has passed the signer certificate of the server arm file)using the SSLServerCertificate keyword, the client driver will add this certificate to this default database and proceed for the SSL connection In this case, the application needs to use the Security-SSL and SSLServerCertificate-&lt;certificate file name&gt; as in below connection string: string, file, key during key key

Database-samp]edb; Protoco]-tcpip;Hostname-myhost;Servicename-50001;Security-ss] ;SSLServerC

If both SSLClientKeystoredb and SSLServerCertificate keywords are used, the client driver will add the certificate file to the database which the SSLClientKeystoredb points to and then proceed for SSL connection: key

## Certificate-based authentication

The certificate-based authentication allows you to use SSL client authentication without the need of providing database passwords on the database client: When certificate-based authentication is configured to supply authentication information, password cannot be specified in any other way (as in the db2dsdriver.cfg configuration file, in the dbzc]i.ini configuration file, Or in the connection string). Since the authentication parameter needs a label to be specified, a new data server driver configuration parameter SSLC] ientLabel is also introduced  If the CERTIFICATE authentication is specified, then the new label parameter SSLCLientLabel must also be specified in the CLI configuration file, db2c] i . ini, or in the data server driver configuration file, dbzdsdriver.cfg:

The SSLCI ientKeyStoreDBPassword keyword sets the keystore database password. The configuration parameters SSLCI ientKeystash and SSLCI ientKeyStoreDBPassword are mutually exclusive: When the SSLCIientKeystash configuration parameter and the SSLCI ientKeyStoreDBPassword configuration parameter are both specified in either the CLI configuration file or the data server driver configuration file, error CLIOZZOE is returned: Hence, for a successful certificate-based authentication, it is recommended to specify only one of the keywords but not both:

An example of the IBM data server driver configuration file (db2dsdriver.cfg) follows: entry

&lt;parameter name= Authentication" value-"CERTIFICATE" / &gt;

## Db2 .Net Data Provider applications

A Db2 Net Data Provider application can establish an SSL connection to a database by specifying the the client database and for the stash file by defining the connection string parameters, SSLClientKeystoredb and SSLClientKeystash: The connection must also contain Security-SSL. For example: path for key string

String connectString "Server-myhost:50001;Database-samp]edb;Security-ss]; SSLCI ientKeystoredb-/home/testl/keystore/c] ientstore.kdb; SSLCI ientKeystash-/home/testl/keystore/c] ientstore.sth"

Then, as shown in the following C#f code fragment; to connect to a database, this connectString to the DBZConnection constructor and use the Open method of the DBZConnection object to connect to the database identified in connectString: pass

DBZConnection conn new DBZConnection(connectString) ; Conn.Open() ; Return conn;

If either the SSLCI ientKeystoredb or SSLCIientKeystash connection string parameter is null (unset), the connection fails and returns error SQL1OO13N with token GSKit Error: GSKit\_return\_code.

From Db2 VIO.SFP5 onwards, you do not need to use the SSLClientKeystoredb and SSLClientKeystash keywords in the SSL

connection: However; the connection must also contain Security-SSL. The connection string can be used as below: string

String connectString "Server-myhost:50001;Database-samp]edb;Security-ss];SSLServerCert

## Notes:

- When a self-signed client certificate created in a keystore database is extracted, the extract command extracts the key data from the keystore database and places it into an identified file However; no information that is related to the is extracted: If such certificate is imported into another keystore database, only the public data is imported and the private data is not present in the new keystore database. So, an authentication of a client the new keystore database fails. As a solution, either the entire keystore database needs to be shared by various applications or different client certificates need to be generated for each client: public private key key key using

## Secure Sockets Layer (SSL)

The Db2 database system supports the use of Secure Sockets Layer (SSL) and it's successor; Transport Layer Security (TLS), to enable a client to authenticate a server; and to provide private communication between the client and server by use of encryption: Authentication is performed by the exchange of digital certificates.

Note: When this topic mentions SSL, the same information applies to TLS, unless otherwise noted:

Without encryption, packets of information travel through networks in full view of anyone who has access. You can use SSL to protect data in transit on all networks that use TCP /TP (you can think of an SSL connection as secured TCP \_ connection):

A client and server establish a secure SSL connection by performing an "SSL handshake".

## Overview of the SSL handshake

an SSL handshake, a public-key algorithm, usually RSA, is used to securely exchange digital signatures and encryption keys between client and a server: This identity and information is used to establish a secure connection for the session between the client and the server: After the secure session is established, data transmission between the client and server is encrypted using a symmetric algorithm, such as AES. During key

The client and server perform the following steps during the SSL handshake:

- 2. The server responds with a selected cipher suite:
- 1. The client requests an SSL connection and lists its supported cipher suites.
- 3. The server sends its digital certificate to the client:
- 4\_ The client verifies the validity of the server certificate, for authentication purposes. It can do this by checking with the trusted certificate authority that issued the server certificate or by checking in its own database. key
- 5. The client and server securely negotiate a session and message authentication code (MAC): key
- 6\_ The client and server securely exchange information using the and MAC selected. key

Note: The Db2 database system does not support the (optional) authentication of the client the SSL handshake during

## Using SSL encryption with Db2 authentication

You can use SSL encryption in conjunction with all existing Db2 authentication the authentication type for the instance in the DBM configuration parameters to the authentication method of your choice: setting

## Digital certificates and certificate authorities

Digital certificates are issued by trusted parties, called certificate authorities, to verify the identity of an such as a client or server: entity,

The digital certificate serves two purposes: it verifies the owner's identity and it makes the owner's public key available. It is issued with an expiration date, after which it is no longer guaranteed by the certificate authority (CA)

To obtain digital certificate, You send a request to the CA of your choice, such as Verisign, or RSA: The request includes your distinguished name, your public and your signature: A distinguished name (DN) is a unique identifier for each user or host for which you are applying for a certificate: The CA checks your signature your public and performs some level of verification of your identity (this varies with different CAs). After verification, the CA sends you signed digital certificate that contains your distinguished name, your public the CA's distinguished name, and the signature of the certificate authority: You store this signed certificate in your database: key, using key key, key

When you send this certificate to a receiver; the receiver performs two steps to verify your identity:

- 1. Uses your that comes with the certificate to check your digital signature. public key
- 2. Verifies that the CA that issued your certificate is legitimate and trustworthy To do this, the receiver needs the of the CA: The receiver might already hold an assured copy of the of the CA in their database, but if not, the receiver must acquire an additional digital certificate to obtain the of the CA. This certificate might in turn depend on the digital certificate of another CA; there might be a hierarchy of certificates issued by multiple CAs, each depending on the validity of the next: Eventually, however; the receiver needs the of the root CA: The root CA is the CA at the of the hierarchy: To trust the validity of the digital certificate of the root CA, the public-key user must receive that digital certificate in a secure manner; such as through download from an authenticated server; or with preloaded software received from a reliable source, Or on securely delivered diskette: public key public key key public key public key top

applications that send digital certificate to a receiver send not just their own certificate, but also all of the CA digital certificates necessary to verify the hierarchy of certificates up to the root CA certificate: Many a digital certificate to be entirely trustworthy, the owner of the digital certificate must have carefully protected their private for example, by encrypting it on their computer's hard drive: If their private has been compromised, an imposter could misuse their digital certificate. For key, key

You can use self-signed digital certificates for testing purposes. A self-signed digital certificate contains your distinguished name, your public and your signature: key,

## Public-key cryptography

SSL uses public-key algorithms to exchange encryption information and digital certificate information for authentication Public-key cryptography (also known as asymmetric cryptography) uses two different encryption keys: a to encrypt data and an associated to decrypt it: key public key private key

Conversely, symmetric cryptography uses just one which is shared by all parties involved in the secure communication This secret is used both to encrypt and decrypt information: The must be safely distributed to, and stored by, all parties, which is difficult to guarantee: With public-key cryptography the public is not secret, but the messages it encrypts can only be decrypted by using it's associated private The private must be securely stored, for example, in your database, or encrypted on your computer's hard drive: key key, key key key key: key key

Public-key algorithms alone do not guarantee secure communication, you also need to verify the identity of whoever is communicating with you: To perform this authentication, SSL uses digital certificates. When you send your digital certificate to someone, the certificate provides them with public You have used your private to digitally sign your certificate and s0 the receiver of the communication can use your to verify your signature. The validity of the digital certificate itself is guaranteed by the certificate authority (CA) that issued it. key: your key public key

## NIST SP 800-131A compliance in a Db2 instance

The Db2 Cancun Release adds NIST SP 800-131A compliance:\_ A Db2 instance is configured by default to comply with NIST SP 800-1314. If you are required to comply with NIST SP 800-1314, you must configure your database instance not

Db2 instance is strictly compliant with NIST SP 800-131A and encrypts data in-transit when:

- The database manager configuration parameter SSL\_VERSIONS is set to TLSV12, which is recommended, TLS11, or TLS1O.

Note: If the SSL\_VERSIONS parameter is set to TLSV12 and TLSV1, YOU can take advantage of TVL 1.2 support and fall back on TLS 1.1 or TLS 1.0 support: 800-131A.

- The database manager configuration parameter SSL\_CIPHERSPECS is set to symmetric algorithm length that is than or equal to 112 key greater

Note: The following list of cipher suites meet this key

- TLS\_RSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_ECDSA\_ WITH AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH AES\_256\_CBC\_SHA384
- TLS\_ECDHE\_ECDSA WITH AES\_256\_CBC\_SHA384
- TLS\_RSA WITH\_AES\_256\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH\_AES\_256\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_AES\_256\_CBC\_SHA
- TLS\_RSA WITH AES\_256\_CBC\_SHA
- TLS\_RSA WITH AES\_128\_GCM\_SHA256
- TLS\_RSA WITH\_AES\_128\_CBC\_SHA256

- TLS\_ECDHE\_RSA WITH\_AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_ECDSA WITH AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_RSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_ECDSA WITH AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH\_AES\_128\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH AES\_128\_CBC\_SHA
- TLS\_RSA WITH\_AES\_128\_CBC\_SHA
- TLS\_ECDHE\_RSA WITH\_3DES\_EDE\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_3DES\_EDE\_CBC\_SHA
- TLS\_RSA WITH\_3DES\_EDE\_CBC\_SHA
- The database manager configuration parameter SSL\_SVC\_LABEL specifies a certificate with RSA length that is greater than or equal to 2048, and that has digital signature with minimum SHA2. key

Note: If SSL\_VERSIONS is set to TLS12, certificates that are signed with SHAL are automatically excluded. SHA1 is not NIST SPSOOA-131 compliant:

Note: For data at rest encryption, you must use InfoSphere Guardium Data Encryption.

## Examples

- 1. Setting instance configuration parameters so that the instance is strictly compliant with NIST SP 800-1314.
- Set the Db2 registry variable DBZCOMM to include SSL. DBZSET DBZCOMM-TCPIP,SSL
- Set the Db2 database manager configuration parameter SSL\_VERSIONS to TLSV12
- DBZ   UPDATE DBM CFG SSL VERSIONS-TLSV1Z
- Set the database manager configuration parameter SSL\_CIPHERSPECS to a symmetric algorithm key length that is greater than or equal to 112. DBM CFG CIPHERSPECS-TLS\_RSA\_WITH\_AES\_256\_GCM\_SHA384 SSL\_C
- Set the database manager configuration parameter SSL\_SVC\_LABEL to certificate with RSA length that is greater than or equal to 2048. That certificate must also have a digital signature with minimum SHAZ. key

gsk8capicmd\_64 ~cert ~size 2048 -sigalg SHAZS6WithRSA DBZ  UPDATE DBM CFG SSL\_SVR\_LABEL-mysel fsigned\_SHA\_2K

These settings ensure that all connections over SSL in any CLP or Java application strictly adhere to NIST SP 800-131A.

- 2\_ Setting instance configuration parameters to take advantage of TLS 1.2 support, and be ready to fall back to TLS 1.1 or 1.0.
- Set the Db2 registry variable DBZCOMM to include SSL. DBZSET DBZCOMM-TCPIP,SSL
- Set the Db2 database manager configuration parameter SSL VERSIONS to TLSV12, TLSV1.

DBM CFG SSL\_VERSIONS-TLSV12,TLSVI

## NIST SP 800-131A compliance and LDAP

The Db2 Cancun Release adds NIST SP 800-131A compliance: If you are to comply with NIST SP 800-1314, you must configure your LDAP environment required

An LDAP plug-in, and an LDAP server is strictly compliant with NIST SP 800-131A when:

- The TLSV12 is enabled in an LDAP security plug-in.

The following database manager configuration parameters are set to the following values:

SRVCON PW PLUGIN IBMLDAPauthserver

CLNT

IBMLDAPauthc] ient

GROUP PLUGIN

IBMLDAPgroups

The IBMLDAPSecurity.ini file specifies only TLSV12:

LDAP\_HOST

myhost

SSL\_KEYFILE

[home/xxx/sq]ib/cfg/IBMLDAPSecurity.kdb

SSL\_PW

mypassword

ENABLE\_SSL

true

FIPS\_MODE

true

SECURITY\_PROTOCOL

TLSV12

- The LDAP server is NIST SP 800-131A compliant when the IBMSLAPD\_SECURITY\_PROTOCOL is set to TLS12. That ensures other must also set IBMSLAPD\_SSL\_EXTN\_SIGALG to an appropriate value to ensure certificates with valid signature and hash algorithms are used\_

With valid configuration in both the LDAP client and server; communication between Db2 LDAP security plug-ins and the LDAP server are NIST SP 800-131A compliant:

## Supported cipher suites

During an SSL handshake, the client and server negotiate which cipher suite to use to exchange data. A cipher suite is a set of algorithms that are used to provide authentication, encryption, and data integrity:

The Db2 database system uses GSKit running in FIPS mode to provide SSL support: GSKit supports the following cipher suites:

- TLS\_RSA\_WITH\_AES\_256\_CBC\_SHA
- TLS\_RSA\_WITH\_AES\_128\_CBC\_SHA
- TLS\_RSA WITH\_3DES\_EDE\_CBC\_SHA
- TLS\_RSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_ECDSA WITH AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH\_AES\_256\_CBC\_SHA384
- TLS\_ECDHE\_ECDSA WITH AES\_256\_CBC\_SHA384
- TLS\_RSA\_WITH\_AES\_256\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH\_AES\_256\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH AES\_256\_CBC\_SHA
- TLS\_RSA\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_RSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_ECDSA WITH
- TLS\_ECDHE\_RSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_ECDSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH\_AES\_128\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_AES\_128\_CBC\_SHA

- TLS\_ECDHE\_RSA WITH\_3DES\_EDE\_CBC\_SHA
- TLS\_ECDHE\_ECDSA

The name of each cipher suite specifies the algorithms that it uses for authentication, encryption, and data integrity checking: For example, the cipher suite TLS\_RSA WITH AES\_256\_CBC\_SHA uses RSA for authentication; AES 256-bit and CBC for encryption algorithms; and SHA-1 for the hash function for data integrity

During the SSL handshake, the Db2 database system automatically picks the strongest cipher suite supported by both the client and the server: If you want the server to accept only one or more specific cipher suites, can set the ss] \_cipherspecs configuration parameter to any of the following values: you

- TLS\_RSA WITH AES\_256\_CBC\_SHA
- TLS\_RSA WITH\_AES\_128\_CBC\_SHA
- TLS\_RSA WITH\_BDES\_EDE\_CBC\_SHA
- TLS\_RSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_ECDSA WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA WITH AES\_256\_CBC\_SHA384
- TLS\_ECDHE\_ECDSA WITH\_AES\_256\_CBC\_SHA384
- TLS\_RSA WITH AES\_256\_CBC\_SHA256
- TLS\_ECDHE\_RSA\_WITH AES\_256\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_AES\_256\_CBC\_SHA
- TLS\_RSA WITH AES\_128\_GCM\_SHA256
- TLS\_RSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_RSA WITH AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_ECDSA WITH\_AES\_128\_CBC\_SHA256
- TLS\_ECDHE\_RSA WITH AES\_128\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_AES\_128\_CBC\_SHA
- TLS\_ECDHE\_RSA WITH\_3DES\_EDE\_CBC\_SHA
- TLS\_ECDHE\_ECDSA WITH\_3DES\_EDE\_CBC\_SHA
- combination of these three values. To set multiple values, separate each value by a comma but do not a space between the values. Any put
- Null. In this case, the strongest available algorithm is automatically picked.

You cannot prioritize which cipher suite is selected. If you set the ssl\_cipherspecs configuration parameter; the Db2 database system picks the strongest available cipher suite; this selection does not depend on the order you specify the cipher suites when you set ss]\_cipherspecs.

## Bundled library and process rules

When Db2 bundles vendor software that requires GSKit, or when vendor software that requires GSKit bundles Db2, certain rules must be followed:

## Library rule

When Db2 bundles vendor software that requires GSKit, the vendor software provides libraries that Db2 links with: These libraries must follow a certain rule: This rule is called library rule.

Library rule: Use short name

When dynamically loading a GSKit library, the caller must pass the loader function only the base file name of the GSKit library and not the path:

example, dlopen ( "Tibgsk8ss] 64.s0" RTLD\_NOW RTLD\_GLOBAL) is correct, while dlopen ( " /usr/opt/ibm/gsk8\_64/1ib/1ibgsk8ss1\_64.s0" RTLD\_NOW RTLD\_GLOBAL) is incorrect: For

## Process rule

When vendor software that requires GSKit, bundles Db2, the vendor software links with the IBM data server client The vendor software must follow certain rule: This rule is called process rule

Process rule: Set up the environment search path

A process must set up the environment search under which it finds the GSKit libraries. The process must do this setup so that the included libraries can load the GSKit libraries from the same location. path

On AIX, a process can set LIBPATH or RPATH of the program to the of the GSKit libraries. In setuid and setgid cases, a process can use db2chglibpath to include the search of GSKit in the RPATH of the program: Only then can GSKit libraries from that location can be used. On Linux, Sun, and HP-UX, a process can set LD\_LIBRARY\_PATH to the of the GSKit libraries. In setuid and setgid cases, process can use dbzchglibpath to include the search of GSKit in the RPATH of the IBM data server client library Only then can GSKit libraries from that location can be used. For example, when a process must use global GSKit in server instances, or it must use its own local GSKit in client or server instances, it might use dbzchglibpath to change the RPATH path path path path

## Symbolic Iink approach and restriction

When you install Db2 on UNIX and Linux, local GSKit libraries are installed as

During the installation of other IBM products another copy of the GSKit libraries might be installed. Depending on the product, these libraries might be either local GSKit libraries or global GSKit libraries. When Db2 and another IBM product that includes GSKit libraries are both installed on the same system, some interoperability issues might arise. These interoperability issues might occur because GSKit allows only libraries from a single GSKit source to exist in any single process. The interoperability issues might lead to unpredictable behavior and runtime errors.

To ensure that a single source of GSKit libraries is used, the symbolic link approach can be used. an initial Db2 installation, the installer creates symbolic link &lt;db2\_instalI\_pathz/1ibb4/gskit or &lt;db2\_instalI\_pathz/1ib32/ During

gskit to &lt;db2\_ install\_path&gt;/1ibb4/gskit db2 or &lt;dbz gskit\_ db2. This location is the default location from which GSKit libraries are loaded.

Products that bundle Db2 and change the symbolic link from the default directory to the library directory of another copy of GSKit must ensure that the newly installed GSKit is at the same or newer level. This restriction applies whether the libraries are global or local. an upgrade or of Db2, the symbolic link is preserved. If the newly installed copy has a symbolic link to the default location, the symbolic link that is associated with the older installation copy is preserved. If the newly installed copy has a symbolic link that does not to the default, the symbolic link that is associated with the newer installation copy is used in the newer installation copy: Some limitations exist since the symbolic link &lt;db2\_instalI\_pathz/1ibb4/gskit /Tib3z/gskit is in the of the Db2 installation copy For example, if two or more instances that are created for any Db2 copy, the symbolic link changes affect all the instances During update point path

The GSKit version included with Db2 is 8.0.50.31.

## Examples

Db2 bundles the LDAP client The Db2 processes follow the process rule. To follow the process rule, the environment search in RPATH is set to its local copy of GSKit: LDAP client libraries load GSKit libraries from the same location. LDAP client libraries, which follow library rules, loads GSKit libraries by their base file names when GSKIT\_LOCAL\_INSTALL\_MODE is set path

LDAP server bundles Db2. LDAP processes follow the process rule: The environment search is set to the global copy of GSKit and IBM data server client libraries loads GSKit libraries from the same location. IBM data server client libraries, which follow library rules, loads GSKit libraries by their base file names. path

## IBM InfoSphere Guardium Data Encryption for encryption of data at rest

IBM InfoSphere Guardium Data Encryption is a comprehensive software data security solution that when used in conjunction with native Db2 security provides effective protection of the data and the database application against a broad array of threats:

InfoSphere Guardium Data Encryption helps organizations ensure that private and confidential data is strongly protected and in compliance with regulations and legislative acts. The benefits of InfoSphere Guardium Data Encryption are: key

- Protection of live files, configuration files, files and back-up data log
- Proven, strong data security for the Db2 database system
- Transparent to application, database and storage environments
- Unified policy and management for protecting data in both online and offline environments key
- Meets performance requirements

InfoSphere Guardium Data Encryption enables you to encrypt offline database backups and to encrypt online ("live") database files. This is encryption of data on the disk, sometimes called "data at as opposed to "data in flight" which is travelling over the network. rest"

- For backups, data is encrypted as it is backed up, so the data on the backup device is encrypted: Should the data need to be recovered, the recovery server recognizes that the data is encrypted and will un-encrypt the data: being
- For database files, the operating system data files containing the data from the Db2 database are encrypted. This protects the data files from unauthorized users trying to read the raw database file:

InfoSphere Guardium Data Encryption is transparent to users, databases, applications, and storage. No code changes or changes to existing infrastructure are required. InfoSphere Guardium Data Encryption can data in any storage environment, while users continue to access data the in the same way as before. protect

InfoSphere Guardium Data Encryption can protect database applications, because it can prevent changes to executable files, configuration files, libraries, and s0 on, thereby preventing attacks on the application

Note: For Db2 pureScale environments, InfoSphere Guardium Data Encryption is supported only on AIX. InfoSphere Guardium Data Encryption is not supported on other platforms that are running Db2 pureScale environments.

## Architecture of InfoSphere Guardium Data Encryption

InfoSphere Guardium Data Encryption is a set of agent and server software packages that you administer by Web-based user-interface and command-line utilities. The InfoSphere Guardium Data Encryption administrator configures security policies that govern how security and encryption are implemented. using

According to how these security policies are defined, the InfoSphere Guardium Data Encryption backup agent encrypts Db2 backups, and the InfoSphere Guardium Data Encryption file system agent encrypts Db2 data files.

The security server stores the security policies, encryption keys and event files: Security policies contain sets of security rules that must be satisfied in order to allow or access. Each security rule evaluates who, what, when, and how protected data is accessed and, if these criteria match, the security server either permits Or denies access. log deny

Figure 4 on page 92 illustrates the architecture of InfoSphere Guardium Data Encryption.

Figure 4. Architecture of InfoSphere Guardium Data Encryption

<!-- image -->

## File system agent

The InfoSphere Guardium Data Encryption file system agent process is always running in the background: The agent intercepts any attempt to access data files, directories, or executables that you are protecting: The InfoSphere Guardium Data Encryption file system agent forwards the access attempt to the security server and, based upon the policy, the security server grants or denies the attempted access. applied

InfoSphere Guardium Data Encryption protection extends beyond simply allowing or denying access to a file, you can also encrypt files Just the file contents is encrypted, but the file metadata is left intact: Therefore, you do not have to decrypt an encrypted file just to see it's name, timestamps, file type, and s0 on This allows data management applications to perform their functions without exposing the file contents. For example, backup managers can backup specific data, without able to see the contents being

If an encrypted file is accessed by an unauthorized user; its contents are worthless without the appropriate security server approval and encryption However; users with the correct policies and permissions are unaware that encryption and decryption are taking place: keys:

## Backup agent

All database backup functions that are normally performed by the Db2 backup API system are supported by the InfoSphere Guardium Data Encryption server;

including native database compression. Other than an additional command-line argument, Db2 backup operators are unaware of InfoSphere Guardium Data Encryption intervention. InfoSphere Guardium Data Encryption backs up and restores static data-at-rest and active online data:

Basic backup and restore configuration is supported: In the basic configuration, data is encrypted and backed up with one server and multiple agents; data is decrypted and restored on an agent that is configured with the same server that was originally used to make the backup.

Single-site and multi-site configurations are also supported for backup and restore In single-site scenario, configuration data is mirrored across multiple security servers in a single data center: In multi-site scenario, backups are restored on different security servers in different data centers

## Audit logging

InfoSphere Guardium Data Encryption agent activity is closely monitored and logged through a centralized audit logging facility All auditable events, including backups, restores, and security administration operations can be logged. This includes InfoSphere Guardium Data Encryption system events, such as initialization, shut down and restart; and network connects and disconnects between different InfoSphere Guardium Data Encryption components.

## Database encryption using AIX encrypted file system (EFS)

If you are running a Db2 system on the ALX operating system, you have the option to set up an encrypted database by AIX encrypted file system (EFS). For detailed information about EFS, see AIX documentation: using your

Note: If you are working in a partitioned database environment, to use EFS, database should be in a single database partition: your

You can encrypt the operating system files that contain the data in database tables by using the underlying EFS with JFS2 file system.

To set up encryption, the steps are as follows:

- 1. Enable EFS on the system:
- 2. Load the keystores for the user account under which the Db2 database daemons run:
- 3. Enable EFS on the database file system:
- 4. Determine the operating system file to encrypt
- 5\_ Encrypt the file that contains the database table that requires EFS protection.

## Enabling EFS on the system

image can be found on the Expansion Pack CD.

Run the following command as root to enable EFS on the system:

% efsenable -a

You need to run the efsenable command only once\_

## Loading the keystores

In the following configuration examples, the Db2 user account under which the database daemons run is called abst: The user abst must have a keystore and any group that abst is a member of must also have a keystore:

- 1. All keystores must be associated with the abst process before starting the Db2 daemons\_

You can verify that are associated by using the efskeymgr -V command, as shown in the following example: they

# Isuser abst abst id-203 pgrp-abstgp groups-abstgp,staff

# efskeymgr -V

List of keys Ioaded

in the current process:

Key #0:

Kind User key

Id (uid gid)

203

Type

Private

key

Algorithm

RSA\_1024

Validity

Key is

valid

Fingerprint

24c88df2:d9lcbba2: c3ellbba:4cl3f8b4:666fabd8

Kind Group

key

Id (uid gid)

Type Private

key

Algorithm

RSA1024

Validity

Key is

valid

Fingerprint

03fead42:57e7646e:a1715626:cfa56c8e:8abedlcl

#2: Key

Kind Group

Id (uid gid) 212

Type

Private

key

Algorithm

RSA\_1024

Validity

Key is

valid

Fingerprint

key

339dfb19:bc850f4c:5551c975:7fe4961b:2dddf3bc

- 2. If there are no keystores shown as associated with the abst process, try the keystores the command: efskeymgr -0 ksh loading using
- 3. Confirm that the user and group keys are loaded by rerunning the command: % efskeymgr -V
- This command prompts for the keystore password, which is initially set to the login password:
- Both the user and group keys should be listed. If the group keystores are still not listed, continue with 4 Step
- 4 Depending on how a group was created, the group keystore may not exist: If the efskeymgr -V command does not list the user's group keystores, you must create the group keystores.

As root or the RBAC role aixefs\_admin, create the group keystore:

- efskeymgr -C group\_ name
- 5\_ Assign group keystore access to each applicable user:
- % efskeymgr -k group /group\_name -S userluser name
- If a user is already logged in, will not immediately have access to the group keystore, and should reload their keystore the efskeymgr -0 they they using

## Enabling EFS on the database file system

EFS only runs on JFS2 file systems and must be specifically enabled.

If database resides on an existing file system, run the chfs ~a efs-yes filesystem command to enable EFS, for example: your

% chfs ~a efs-yes Itesto1

If you are creating a new file system, you can enable EFS the efs-yes with the smit command or the crfs command. For example: using option

% crfs ~V jfs2 -a efs-yes ~m mount \_point devide -A yes

EFS is now enabled on the file system but is not turned on. Turn on EFS only for the particular database tables requiring encrypted data (for more information, see AIX EFS documentation about the efsmgr command and inheritance) your

## Determining the file to encrypt

To determine which file contains a particular database table that you want to protect with EFS encryption, follow these steps that use the EMPLOYEE table as an example.

- 1 Use a query similar to the following example to find the TBSPACEID for the table:
- SELECT TABNAME , TBSPACEID FROM syscat.tables WHERE tabname= EMPLOYEE

Assume the results of this query are as follows:

| TABNAME   |   TBSPACEID |
|-----------|-------------|
| EMPLOYEE  |           2 |

- 2. Look up the table spaces for that TBSPACEID with a query similar to the following example:
- LIST  TABLESPACE   CONTAINERS FOR 2

Assume the results of this query are as follows:

| Container ID   | Name         | Type   |
|----------------|--------------|--------|
|                | COOOOOOO.LRG | File   |

You now know that this table space is contained in the operating system file called /testo1/abst/NODEOOOO / BAR/T0000002/c0000000.LRG This is the file you need to encrypt:

## Encrypting the file

First, as you would do before making any major change to data or databases, back up your database.

Follow these steps to encrypt the file:

- 1. List the file, for example:

# Is rw1 abst abstgp 33554432 Jul 30 18:01 Itestol/abst

- 2 Encrypt the file using the efsmgr command, for example:

# efsmgr ~e

If you list the file again you will see an "e" at the end of the permissions string that indicates the file is encrypted. For example:

# Is abst abstgp 33554432 30  18:03

- 3. Start the Db2 database manager and use it as normal. All data added to the EMPLOYEE table and this encrypted table space will be encrypted by EFS in the underlying file system: Whenever the data is retrieved, it will be decrypted and presented as normal through the Db2 database manager:

## Dbz native encryption

You can encrypt your databases and backup images using Db2 native encryption: Native encryption provides transparent and secure management and requires no changes to your hardware, software, applications, or schemas. key

## Components

## Data encryption key

The database system encrypts data with a data encryption before the data is written to disk. The data encryption is stored, encrypted, in the database (or backup image:) key key

## Master key

A master is an that is used t encrypt a data encryption Master keys are specified by label. Each encrypted database has one master key key key: key:

## Keystore

- You can use one of the following keystores:

Master keys are stored in a file or database called a keystore.

- local keystore that is located on the same system as the Db2 server
- centralized keystore that is located on system other than the Db2 server
- A PKCS #11 keystore that is located on system other than the Dbz server

The primary benefit of a PKCS #11 keystore is the protection it provides to encryption keys. This protection is accomplished by imposing a restriction that keys never leave the secure environment of the keystore: Data disk is encrypted with a data encryption (DEK) that is stored with the database: The DEK, in turn, is encrypted by a master (MK), which is stored externally to the database: The DEK is sent to the PKCS #11 keystore, where it is decrypted by the MK The only exception to this principle of keys not leaving the keystore is when migrating keys from local keystore file to a PKCS #11 keystore keystore. In such cases, these keys are marked as key on key

external: However; an immediate rotation following migration will start to make use of internally defined key keys:

Using a centralized keystore or a PKCS #11 keystore is useful when you have multiple databases and you do not want to maintain individual keystores:

- A password is required to access the keystore: You can optionally store (or stash) the keystore password, in obfuscated form, in a stash Stashing the password makes it possible for the database manager to access the keystore (when the database manager starts, for example) without someone to manually enter the keystore password: file: having
- use with native encryption, a local keystore must be compliant with the public-key cryptography standard 12 (PKCS#12). For
- A Db2 instance can be configured to use only one keystore for native encryption at a time

## Keystore password

Keystore password is a broad term whose definition depends of the keystore that you use:

## Local keystore

The local keystore password is the password to the PKCS#12 keystore file: The location of this file is defined by the keystore\_location database manager configuration parameter: This keystore file holds the master that are used for Db2 native encryption: keys

## Centralized keystore

The centralized keystore password is the password to the centralized keystore file: The location of this file is defined by the SSL\_KEYDB parameter in the centralized keystore configuration file: This keystore file holds the SSL certificates for communication between the Db2 server and the centralized manager key

## PKCS #11 keystore

The PKCS #11 keystore password is the string that is used to authenticate the user to the PKCS #1l keystore. This password can be specified in one of two ways:

- By providing the keystore password interactively when you run the dbzstart command with the OPEN KEYSTORE USING password option.
- By using a stash file, whose location is defined by the KEYSTORE\_STASH parameter in the PKCS #11 keystore configuration file

## manager Key

A manager is software that you can use to create, update, and secure keystore: key

- You can use IBM Global Security Kit (GSKit) to manage a local keystore.
- For a PKCS #11 keystore, you can use one of the following supported managers: key
- For a centralized keystore, you can use any manager that supports the Management Interoperability Protocol (KMIP) version 1.1 or higher: For example, you can use IBM Security Lifecycle Manager to manage a centralized keystore: key Key Key
- Gemalto Safenet HSM (formerly Luna) version 6.1 (firmware version 6.23.0) and above

- Thales nShield HSM, security world software version 11.50

## Database configuration

## encrlib

Specifies the absolute of the encryption library to be used for automatically encrypting backup images. path

## encropts

Specifies options that are specific to the encryption library to be used for automatically encrypting backup images.

## Database manager configuration

## keystore\_type

Specifies the type of keystore. For more information, see keystore\_type Keystore type configuration parameter:

## keystore\_location

Specifies where to find the keystore. For more information, see keystore\_location Keystore location configuration parameter:

## Prerequisites for Db2 native encryption

The Db2 native encryption feature is included in all Db2 offerings

## Licensing

The following editions of Db2 database include the Db2 native encryption license:

- Db2 Enterprise Server Edition
- Developer Edition
- Db2 Workgroup Server Edition
- Db2 Advanced Enterprise Server Edition
- Db2 Advanced Workgroup Server Edition

## GSKit

To use Db2 native encryption, you must verify that GSKit is installed and configured.

## Verifying GSKit installation and configuration:

For the Db2 native encryption feature to work properly, IBM Global Security Kit (GSKit) must be installed, and the environment must be configured correctly

## Procedure

- 1. Verify that GSKit is installed:

## Linux and UNIX operating systems

- On Linux and UNIX operating systems, the Db2 installer installs GSKit locally: For each instance, the GSKit libraries will be located in sq]lib/lib3z/gskit or sq]lib/1ib64/gskit\_
- If a global copy of GSKit exists (for example, in /usr/lib on Linux O UNIX) the global copy of GSKit and the copies of GSKit installed by the Db2 installer at the same version level. keep

## Windows operating systems

You must install GSKit manually: See: GSKit installation instructions for Windows

- 2 Verify that the to the GSKit libraries is set in the appropriate environment variable for operating system: path your

Table 5. Environment variable settings for GSKit libraries on Linux, UNIX, and Windows operating systems

| Operating system      | Location of GSKit libraries                                                                              | Environment variable setting                                                                                |
|-----------------------|----------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|
| Linux and UNIX 32-bit | SINSTHOME/sq]ib/lib3z/gskit                                                                              | Include SINSTHOME /sq]lib/1ib32/ gskit in the LD_LIBRARY_PATH, LIBPATH, or SHLIB_PATH environment variable. |
| Linux and UNIX 64-bit |                                                                                                          | Include SINSTHOME/sq]lib/1ib64/ t in the LD_LIBRARY_PATH, LIBPATH, or SHLIB_PATH environment variable_ gski |
| Windows 32-bit        | C: | Program Files (x86) | IBM gsk8|1ib                                                                  | Include C: | Program Files (x86) | IBMIgsk8| 1ib in the PATH environment variable:                          |
| Windows 64-bit        | 64-bit GSKit libraries: C:|Program Files| IBM gsk8| 1ib64 32-bit GSKit libraries: C:|Program Files (x86) | Include C: | Program Files IBMIgsk8' 1ib64 or C: |Program Files PATH environment variable_                  |

## Setting up Db2 native encryption

To use Db2 native encryption, YOu need to set up a keystore for master keys and then you need to configure the Db2 instance to use the keystore: storing

## Before you begin

Verify GSKit installation and configuration

## Procedure

- 1 Set up the keystore:
- If you will be centralized keystore to store master set up a centralized keystore: using keys,
- If you will be local keystore or centralized keystore, create local keystore. using
- If you will be PKCS #11 keystore, set up the PKCS #11 keystore using
- 2 Configure the DB2 instance for the keystore where you will store master keys.

## What to do next

- Create an encrypted database
- Create an encrypted backup image

## Creating local keystore:

You can create a keystore on the local system the GSKit library command gsk8capicmd\_64. using

## Procedure

in as the Db2 instance owner; and then create the local keystore by executing the gsk8capicmd\_64 command: Log

## Example

gsk8capicmd\_64 -keydb -create -db /home/thomas/keystores/ne-keystore. ~pw "good . pWd ' -type pkcsl2 -stash 'pl2"

## Basic command syntax

gsk8capicmd\_ 64 -keydb -create "&lt;file-name&gt;" ~pW "&lt;password&gt; ~type pkcsl2 ~stash

- &lt;file-name&gt; is the full path and file name You want to give the keystore file
- Keystore format:
- For use with native encryption, the format of the keystore must be PKCS#12, s0 it is mandatory to specify -type pkcsl2
- PKCS#12 keystore file names must have the extension
- Stashing the password:
- If you specify the -stash parameter; the keystore password will be stored (or stashed) in a stash file with the same base name as the keystore file but with the file extension 'sth"
- If the password is not stashed, you will be prompted for a password whenever the database manager accesses the keystore, including during db2start
- You can stash the password in a stash file later by issuing the gsk8capicmd\_64 command with the -stashpw parameter

Note: Stashing the password with the gsk8capicmd\_64 command is intended to be used in a local keystore only Do not attempt to stash a password in a local keystore with the dbzcredman command: The dbzcredman command is intended to be used with PKCS #11 keystore:

For information about the full syntax of the gsk8capicmd\_64 command, see: GSKCapiCmd Users Guide a master key to a local keystore: Adding

With Db2 native encryption, when you create a database with the ENCRYPT parameter; by default the database manager creates a new master for the database and adds that master to the keystore. Alternatively, you can generate master in a local keystore yourself, and then specify that your generated master should be used for new database instead of the default: key key key key

## Procedure

Generate a master in an existing, local keystore by issuing the gsk8capicmd\_64 command. key

## Example

gsk8capicmd 64 -secretkey ~create /home/thomas/keystores/ne-keystore.pl2" ~stashed manual master\_key' ~size "16" "my\_

## Basic syntax

gsk8capicmd\_64 -secretkey &lt;password&gt;" ~stashed "&lt;]abelz" ~-size &lt;key-Iength-in-bytesz"

-create ~db "&lt;keystore-file-name&gt;

- &lt;keystore-file-name&gt; is the full and name of the keystore file path

- If the keystore password is stashed, YOU can specify the -stashed parameter to cause the password to be retrieved from the stash file
- If the password is not stashed, you may specify the password with the paramter
- If neither -stashed nor -pW is specified, YOu will be prompted for the keystore password

For information about the full syntax of the gsk8capicmd\_64 command, see: GSKCapiCmd Users Guide:

## Setting up a centralized keystore:

To set up a centralized keystore for use with Db2 native encryption, you need to create a centralized keystore configuration file and configure SSL communication between the Db2 instance and the manager key

## Before you begin

Set up the centralized manager: key

- If you are using IBM Security Key Lifecycle Manager; see: Quick Start Guide

## Procedure

- 1 Create a centralized keystore configuration file
- 2. Configure SSL between the Db2 instance and the manager one of the following methods: key using
- The KMIP server must support TLS 1.2
- All certificates must have a size of at least 2048 bits: key
- All certificates must be signed with a signature algorithm that uses SHA2 (SHA256, SHA384, SHA512). The use of SHA1 is not supported
- All certificates' above refers to the Db2 client certificate, the KMIP server certificate, and any Certificate Authority (CA) and intermediate CA root certificates.
- Configure SSL with ISKLM
- Configure SSL with KeySecure

Note: Other manager products can be configured in similar manner key

## What to do next

Configure the DB2 instance to use this centralized keystore to store database master for Db2 native encryption: keys

Creating centralized keystore configuration file:

To store master keys in a centralized keystore with Db2 native encryption, you need to create configuration file that lists details about the centralized keystore:

## Procedure

On the Db2 server; create the centralized keystore configuration file in a text editor:

## Example

VERSION-1 PRODUCT\_NAME=ISKLM ALLOW\_KEY\_INSERTWITHOUT\_KEYSTORE\_BACKUP-true SSL\_KEYDB- /home/userName/sq]ib/security/keydb:pl2 SSL\_KEYDB\_STASH-/home/userName/sq]lib/securitylkeydb.sth SSL\_KMIP\_CLIENT\_CERTIFICATE\_LABEL-db2\_client\_ abel MASTER\_SERVER\_HOST-serverName. doma inName MASTER\_SERVER\_KMIP PORT-kmipPortNumber CLONE\_SERVER\_HOST-clonel.doma inName PORT-kmipPortNumber CLONE\_SERVER\_HOST-clonez.domainName

CLONE\_SERVER\_KMIP\_PORT-kmipPortNumber

## Keywords

## VERSION

Required. Version of the configuration file: Currently, 1 is the only supported value

## PRODUCT\_NAME

- ISKLM for IBM Security Key Lifecycle Manager

Required: manager product: Supported values: Key

- KEYSECURE for SafeNet KeySecure
- OTHER for any other manager that supports the Management Interoperability Protocol (KMIP) version 1.1 or higher key Key

## WITHOUT\_KEYSTORE\_BACKUP

Optional. Allow the database manager to insert new keys into the centralized DATABASE ENCRYPT or ADMIN\_ROTATE MASTERKEY commands are run without a specified existing master label, or when the TRUE, new keys are allowed to be inserted, if set to FALSE an error is returned if the database manager attempts to insert a new You should only set this to TRUE if you are not creating your master keys within the centralized manager; and you have an automated backup solution of your centralized manager for newly inserted keys. This parameter must be set to TRUE if you are migrating keys by the dbzplztokmip command: It can be changed to FALSE after the tool has completed. Default value: FALSE: key key key: key key using

## ALLOW\_NONCRITICAL\_BASIC\_CONSTRAINT

Optional. If you set the parameter to TRUE, this allows Db2 to use local Certificate Authority within KMIP server that does not have a "critical" keyword set and avoids "414" error that is returned by GSKit: This parameter was introduced in Db2 V11.1.2.2. Default value: FALSE:

Example:

## SSL\_KEYDB

Required. Absolute path and name of the local keystore file that holds the SSL certificates for communication between the Db2 server and the centralized manager key

## SSL\_KEYDB\_STASH

Optional. Absolute and name of the stash file for the local keystore that holds the SSL certificates for communication between the Db2 server and the centralized manager: Default value: None\_ path key

## SSL\_KMIP\_CLIENT\_CERTIFICATE\_LABEL

Required: The label of the SSL certificate for authenticating the client during communication with the centralized manager: key

## DEVICE\_GROUP

Name of the centralized manager device group containing the used by the Db2 server: Not all centralized manager products support this parameter: This parameter is required for IBM Security Lifecycle Manager (ISKLM): key keys key Key

## MASTER\_SERVER\_HOST

Required: Host name or IP address of the centralized manager (For ISKLM, this information is available on the "Welcome' tab of the web console.) key

## MASTER SERVER KMIP\_PORT

Required: The 'KMIP SSL port" of the centralized manager (For ISKLM, this information is available the "Welcome tab of the web console:) key on

## CLONE\_SERVER HOST

CLONE\_SERVER\_KMIP\_PORT parameter in the configuration file, each host with a different value: Clone servers are considered read only and are only used for retrieving existing master from the centralized keystore: Clone servers are not used when inserting a new which occurs when an existing master label has not been specified for the CREATE DATABASE ENCRYPT O pairs keys key, key

Optional. Host name or IP address of secondary centralized keystore. Default value: None: You can specify up to five clone servers by repeating the CLONE\_SERVER\_HOST and

ADMIN\_ROTATE\_MASTER\_KEY commands, or for the dbzplZtokmip executable

## CLONE\_SERVER KMIP\_PORT

Optional. The 'KMIP SSL port" of secondary centralized keystore. Default value: None. You can specify up to five clone servers by repeating the CLONE\_SERVER\_HOST and CLONE\_SERVER KMIP PORT parameter in the configuration each host with a different value: file, pairs

## COMMUNICATION\_ERROR\_RETRY\_TIME

Optional. The number of times the Db2 database manager cycles

through the list of configured master and clone centralized managers if the connection fails or an error is returned from all of the centralized managers. A wait of a length specified in the ALL\_SERVER\_UNAVAILABLE\_SLEEP parameter is inserted before each Default value: 50. key key cycle:

## UNAVAILABLE\_SERVER BLACKOUT\_PERIOD

Optional: The amount of time, in seconds, to skip sending requests to a particular master or clone centralized manager after failed connection attempt or it has returned errors. This parameter was introduced in Db2 V11.1.2.2. Default value: 300 seconds\_ key key

## ALL\_SERVER UNAVAILABLE\_SLEEP

Optional. When all master and clone centralized managers are unavailable and in a blackout period, this parameter is the amount of time to wait, in seconds, before removing the blackout period and reattempting connections to all centralized managers. This parameter seconds\_ key key

Configuring SSL between a Db2 instance and centralized manager (ISKLM): key

To store master keys in a centralized keystore with Db2 native encryption, you need to set up SSL communication between the Db2 instance and the centralized manager: key

## Before you begin

On the Db2 server; create local keystore to store SSL certificates

## About this task

- On the Db2 server; the gsk8capicmd\_64 command is used to create, extract, and add SSL certificates to the local keystore: For detailed information about the command, see: GSKCapiCmd Users Guide
- Some examples below show self-signed certificates Self-signed certificates are suitable for test environments, but for production environments certificates that are signed by third party certificate authorities are more appropriate
- Some information about the IBM Security Lifecycle Manager web interface and command line interface is included below: more complete information, see: Setup for SSL handshake between IBM Security Lifecycle Manager server and client device. using Key For Key

## Procedure

- 1. On the Db2 server: create an SSL signer certificate:
- a Create the certificate by issuing the gsk8capicmd\_64 command.

## Example

- Extract the certificate to a file by issuing the gskBcapicmd\_64 command.

gsk8capicmd\_64 ~cert ~create -db "clientkeydb. "DB2\_signer\_certificate" ~dn alg SHA256\_WITH\_RSA ~size 2048 -sig\_=

## Example

```
gsk8capicmd_64 ~cert -extract ~db "clientkeydb.pl2" "DB2_signer_certificate" -target format ascii -fips
```

- C. Securely transmit the Db2 server certificate file to the centralized manager key
- 2 On the centralized manager: add the Db2 server certificate to the keystore: key

The following substeps describe how to add a certificate to IBM Security Lifecycle Manager using the web console Key

- a Create a device group
- 1) Select "Create' in the 'Device Group' list of the Advanced Configuration' tab\_
- 2) Select the device family "General Parallel File System (GPFS)" and then enter DB2" as the new device group name
- 3) Leave the 'Enable machine affinity" check box unselected:
- b Import the DB2 server certificate file
- 1) On the "Welcome" tab select new group, 'DB2" your
- 2) From the "Go to" list, select "Manage and Devices' This you to the Advanced Configuration tab. Keys will bring
- Select "Certificates' from the Add" list.
- 4) Specify the certificate name and the file when prompted: path
- 5) In the Advanced Configuration" window, select "Import" from the "Client Device Communication Certificates' menu
- 3\_ On the centralized manager: create an SSL signer certificate: key

The following substeps describe how to create certificate and then extract it to file using the IBM Security Lifecycle Manager web console and command-line interface: Key

- a. Create a self-signed certificate or obtain a certificate from certificate authority
- b Extract the certificate to a file using the command-line interface:
- 1) Enable the Jython scripting language:

## Example

sword "&lt;password&gt; jython ~pas=

Iwsadmin.sh ~username "&lt;admin-user&gt;

- 2) Export the certificate using the tklmCertExport command:

## Example

('[-uuid CERTIFICATE-6lf8e7ca-62aa-47d5-a915-8adbfbdca9de format DER -fileName d: IISKLM\_certificate\_file.pem] ' )

print AdminTask tklmCertExport

- C. Securely transmit the centralized manager certificate file to the Db2 server: key
- 4\_ On the Db2 server: add the centralized manager certificate to the local keystore: key
- a\_ Add the certificate by issuing the gsk8capicmd\_64 command:

## Example

gsk8capicmd\_64 ~cert -add -db "clientkeydb.pl2" ISKLM\_signer certificate" -file Ipath/to/ISKLM\_certificate\_file.pem"

## Results

When the Db2 database manager connects to the centralized manager; SSL communication will be used. key

## What to do next

Configure the DB2 instance to use the centralized keystore

Configuring SSL between Db2 instance and centralized manager (KeySecure): key

To store master keys in a centralized keystore with Db2 native encryption, you need to set up SSL communication between the Db2 instance and the centralized manager: key

## Before you begin

On the Db2 server; create local keystore to store SSL certificates:

## About this task

- On the Db2 server; the gsk8capicmd\_64 command is used to create, extract; and add SSL certificates to the local keystore: For detailed information about the command, see: GSKCapiCmd Users Guide:

## Procedure

## On KeySecure, create a CA and add it to the Trusted CA list:

- 1. Verify that a CA certificate is created or installed. Make sure that the CA is added to the trusted CA list:
- 2. Make sure that a server certificate request is created and signed with the CA certificate:
- 3\_ Check that a Cryptographic Server is created. Also, verify that the appropriate authentication settings are configured: Key
- Protocol: Select KMIP
- a Ensure the appropriate Cryptographic Server Properties: Key
- IP: Select ALL or a specific IP address.
- Port: Select a port number: The standard KMIP port number is 5696. In the centralized keystore configuration file, the value for the MASTER\_SERVER KMIP\_PORT or CLONE\_SERVER\_KMIP\_PORT parameter must be configured according to the value specified for the port number:
- Use SSL: Select True
- Server Certificate: Select the label of the server certificate:
- Ensure the appropriate Authentication Settings:
- Password Authentication: Select Not Used.
- Client Certification Authentication: Select Used for SSL session and username
- Trusted CA list Profile: Select the profile that contains the Trusted CA list to which the CA was added:
- User name Field in Client Certificate: Select either the CN or OU value from the dropdown list:
- Require Client Certificate to Contain Source IP: Leave unticked.

- C\_ Create a Local User whose user name matches the User name field in Client Certificate field in the client certificate:
- 4 Download the CA certificate to the client keystore

## On the Db2 server; add the CA certificate and create a client certificate request:

- 5. Add the CA certificate that was previously downloaded to the local keystore gsk8capicmd\_64 -cert -add -db "clientkeydb.pl2" -stashed "trustedCA" -file "trustedCA.
- 6\_ Create a client certificate request:
- gsk8capicmd\_64 -certreq ~create ~db "clientkeydb.pl2" ~stashed "clientCert" ~dn "CN-dbzKeySecureUser,0-IBM,OU-DB2, L-Toronto,ST-Ontario,C-CA' -target "client cert requ

## At your CA, sign the client certificate request:

- 7 . Sign the client certificate request with the CA certificate, and then download the signed certificate.

## On the Db2 server; add the signed client certificate:

- 8
- Add the signed client certificate to the local keystore: gsk8capicmd\_ 64 -cert ~receive -db "clientkeydb.F ~stashed -file "client\_cert\_signed.arm" p12"

## Results

When the Db2 database manager connects to the centralized manager; SSL communication is key used.

## What to do next

Configure the Db2 instance to use the centralized keystore

Migrating from a local keystore to a centralized keystore:

If you are currently Db2 native encryption with master keys stored in a local keystore and you want to start centralized keystore instead, YOU can copy the master keys from your local keystore to the centralized keystore by issuing the using using

## Before you begin

- Create a centralized keystore configuration file
- Configure SSL between the DB2 instance and the centralized manager key

## Procedure

- 1. Back up the centralized keystore: See: Backing up IBM Security Lifecycle Manager Key
- 3\_ all master keys from the local keystore to the centralized keystore by issuing the dbzplztokmip command. Copy
- 2 insert\_without\_keystore\_backup parameter to TRUE in the centralized keystore configuration file: key \_

## Example

dbzplZtokmip -from /home/thomas/keystores/ne-keystore.p12 to /home/thomas/keystores/isklm.cfg

To see full syntax information, type: dbzplZtokmip -h or refer to db2pl2tokmip command:

- 4\_ Set the allow insert\_without\_keystore\_backup parameter to FALSE in the centralized keystore configuration file:

## What to do next

- Configure the DB2 instance to use the centralized keystore
- 2. Change the master by running the ADMIN\_ROTATE\_MASTER\_KEY procedure: key

## Setting up a PKCS #11 keystore:

To set up a PKCS #11 keystore for use with Db2 native encryption, begin by creating PKCS #11 keystore configuration file

## Before you begin

- 1 Install and configure the vendor software that lets you access the PKCS #11 keystore. For a PKCS #11 keystore, you can use one of the following supported managers: key
- Gemalto Safenet HSM (formerly Luna) version 6.1 (firmware version 6.23.0) and above
- Thales nShield HSM, security world software version 11.50
- 2 Check the ability to connect to the PKCS #11 keystore by vendor utilities. For example: using
- For SafeNet (formerly Luna) hardware security module (HSM), use vtl verify
- For Thales nShield HSM, use enquiry

## Procedure

- 1\_ Create PKCS #11 keystore configuration file
- 2. Optional: Create a stash file

## What to do next

Configure the DB2 instance to use this PKCS #11 keystore to store database master keys for Db2 native encryption:

Creating PKCS #11 keystore configuration file:

To store master keys in a PKCS #11 keystore with Db2 native encryption, you need to create a configuration file that contains details about the PKCS #11 keystore

## Procedure

On the Db2 server; create the PKCS #11 keystore configuration file in a text editor:

## Example

VERSION=1 PRODUCT NAME=Luna ALLOW KEY INSERT WITHOUT  KEYSTORE BACKUP-true LIBRARY-/usr/safenet/Iunac] ient/Iuna6.1/1ib/libCryptoki2\_64.s0 SLOT\_LABEL-DBZPartition NEW\_OBJECTTYPE-PRIVATE KEYSTORE\_STASH-/home/userName/sq]lib/securitylpkcsll\_pW.sth

## Keywords

## VERSION

Required: Version of the configuration file. Currently, 1 is the only supported value

## PRODUCT\_NAME

Optional. Use this value to override the PKCS #11 keystore type that is determined from product information returned by PKCS #11 API calls. Supported values are:

- Luna for SafeNet (formerly Luna) hardware security module (HSM)
- Thales for Thales nShield HSM
- Other for any other manager that supports PKCS #11 key

## ALLOW\_KEY\_INSERT\_ WITHOUT\_KEYSTORE\_BACKUP

Optional. Allow the database manager to insert new keys into the centralized manager: New keys are inserted when the CREATE DATABASE ENCRYPT or ADMINROTATE MASTERKEY commands are run without a specified existing master label, or when the TRUE, new keys are allowed to be inserted, if set to FALSE an error is returned if the database manager attempts to insert a new You should only set this to TRUE if you are not creating your master keys within the centralized manager; and you have an automated backup solution of your centralized manager for newly inserted This parameter must be set to TRUE if you are migrating keys by using the dbzplZtokmip command. It can be changed to FALSE after the tool has completed. Default value: FALSE: key key key: key key keys:

## LIBRARY

Required. The absolute and name (including extension) of the PKCS #11 keystore vendor-supplied shared The format is platform-dependent: path library:

## Examples for AIX o Linux:

## Examples for Windows:

C:Isafenet Tunac] ient | Tuna6.1|]ib|libCryptoki2\_64.d11

## SLOT\_LABEL

Optional. Identifies the slot in the HSM by a label. The label is a name that is defined by the application, and is assigned token initialization. If specified, the value must be 1 32 characters This parameter cannot be specified if SLOT\_ is specified. during long: 'JD

## SLOT\_ID

Optional. Identifies the slot in the HSM by an ID. Must be an integer value: This parameter cannot be specified if SLOT\_LABEL is

## NEW\_OBJECT\_TYPE

- PRIVATE for private objects

Optional. Defines whether new master generated at the PKCS #11 keystore are created as private or public objects. The default value is PRIVATE: The supported values are: keys

- PUBLIC for objects public

## KEYSTORE\_STASH

Optional. Absolute and name of the stash file that holds the PKCS #11 keystore password. The instance uses the stash file to authenticate to the PKCS #11 keystore path

## What to do next

Create a stash file, if you choose to store the HSM credentials in a stash file:

Creating stash file:

Create a stash file to address operational concerns that involve access to PKCS #11 keystore credentials.

## Before you begin

- Create PKCS #11 keystore configuration file

## About this task

A stash file stores the password of a keystore in obfuscated form: The stash file contributes to enhanced operations. If you create a stash file, the database manager can access credentials that it requires to stash file, the only realistic solutions to restart an instance immediately in the event of an unplanned outage are less than ideal: log

- Store the credentials in plain form so that an automated script can restart the instance. However; storing the password in plain form is not desirable Since it violates security policies and best practices.
- Have a DBA always available to provide the access credentials for the PKCS #11 keystore when the instance restarts. However; to rely on human intervention, with the expectancy of instant response time, is rarely feasible from an operational perspective. having

## Restrictions

The following procedure is intended to be used in a PKCS #11 keystore. Do not attempt to stash a password by using the gsk8capicmd\_64 command, since that command is intended to be used exclusively with a local not attempt to stash a password for a local keystore by the following procedure. using

## Procedure

To create stash file in PKCS #l1 keystore:

- 2. Update the PKCS #11 keystore configuration file by adding the KEYSTORE\_STASH parameter:
- 1\_ Run the dbzcredman command to stash the provided password to file: dbzcredman -stash -password StrOngPasswOrd ~to /home/dbzinstl/keystore/pkcsll\_pW.sth
- KEYSTORE\_STASH-/home/dbzinstl/keystore/pkcsll\_pW.sth
- 3. Run the dbzstop command to remove the in-memory copy of the password:
- 4 Run the dbzstart command without the OPEN KEYSTORE USING password option:

## Results

The PKCS #11 keystore password is now stored in the stash file, in obfuscated form The next operation that requires the PKCS #11 keystore password will read it from the stash file:

## What to do next

If you are currently Db2 native encryption with master keys that are stored in a local keystore and you want to start to use PKCS #11 keystore instead, Migrate the local keystore to PKCS #11 keystore. using

If you decide to using the stash file, in favor of providing PKCS #Il keystore credentials on instance start, follow these steps: stop

- 1\_ Run the db2start command with the OPEN KEYSTORE USING password option:
- 2. Update the PKCS #11 keystore configuration file by removing the KEYSTORE\_STASH parameter:
- 3 Delete the stash file to eliminate any potential security risks that this unused file poses.

The next operation that requires the PKCS #1l keystore password will read it from memory:

Migrating from a local keystore to a PKCS #11 keystore:

If you are currently Db2 native encryption with master keys stored in a local keystore and you want to start a PKCS #11 keystore instead, you can copy the master keys from your local keystore to the PKCS #11 keystore by issuing the dbzplztopll command: using using

## Before you begin

- Create a PKCS #11 keystore configuration file

## Procedure

- 1. Back up the PKCS #11 keystore by using the vendor's manager software key
- 2 Set the ALLOW\_KEY\_INSERT\_WITHOUT\_KEYSTORE\_BACKUP parameter to TRUE in the PKCS #l1 keystore keystore configuration file
- 3\_ If you are migrating to a hardware security module (HSM) of the Thales nCipher family, you must the unwrap\_ kek parameter to the CKNFAST\_OVERRIDE\_SECURITY\_ASSURANCES environment variable. assign
- 4\_ Copy all master keys from the local keystore to the PKCS #11 keystore by issuing the dbzpl2topll command.

## Example

dbzplztopll -to Olpkcsll\_keystore.cfg -pin StrOngPasswOrd

To see full syntax information, type: dbzplztopll -h Or refer to dbzplZtopll command.

- 5. Set the ALLOW\_KEY\_INSERT\_WITHOUT\_KEYSTORE\_BACKUP parameter to FALSE in the PKCS #11 keystore keystore configuration file

## What to do next

- 1 Configure the DB2 instance to use the PKCS #11 keystore:

- 2. Change the master by running the ADMIN\_ROTATE\_MASTER\_KEY procedure: key

## Configuring a Db2 instance to use a keystore:

To configure Db2 instance to use a keystore for native encryption, you just need to set two database manager configuration parameters: keystore\_type and keystore\_location:

## Procedure

- For a local keystore, set keystore\_type to 'PKCS12" , and set keystore\_location to the absolute and file name of the local keystore file path

## Example

update dbm cfg using keystore\_location /home/thomas/keystores/ne-keystore.pl2 update dbm cfg using keystore\_type pkcsl2

- For a centralized keystore, set keystore\_type to KMIP' and set keystore\_location to the absolute and file name of the centralized keystore configuration file: path

## Example

update dbm cfg us ing keystore\_location /home/thomas/keystores/isklm.cfg update dbm cfg using keystore\_type kmip

- For a PKCS #11 keystore, set keystore\_type to 'PKCS11", and set keystore\_location to the absolute and file name of the PKCS #11 keystore configuration file: path

## Example

using keystore\_location /home/thomas/keystores/pkcsll.cfg update dbm cfg us ing tore\_type pkcsll keyst

## What to do next

Restart the database manager instance to cause the configuration changes to take effect:

## Keystore best practices:

Employ security best practices to your keystores and master secure. keep keys

## Procedure

- Use standard operating system access security protocols to keep your local keystore files and keystore configuration files safe\_
- For local keystores and centralized keystores, use strong keystore passwords. The gsk8capicmd\_64 command has a parameter; -strong, that enforces stronger passwords. For more information, see: GSKCapiCmd Users Guide
- Rotate database master keys regularly using the ADMIN\_ROTATE\_MASTER\_KEY procedure:
- For local keystores and centralized keystores, change keystore passwords regularly using the gsk8capicmd\_64 command with the -changepw parameter
- Back up files at intervals, and every time the keystore changes (for example, when Or certificate is added, a master key is rotated, or the password is changed:) regular key
- Back up local keystore files and keystore configuration files, and store the backed up files in a secure location.

- If you are using a centralized keystore, use built-in features of the manager to back up the keystore: See: Backing up IBM Security Lifecycle Manager key Key
- Do not delete keys from the keystore. Deleting keys from the keystore might result in the inability to access backups or transaction log files Backups use the master that is specified the backup operation and are not affected by the ADMIN\_ROTATE\_MASTER\_KEY procedure: Although the master is rotated for primary transaction files following a call to the ADMIN\_ROTATE\_MASTER\_KEY routine, the change is not immediate, and access to the old master is required for a key during key log period. key

## Creating an encrypted database

Create an encrypted database by specifying the ENCRYPT when the CREATE DATABASE command\_ option using

## Before you begin

- If you are centralized manager; configure the centralized manager and master You must also have SSL set up correctly between the centralized manager and your database server using key key key: key
- If you are using local manager; configure GSKit, then create the local keystore file and master key key:

## Procedure

- To create an encrypted database with the default settings, specify the ENCRYPT on the CREATE DATABASE command: db2 create db &lt;encrypted\_database\_name&gt; encrypt option
- To create an encrypted database with custom specify other options on the CREATE DATABASE command: settings,
- db2 create db &lt;encrypted\_ name&gt; encrypt cipher aes &lt;length\_of\_data\_encryption\_keyz master Tabel &lt;master\_key\_Tabel&gt; key key

## Where:

- CIPHER cipher-name specifies the encryption algorithm that is to be used for encrypting the database.
- MASTER KEY LABEL label-name specifies label for the master that is used to encrypt the database: If you specify this option, the master must already exist: If you exclude this option, a master for the database is automatically generated and added to the keystore: key key key
- KEY LENGTH key-length specifies the length in bits of the data encryption that is to be for encrypting the database: key used

## Results

the appropriate stash file or password. using

## Encrypting an existing database:

If you would like to encrypt the data in an existing, unencrypted database, you must create a backup image of the database, drop it, and then restore it into an encrypted database.

## Procedure

To encrypt an existing database:

- 2. Configure the database instance with the new keystore:
- 1. Create a keystore. if you are using a local manager: If you are using a centralized manager; ensure you have set up a centralized keystore: key key
- 3. Generate a backup image of the database you would like to encrypt: dbz backup database &lt;database\_ name&gt;
- 4 Drop the original copy of the database you wanted to encrypt: db2 drop database &lt;database\_ name&gt;
- 5. Restore the backup image into a new encrypted database dbz restore database &lt;database name&gt; into &lt;new\_database
- name&gt; encrypt

## Results

The new database will contain the same information as the original, except with encrypted data.

## Verifying a database is protected by native encryption:

Verify whether or not your database is encrypted by native encryption by verifying the value of the Encrypted database db configuration parameter: You can also use the ADMIN\_GET\_ENCRYPTION\_INFO table function if you would like more information on encryption settings. your

## Procedure

To verify that your database has been successfully encrypted by Db2 native encryption, ensure that the value of the Encrypted database db configuration parameter value is YES:

db2

db cfg for &lt;examp]e\_encrypted\_database&gt; Encrypted database YES get

## Encrypted database backup images

You can create an encrypted backup image of your database, then retrieve it the RESTORE DATABASE or RECOVER DATABASE command. RECOVER DATABASE runs both the RESTORE DATABASE and ROLLFORWARD DATABASE command: using

## Creating encrypted backup images:

Create an encrypted backup image of your database the BACKUP DATABASE command and specifying which you would like to use in backup operations. using library

## Procedure

- If you have the encrl ib value set in the database configuration file, simply run the BACKUP DATABASE command:
- dbz backup database &lt;database\_ name&gt;
- If you do not have the encrlib value set in the database configuration specify the encrypt keyword: db2 backup database &lt;databasename&gt; encrypt file,

## Verifying the database backup image is encrypted:

By default backups of encrypted databases are also encrypted: However; if you would still like to ensure that your backup image is encrypted, You can run the dbzckbkp command and verify that it returns valid values for compression.

## Procedure

To verify that the database backup image is encrypted, run the dbzckbkp command: grep Compression

If the image has been successfully encrypted by Db2 native encryption, the compression parameter should return 2 if the backup image is encrypted, or 3 if it is both encrypted and compressed:

## Restoring an encrypted backup image to a different system:

Retrieve encrypted backup images of your databases on the same system Or on a different system.

Restoring encrypted backup images to the same system is the same, whether or not you are local or centralized manager Simply run the RESTORE DATABASE or RECOVER DATABASEcommand: using key

If you restore a an encrypted backup image to a different system with a centralized manager, simply configure the new system with the centralized manager: If you are using local management, you must take into account the security settings of the original and new key key key system.

Restoring encrypted backup images to the same system:

You can restore an encrypted database backup image to the same system with the RESTORE DATABASE command

## Procedure

To restore an encrypted database backup image to the same system:

Run the RESTORE DATABASE command:

db2 restore database &lt;database name&gt; ENCRLIB dbzencr.d11

Restoring an encrypted backup image to a different with a local key manager: system

If the systems have identical security requirements, you can restore an encrypted backup image by copying the local keystore from one system to another: Otherwise, you must use new master for the backup image and new system. key

## Procedure

The procedure depends the security protocol: on

- 1. Use a secure copy protocol such as SCP to copy the keystore and its associated stash file from System A to System B. An SCP is available with most secure shell (SSH) implementations.
- When the systems implement identical security requirements:

- Update the value of the keystore\_location database manager configuration parameter to to the copied keystore on System B. point
- name&gt; encrypt;
- 3. Restore the backup image on System B: dbz restore database &lt;database
- When the systems implement different security requirements:
- 1. Add new master to the keystore: key
- 2.
- Generate an encrypted backup on System A: dbz backup database &lt;database name&gt; encrypt encr]ib dbzencr.d11 encropts Master Label=&lt;]abel\_systemB\_admin&gt; Key
- 3. Send the secret file securely to the System B administrator: key
- 4 Have the System B administrator add the to the keystore on System B key
- 5. Have the System B administrator restore the backup image on System B Ensure that the target database is also encrypted by restoring the image into new database and specifying the ENCRYPT on the RESTORE DATABASE command: option
- db2 restore database &lt;database name&gt; encropts Master Label-&lt;systemB admin\_Tabel&gt;" encrypt cipher aes Jength\_in\_bitsz Key key zkey\_

Restoring an encrypted backup image to a different with a centralized key manager: system

If you are centralized manager; restore an encrypted backup image different system by configuring that system with the centralized manager; then running the RESTORE DATABASE command. using key on key

## Procedure

To restore an encrypted backup image from System to System B:

- 2. the keystore file which stores the SSL certificates securely to System B. Copy
- 1. the centralized keystore configuration file securely to System B. Copy
- 3. Configure System B with the centralized manager by updating the keystore\_ Jocation configuration parameter: Also the SSL\_KEYDB keyword in the centralized keystore configuration file to to where you copied the keystore file with the SSL certificates Update SSL\_KEYDB\_STASH as well if you have a stash file: key update point
- name&gt; encrypt;
- 4 Restore the backup image on System B: dbz restore database &lt;database

## Auditing DB2 activities

## Introduction to the Db2 audit facility

To manage access to your sensitive data, YOu can use variety of authentication and access control mechanisms to establish rules and controls for acceptable data access. But to against and discover unknown or unacceptable behaviors you can monitor data access by the Db2 audit facility protect using

Successful monitoring of unwanted data access and subsequent analysis can lead to improvements in the control of data access and the ultimate prevention of malicious or careless unauthorized access to data. The monitoring of application and individual user access, including system administration actions, can provide a historical record of activity on your database systems.

The Db2 audit facility generates, and allows to maintain, an audit trail for a series of predefined database events\_ The records generated from this facility are kept in an audit file: The analysis of these records can reveal usage patterns that would identify system misuse. Once identified, actions can be taken to reduce or eliminate such system misuse. you log

The audit facility provides the ability to audit at both the instance and the individual database level, independently recording all instance and database level activities with separate for each: The system administrator (who holds SYSADM authority) can use the dbzaudit tool to configure audit at the instance level as well as to control when such audit information is collected. The administrator can use the dbzaudit tool to archive both instance and database audit as well as to extract audit data from archived of either type. logs system logs logs

The security administrator (who holds SECADM authority within database) can use audit policies in conjunction with the SQL statement, AUDIT, to configure and control the audit requirements for an individual database: The security administrator can use the following audit routines to perform the specified tasks:

- The SYSPROCAUDIT\_ ARCHIVE stored procedure archives audit logs.
- The SYSPROC.AUDIT\_LIST\_LOGS table function allows you to locate logs of interest:
- The SYSPROCAUDIT\_ DELIM\_EXTRACT stored procedure extracts data into delimited files for analysis.

The security administrator can grant EXECUTE privilege on these routines to another user; therefore enabling the security administrator to delegate these tasks, if required.

When working in a partitioned database environment; many of the auditable events occur at the database partition at which the user is connected (the coordinator partition) or at the catalog partition (if are not the same database partition): The implication of this is that audit records can be generated by more than one database partition. Part of each audit record contains information identifying the coordinator partition and originating partition (the partition where audit record originated) they

At the instance level, the audit facility must be stopped and started explicitly by use of the dbzaudit start and dbzaudit stop commands\_ When you start instance-level auditing, the audit facility uses existing audit configuration information. Since the audit facility is independent of the Db2 database server; it will remain active even if the instance is stopped: In fact, when the instance is stopped, an audit record may be generated in the audit To start auditing at the database level, first you need to create an audit policy, then you associate this audit policy with the objects you want to monitor; such as, authorization database authorities, trusted contexts or particular tables: log: IDs,

## Categories of audit records

There are different categories of audit records that may be generated In the following description of the categories of events available for auditing, you should notice that following the name of each category is one-word keyword to identify the category type: The categories of events available for auditing are: used

- Audit (AUDIT): Generates records when audit settings are changed or when the audit is accessed. log

- Authorization Checking (CHECKING): Generates records authorization checking of attempts to access or manipulate Db2 database objects or functions. during
- Object Maintenance (OBJMAINT) Generates records when creating or dropping data objects, and when altering certain objects.
- Security Maintenance (SECMAINT) Generates records when:
- Granting or revoking security labels or exemptions
- Granting or revoking object privileges or database authorities
- Altering the group authorization, role authorization, Or override Or restrict attributes of an LBAC security policy
- Granting or revoking the SETSESSIONUSER privilege
- Modifying any of the SYSADM\_GROUP; SYSCTRL\_GROUP; SYSMAINT\_GROUP, or SYSMON\_GROUP configuration parameters
- System Administration (SYSADMIN): Generates records when operations requiring SYSADM, SYSMAINT, or SYSCTRL authority are performed.
- Operation Context (CONTEXT). Generates records to show the operation context when a database operation is performed. This category allows for better interpretation of the audit file: When used with the log's event correlator field, a group of events can be associated back to a single database operation: For example, a query statement for dynamic queries, a package identifier for static queries, or an indicator of the type of operation performed, such as CONNECT, can provide needed context when analyzing audit results. log being
- User Validation (VALIDATE). Generates records when authenticating users or retrieving system security information.

Note: The SQL or XQuery statement providing the operation context might be very long and is completely shown within the CONTEXT record. This can make the CONTEXT record very

- Execute (EXECUTE): Generates records the execution of SQL statements. during

For any of the categories listed previously, you can audit failures, successes, or both:

operations on the database server may generate several records. The actual number of records generated in the audit depends on the number of categories of events to be recorded as specified by the audit facility configuration: It also depends on whether successes, failures, or both, are audited: For this reason, it is important to be selective of the events to audit: Any log

## Audit policies

The security administrator can use audit policies to configure the audit facility to information only about the data and objects that are needed: gather

The security administrator can create audit policies to control what is audited within an individual database. The following objects can have an audit policy associated with them:

- The whole database
- All auditable events that occur within the database are audited according to the audit policy
- Tables

All data manipulation language (DML) and XQUERY access to the table (untyped) , MQT (materialized query table), or nickname is audited. Only

EXECUTE category audit events with or without data are generated when the table is accessed even if the policy indicates that other categories should be audited:

- Trusted contexts
- All auditable events that happen within trusted connection defined by the particular trusted context are audited according to the audit policy
- All auditable events that are initiated by the specified user are audited according to the audit policy
- Authorization IDs representing users, groups, Or roles
- All auditable events that are initiated by users that are a member of the group or role are audited according to the audit policy: Indirect role membership, such as through other roles or groups, is also included.
- Authorities (SYSADM, SECADM, DBADM, SQLADM, WLMADM, ACCESSCTRL, DATAACCESS, SYSCTRL, SYSMAINT, SYSMON)
- You can capture Similar data by the Work Load Management event monitors by defining a work load for group and capturing the activity details. You should be aware that the mapping to workloads can involve attributes in addition to just the authorization ID, which can cause you to not achieve the wanted granularity in auditing, or if those other attributes are modified, connections may map to different (possibly unmonitored) workloads The auditing solution provides guarantee that a user, group or role will be audited. using
- All auditable events that are initiated by a user that holds the specified authority even if that authority is unnecessary for the event, are audited according to the audit policy

The security administrator can create multiple audit policies: For example, your company might want a policy for auditing sensitive data and a policy for auditing the activity of users holding DBADM authority If multiple audit policies are in effect for a statement, all events required to be audited by each of the audit policies are audited (but audited only once) For example, if the database's audit policy requires auditing successful EXECUTE events for a particular table and the user's audit policy requires auditing failures of EXECUTE events for that same table, both successful and failed attempts at accessing that table are audited.

For a specific object, there can only be one audit policy in effect: For example, you cannot have multiple audit policies associated with the same table at the same time.

An audit policy cannot be associated with a view or a typed table. Views that access table that has an associated audit policy are audited according to the underlying table's policy

The audit policy that applies to a table does not automatically apply to a MQT based on that table: If you associate an audit policy with table, associate the same policy with any MQT based on that table:

Auditing performed a transaction is done based on the audit policies and their associations at the start of the transaction: For example, if the security administrator associates an audit policy with a user and that user is in a transaction at the time, the audit policy does not affect any remaining statements performed within that transaction: Also, changes to an audit policy do not take effect until are committed: If the security administrator issues an ALTER AUDIT POLICY statement, it does not take effect until the statement is committed: during they

The security administrator uses the CREATE AUDIT POLICY statement to create an audit policy, and the ALTER AUDIT POLICY statement to modify an audit policy: These statements can specify:

- The status values for events to be audited: None, Success, Failure, or Both: Only auditable events that match the specified status value are audited:
- The server behavior when errors occur auditing: during

The security administrator uses the AUDIT statement to associate an audit policy with the current database or with database object, at the current server: time the object is in use, it is audited according to this audit policy Any

To delete an audit policy, the security administrator uses the DROP statement\_ You cannot drop an audit policy if it is associated with any object Use the AUDIT REMOVE statement to remove any remaining association with an object: To add metadata to an audit policy, the security administrator uses the COMMENT statement

## Events generated before a full connection has been established

For some events generated during connect and a switch user operation, the only audit policy information available is the policy that is associated with the database: These events are shown in the following table:

Table 6. Connection events

| Event          | Audit category   | Comment                                                                                     |
|----------------|------------------|---------------------------------------------------------------------------------------------|
| CONNECT        | CONTEXT          |                                                                                             |
| CONNECT_RESET  | CONTEXT          |                                                                                             |
| AUTHENTICATION | VALIDATE         | This includes authentication during both connect and switch user within trusted connection. |
| CHECKING_FUNC  | CHECKING         | The access attempted is SWITCH_USER                                                         |

These events are audited based only on the audit policy associated with the database and not with audit policies associated with any other object such as user; their groups, or authorities. For the CONNECT and AUTHENTICATION events that occur connect, the instance-level audit settings are used until the database is activated. The database is activated either the first connection or when the ACTIVATE DATABASE command is issued. during during

## Effect of switching user

If a user is switched within a trusted connection, no remnants of the original user are left behind. In this case, the audit policies associated with the original user are no longer considered, and the applicable audit policies are re-evaluated according to the new user: audit policy associated with the trusted connection is still in effect: Any

If a SET SESSION USER statement is used, only the session authorization ID is switched. The audit policy of the authorization ID of the original user (the system authorization ID) remains in effect and the audit policy of the new user is used as well. If multiple SET SESSION USER statements are issued within a session, only the audit policies associated with the original user (the authorization ID) system

and the current user (the session authorization ID) are considered:

## Data definition language restrictions

The following data definition language (DDL) statements are called AUDIT exclusive SQL statements:

- AUDIT
- CREATE AUDIT POLICY, ALTER AUDIT POLICY, and DROP AUDIT POLICY
- DROP ROLE and DROP TRUSTED CONTEXT, if the role or trusted context dropped is associated with an audit policy being

AUDIT exclusive SQL statements have some restrictions in their use:

- Each statement must be followed by COMMIT or ROLLBACK
- These statements cannot be issued within a global transaction, for example an XA transaction:

Only one uncommitted AUDIT exclusive DDL statement is allowed at a time across all partitions. If an uncommitted AUDIT exclusive DDL statement is executing, subsequent AUDIT exclusive DDL statements wait until the current AUDIT exclusive DDL statement commits or rolls back:

Note: Changes are written to the catalog, but do not take effect COMMIT, even for the connection that issues the statement: until

## Example of auditing any access to a specific table

Consider a company where the EMPLOYEE table contains extremely sensitive information and the company wants to audit any and all SQL access to the data in that table: The EXECUTE category can be used to track all access to a table; it audits the SQL statement, and optionally the input data value provided at execution time for that statement:

There are two steps to track activity on the table First, the security administrator creates an audit policy that specifies the EXECUTE category, and then the security administrator associates that policy with the table:

CREATE AUDIT POLICY  SENSITIVEDATAPOLICY COMMIT

COMMIT

## Example of auditing any actions by SYSADM or DBADM

In order to complete their security compliance certification, a company must show that any and all activities within the database by those people holding system administration (SYSADM) or database administrative (DBADM) authority can be monitored:

To capture all actions within the database, both the EXECUTE and SYSADMIN categories should be audited: The security administrator creates an audit policy that audits these two categories The security administrator can use the AUDIT statement to associate this audit policy with the SYSADM and DBADM authorities. user that holds either SYSADM or DBADM authority will then have any auditable events logged. The following example shows to create such an audit policy and associate it with the SYSADM and DBADM authorities: Any how

CREATE AUDIT POLICY ADMINSPOLICY CATEGORIES EXECUTE STATUS BOTH, SYSADMIN STATUS BOTH ERROR TYPE AUDIT COMMIT AUDIT SYSADM, DBADM USING POLICY ADMINSPOLICY COMMIT

## Example of auditing any access by a specific role

A company has allowed its web applications access to their corporate database: The exact individuals using the applications are unknown: Only the role that is used is known and that role is used to manage the database authorizations. The company wants to monitor the actions of anyone who is member of that role in order to examine the requests are submitting to the database and to ensure that only access the database through the web applications web they they

The EXECUTE category contains the necessary level of auditing to track the activity of the users for this situation. The first is to create the appropriate audit policy and associate it with the roles that are used by the web applications (in this example, the roles are TELLER and CLERK): step

CREATE AUDIT POLICY WEBAPPPOLICY CATEGORIES EXECUTE WITH DATA

STATUS BOTH ERROR TYPE AUDIT

COMMIT

AUDIT ROLE TELLER, ROLE CLERK USING POLICY WEBAPPPOLICY COMMIT

## Example of enabling auditing for a database

A company wants to determine who is making DDL changes (example: ALTER TABLE) on the database named SAMPLE:

CONNECT  To SAMPLE

CREATE AUDIT POLICY ALTPOLICY CATEGORIES AUDIT StATUS BotH, OBJMAINT STATUS BOTH, CHECKING STATUS BOTH, EXECUTE STATUS BOTH, ERROR TYPE NORMAL

AUDIT DATABASE USING POLICY ALTPOLICY

## Storage and analysis of audit logs

Archiving the audit moves the active audit to an archive directory while the server begins writing to a new, active audit Later; you can extract data from the archived into delimited files and then load data from these files into Db2 database tables for analysis. log log log

Configuring the location of the audit logs allows you to place the audit on large, high-speed disk, with the of having separate disks for each member in multiple member database environment, such as a Db2 pureScale environment or partitioned database environment: In a multiple member database environment, the for the active audit log can be a directory that is unique to each member: Having a unique directory for each member helps to avoid file contention, because each member is writing to different disk logs option path

The default for the audit logs on Windows operating is instancelsecuritylauditdata and on Linux and UNIX operating systems is instance/security/auditdata. If you do not want to use the default location, you can choose different directories (you can create new directories on your system to use as alternative locations, if do not already exist). To set the for the path systems they path

active audit location and the archived audit location, use the dbzaudit configure command with the datapath and archivepath parameters, as shown in this example: log log configure datapath /auditlog archivepath /auditarchive

The audit storage locations you set using dbzaudit apply to all databases in the instance. log

Note: If there are multiple instances on the server; then each instance should each have separate data and archive

## The for active audit logs (datapath) in a multiple member database environment path

In multiple member database environment, the same active audit location (set by the datapath parameter) must be on each member: There are two ways to accomplish this: log used

- 1 Use database member expressions when you specify the datapath parameter Using database member expressions allows the member number to be included in the of the audit files and results in a different on each database member: log path path
- 2 Use a shared drive that is the same on all members.

You can use database member expressions anywhere within the value you specify for the datapath parameter: For example, on a three member system, where the database member number is 10, the following command:

dbzaudit configure datapath IpathForNode SN"

uses the following paths:

- IpathForMember1o
- IpathForMember2o
- IpathForMember3o

Note: You cannot use database member expressions to specify the archive file (archivepath parameter). log path

## Archiving active audit logs

The system administrator can use the dbzaudit tool to archive both instance and database audit as well as to extract audit data from archived of either type. logs logs

The security administrator; Or a user to whom the security administrator has granted EXECUTE privilege on the audit routines, can archive the active audit by running the SYSPROC\_ AUDIT\_ARCHIVE stored procedure: To extract data from the log and load it into delimited files, can use the SYSPROC.AUDIT\_DELIM\_EXTRACT stored procedure: log they

These are the steps to archive and extract the audit logs using the audit routines:

- 2 Determine which archived files are of interest: Use the SYSPROC.AUDIT\_LIST\_LOGS table function to list all of the archived audit log logs.
- 1\_ Schedule an application to perform regular archives of the active audit using the stored procedure SYSPROC.AUDIT\_ARCHIVE log

- 3\_ Pass the file name as parameter to the SYSPROC.AUDIT\_DELIM\_EXTRACT stored procedure to extract data from the and load it into delimited files. log
- 4 Load the audit data into Db2 database tables for analysis.

The archived log files do not need to be immediately loaded into tables for analysis; can be saved for future analysis. For example, may only need to be looked at when corporate audit is place: they they taking

If a problem occurs during archive, such as running out of disk space in the archive path, or the archive does not exist, the archive process fails and an interim file with the file extension bk is generated in the audit data After the problem is resolved (by allocating sufficient disk space in the archive or by creating the archive path) you must move this interim to the archive Then, you can treat it in the same way as a successfully archived path 1og log path, path, log path: log:

## Archiving active audit logs in a multiple member database environment

In multiple member database environment, if the archive command is issued while the instance is running, the archive process automatically runs on every member: The same timestamp is used in the archived file name on all members. For example, on three member system, where the database member number is 10, the following command: log

dbzaudit archive to /auditarchive

creates the following files:

- /auditarchive/dbzaudit.Iog.20.times tamp
- [auditarchive/dbzaudit.]og.30.timestamp

If the archive command is issued while the instance is not running, you can control on which member the archive is run by one of the following methods:

- Use the node with the dbzaudit command to perform the archive for the current member only: option
- Use the dbz command to run the archive on all members.

For example:

db2\_al1 dbzaudit archive node to /auditarchive

This sets the DBZNODE environment variable to indicate on which members the command is invoked.

Alternatively, you can issue an individual archive command on each member separately: For example:

- On member 10:

dbzaudit archive

node

10

to /auditarchive

- On member 20:

dbzaudit archive node 20 to /auditarchive

- On member 30: dbzaudit archive node 30 to /auditarchive

Note: When the instance is not running, the timestamps in the archived audit file names are not the same on each member: log

Note: It is recommended that the archive is shared across all members, but it is not required: path

Note: The AUDIT\_DELIM\_EXTRACT stored procedure and AUDIT\_LIST\_LOGS table function can only access the archived files that are visible from the current (coordinator) member: log

## Example of archiving a log and extracting data to a table

To ensure their audit data is captured and stored for future use, a company needs to create new audit every six hours and archive the current audit to a WORM drive. The company schedules the following call to the SYSPROCAUDIT\_ ARCHIVE stored procedure to be issued every Six hours by the security administrator; or by a user to whom the security administrator has granted EXECUTE privilege on the AUDIT\_ ARCHIVE stored procedure: The to the archived is the default archive path, /auditarchive, and the archive runs on all members: log log path log

CALL SYSPROC. AUDIT\_ARCHIVE( lauditarchive -2 )

As part of their security procedures, the company has identified and defined number of suspicious behaviors or disallowed activities that it needs to watch for in the audit data: want to extract all the data from the one or more audit place it in relational table, and then use SQL queries to look for these activities The company has decided on appropriate categories to audit and has associated the necessary audit policies with the database or other database objects. They logs,

For example, can call the SYSPROCAUDIT\_DELIM\_EXTRACT stored procedure to extract the archived audit for all categories from all members that were created with timestamp in April 2006, the default delimiter: they logs using

CALL SYSPROC.AUDIT\_DELIM\_EXTRACT (

/auditarchive dbzaudit.%.200604%

In another example, can call the SYSPROCAUDIT\_DELIM\_EXTRACT stored procedure to extract the archived audit records with success events from the EXECUTE category and failure events from the CHECKING category, from file with the timestamp are interested in: they they

CALL SYSPROC. AUDIT\_DELIM\_EXTRACT ( lauditarchive" dbzaudit.%.20060419034937 category execute status success checking status failure ) ;

## Audit file names:

The audit files have names that distinguish whether are instance-level or database-level and which member originate from in a multiple member database environment, such as a Db2 pureScale environment or partitioned database environment Archived audit have the timestamp of when the archive command was run appended to their file name: log they logs they logs

## Active audit file names log

In multiple member database environment, the for the active audit can be a directory that is unique to each member so that each member writes to an individual file: In order to accurately track the origin of audit records, the member number is included as part of the audit file name. For example,\_ on member 20, the instance level audit file name is dbzaudit. instance.Iog.20. For a database called testdb in this instance, the audit log file is dbzaudit.db.testdb.Iog.20. path log log log

In a single member database environment the member number is considered to be 0 (zero) In this case, the instance level audit file name is dbzaudit.instance.Iog.0. For a database called testdb in this instance, the audit file is dbzaudit.db.testdb.Iog.0. log log

## Archived audit file names log

When the active audit is archived, the current timestamp in the following format is appended to the filename: YYYYMMDDHHMMSS (where YYYY is the year; MM is the month, DD is the HH is the hour; MM is the minutes, and SS is the seconds\_ log day,

The file name format for archive audit log depends on the level of the audit log: an

## instance-level archived audit log

The file name of the instance-level archived audit log is: dbzaudit.instance.member . YYYYMMDDHHMMSS. 1og \_

## database-level archived audit log

The file name of the database-level archived audit log is: dbzaudit.dbdatabase. Iog.member. YYYYMMDDHHMMSS.

In a single member database environment, the value for member is 0 (zero)

The timestamp represents the time that the archive command was run, therefore it does not always precisely reflect the time of the last record in the The archived audit file may contain records with timestamps a few seconds later than the timestamp in the file name because: log: log log

- In multi-machine environment, the system time on a remote machine may not be synchronized with the machine where the archive command is issued:
- When the archive command is issued, the audit facility waits for the writing of any in-process records to complete before creating the archived file: log

In a multiple member database environment, if the server is running when archive is run, the timestamp is consistent across members and reflects the timestamp generated at the member at which the archive was performed.

## Creating tables to hold the Db2 audit data:

Before you can work with audit data in database tables, you need to create the tables to hold the data: You should consider creating these tables in a separate schema to isolate the data in the tables from unauthorized users\_

## Before you begin

- See the CREATE SCHEMA statement for the authorities and privileges that you require to create a schema\_
- See the CREATE TABLE statement for the authorities and privileges that you require to create table:
- Decide which table space you want to use to hold the tables. (This topic does not describe how to create table spaces )

Note: The format of the tables you need to create to hold the audit data might change from release to release: New columns might be added or the size of an existing column might change: The script, dbzaudit.ddl, creates tables of the correct format to contain the audit records.

## About this task

The examples that follow show how to create the tables to hold the records from the delimited files. If you want, you can create a separate schema to contain these

If you do not want to use all of the data that is contained in the files, you can omit columns from the table definitions, or bypass creating certain tables, as required. If you omit columns from the table definitions, you must modify the commands that you use to load data into these tables

## Procedure

- 1 Issue the dbz command to open a Db2 command window:
- 2. Optional: Create a schema to hold the tables. For this example, the schema is called AUDIT:
- 3 Optional: If you created the AUDIT schema, switch to the schema before creating any tables:
- SET CURRENT SCHEMA
- 4. Run the script, dbzaudit.ddl, to create the tables that will contain the audit records\_
- The script dbzaudit.dd1 is located in the sq]ib/misc directory (sq]liblmisc on Windows). The script assumes that a connection to the database exists and that an 8K table space is available. The command to run the script is: db2 +o -tf CHECKING , OBJMAINT, SECMAINT, SYSADMIN, VALIDATE, CONTEXT, and EXECUTE.
- 5\_ After you have created the tables, the security administrator can use the SYSPROCAUDIT\_DELIM\_EXTRACT stored procedure, or the system administrator can use the dbzaudit extract command, to extract the audit records from the archived audit files into delimited files. You can load the audit data from the delimited files into the database tables you just created: log

## Loading Db2 audit data into tables:

After you have archived and extracted the audit file into delimited files, and you have created the database tables to hold the audit data, you can load the audit data from the delimited files into the database tables for analysis. log\_

## About this task

You use the load utility to load the audit data into the tables. Issue a separate load command for each table: If you omitted one or more columns from the table definitions, you must modify the version of the LOAD command that you use to successfully load the data. Also, if you specified delimiter character other than the default when extracted the audit data, you must also modify the version of the LOAD command that you use you

## Procedure

- 1 , Issue the dbz command to open a Db2 command window:
- 2.
- To load the AUDIT table, issue the following command: LOAD  FROM audit.del

Note: Specify the DELPRIORITYCHAR modifier to ensure proper parsing of binary data.

Note: Specify the LOBSINFILE of the LOAD command (due to the restriction that any inline data for objects must be limited to 32K). In some situations, you might also need to use the LOBS FROM option large option.

Note: When specifying the file name, use the fully qualified name: For example, if you have the Db2 database system installed on the C: drive of a Windows operating system, you would specify C: |Program Files" IBM  SQLLIB instance securitylaudit.del as the fully qualified file name for the audit.del file: path

- 3 To load the CHECKING table, issue the following command: LOAD FROM checking.del OF   DEL MODIFIED BY DELPRIORITYCHAR LOBSINFILE INSERT INTO schema. CHECKING
- 4
- To load the OBJMAINT table, issue the following command: DEL MODIFIED BY DELPRIORITYCHAR LOBSINFILE INSERT INTO schema . OBJMAINT
- 5
- 6
- To load the SECMAINT table, issue the following command: LOAD FROM secmaint.del MODIFIED BY DELPRIORITYCHAR LOBSINFILE
- INSERT INTO schema . SECMAINT
- To load the SYSADMIN table, issue the following command: LOAD FROM sysadmin.del OF   DEL MODIFIED BY DELPRIORITYCHAR LOBSINFILE INSERT INTO schema. SYSADMIN
- 7 .
- To load the VALIDATE table, issue the following command: LOAD FROM val idate.del OF   DEL MODIFIED BY DELPRIORITYCHAR LOBSINFILE INSERT INTO schema. VALIDATE
- 8 To load the CONTEXT table, issue the following command: LOAD DELPRIORITYCHAR LOBSINFILE
- FROM context.del OF DEL MODIFIED BY INSERT INTO schema . CONTEXT
- 9 To load the EXECUTE table, issue the following command: LOAD FROM execute.del OF DEL MODIFIED BY DELPRIORITYCHAR LOBSINFILE INSERT INTO schema . EXECUTE
- 10. After you finish loading the data into the tables, delete the del files from the security/auditdata subdirectory of the sq]lib directory
- 11\_ When you have loaded the audit data into the tables, you are ready to select data from these tables for analysis.

## What to do next

If you have already populated the tables a first time, and want to do s0 again, use the INSERT to have the new table data added to the existing table data. If you want to have the records from the previous dbzaudit extract operation removed from the tables, load the tables again the REPLACE option. option using

## Audit archive and extract stored procedures:

The security administrator can use the SYSPROC.AUDIT ARCHIVE stored procedure and table function, the SYSPROCAUDIT\_DELIM\_EXTRACT stored procedure, and the SYSPROC.AUDIT\_LIST\_LOGS table function to archive audit and extract data to delimited files. logs

The security administrator can delegate use of these routines to another user by granting the user EXECUTE privilege on these routines. Only the security

administrator can grant EXECUTE privilege on these routines. EXECUTE privilege WITH GRANT OPTION cannot be granted for these routines (SQLSTATE 42501).

You must be connected to database in order to use these stored procedures and table functions to archive or list that database's audit logs.

If you copy the archived files to another database system, and you want to use the stored procedures and table functions to access them, ensure that the database name is the same, or rename the files to include the same database name

These stored procedures and table functions do not archive or list the instance level audit The system administrator must use the dbzaudit command to archive and extract the instance level audit log: log:

You can use these stored procedures and table functions to perform the following operations:

Table 7. Audit system stored procedures and table functions

| Stored procedure and table function   | Operation                                                                                 | Comments                                                                                                                                                                                                                                                    |
|---------------------------------------|-------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| AUDIT_ARCHIVE                         | Archives the current audit log:                                                           | Takes the archive as If the archive is not supplied, this stored procedure takes the archive the audit configuration file: The archive is run on each member; and synchronized timestamp is appended to the name of the audit file_ path path path from log |
| AUDIT_LIST_LOGS                       | Returns a list of the archived audit at the specified path, for the current database logs |                                                                                                                                                                                                                                                             |

Table 7. Audit stored procedures and table functions (continued) system

| Stored procedure and table function   | Operation                                                                      | Comments|
|---------------------------------------|--------------------------------------------------------------------------------||
| AUDIT DELIM_EXTRACT                   | Extracts data from the archived and loads it into delimited files: binary logs | The extracted audit records are placed in delimited format suitable for loading into Db2 placed in separate files, one for each category: In addition, the file auditlobs is created to hold any large objects that are included in the audit data. The file names are: audit:del objmaint.del secmaint:del sysadmin del validate.del context:del execute.del auditlobs If the files already exist, the output is appended to them; The auditlobs file is created if the CONTEXT or EXECUTE categories are extracted. Only archived audit for the current database can be extracted. Only files that are visible to the coordinator member are extracted. Only the instance owner can delete archived audit logs logs. |

## The EXECUTE category for auditing SQL statements

Use the EXECUTE category to accurately track the SQL statements that are issued by a user: In Version 9.5 and earlier releases, you had to use the CONTEXT category to find this information:

As of a comprehensive security policy, a company can require the ability to retroactively go back a set number of and analyze the effects of any particular request against certain tables in their database: To do this, a company must institute a policy of archiving their weekly backups and associated files such that can reconstitute the database for any chosen moment in time: Also required, is sufficient database audit information captured about every request made against the database to allow, at any future time, the replay and analysis of request against the relevant, restored database: This requirement can cover both static and dynamic SQL statements. part years log they any

This EXECUTE category captures the SQL statement text as well as the compilation environment and other values that are needed to replay the statement at a later date. For example, replaying the statement can show you exactly which rows a

SELECT statement returned. In order to re-run statement; the database tables must first be restored to their state when the statement was issued.

When you audit using the EXECUTE category, the statement text for both static and dynamic SQL is recorded, as are input parameter markers and host variables. You can configure the EXECUTE category to be audited with or without input values

Note: Global variables are not audited.

The auditing of EXECUTE events takes place at the completion of the event (for SELECT statements this is on cursor close). The status that the event completed with is also stored. Because EXECUTE events are audited at completion, long-running queries do not immediately appear in the audit log:

Note: The preparation of a statement is not considered part of the execution. Most authorization checks are performed at prepare time (for example, SELECT privilege). This means that statements that fail during prepare due to authorization errors do not generate EXECUTE events.

Statement Value Index, Statement Value Type and Statement Value Data fields may be repeated for given execute record. For the report format generated by the extraction, each record lists multiple values. For the delimited file format, multiple rows are used. The first row has an event type of STATEMENT and no values\_ Following rows have an event type of DATA, with one rOw for each data value associated with the SQL statement: You can use the event correlator and application ID fields to link STATEMENT and DATA rows together: The columns Statement Text, Statement Isolation Level, and Compilation Environment Description are not present in the DATA events\_

The statement text and input data values that are audited are converted into the database code page when are stored on disk (all audited fields are stored in the database code page) No error is returned if the code page of the input data is not compatible with the database code page; the unconverted data will be logged instead. Because each database has it's own audit databases different code pages does not cause a problem. they log' having

ROLLBACK and COMMIT are audited when executed by the application, and also when issued implicitly as of another command, such as BIND. part

After EXECUTE event has been audited due to access to audited table, all statements that affect which other statements are executed within a unit of work, are audited. These statements are COMMIT, ROLLBACK, ROLLBACK TO SAVEPOINT and SAVEPOINT: an an

## Savepoint ID field

You can use the Savepoint ID field to track which statements were affected by ROLLBACK TO SAVEPOINT statement: An ordinary DML statement (such as SELECT, INSERT, and so on) has the current savepoint ID audited. However; for the ROLLBACK TO SAVEPOINT statement, the savepoint ID that is rolled back to will be audited instead: Therefore, every statement with a savepoint ID greater than or equal to that ID will be rolled back, as demonstrated by the following The table shows the sequence of statements run; all events with a Savepoint ID than or equal to 2 will be rolled back Only the value of 3 (from the first INSERT statement) is inserted into the table T1. greater

Table 8. Sequence of statements to demonstrate effect of ROLLBACK TO SAVEPOINT statement

| Statement                 | Savepoint ID   |
|---------------------------|----------------|
| INSERT INTO Tl VALUES (3) |                |
| SAVEPOINT A               | 2              |
| INSERT INTO T1 VALUES (5  | 2              |
| SAVEPOINT B               | 3              |
| INSERT INTO T1 VALUES     | 3              |
| ROLLBACK TO SAVEPOINT A   | 2              |
| COMMIT                    |                |

## WITH DATA option

Not all input values are audited when you specify the WITH DATA LOB, LONG, XML and structured type parameters appear as NULL. option.

Date, time, and timestamp fields are recorded in ISO format:

If WITH DATA is specified in one policy, but WITHOUT DATA is specified in another policy associated with objects involved in the execution of the SQL statement, then WITH DATA takes precedence and data is audited for that particular statement; For example, if the audit policy associated with user specifies WITHOUT DATA, but the policy associated with a table specifies WITH DATA, when that user accesses that table, the input data used for the statement is audited:

You are not able to determine which rows were modified on positioned-update or positioned-delete statement: Only the execution of the underlying SELECT statement is logged, not the individual FETCH. It is not possible from the EXECUTE record to determine which row the cursor is on when the statement is issued. When replaying the statement at later time, it is only possible to issue the SELECT statement to see what range of rows may have been affected.

## Example of replaying past activities

Consider in this example that as part of their comprehensive security policy, a company requires that retain the ability to retroactively g0 back up to seven years to analyze the effects of any particular request certain tables in their database: To do this, institute a policy of archiving their weekly backups and associated files such that can reconstitute the database for any chosen moment in time: require that the database audit capture sufficient information about every request made against the database to allow the replay and analysis of any request against the relevant, restored database: This requirement covers both static and dynamic SQL statements\_ they against they log they They

This example shows the audit policy that must be in place at the time the SQL statement is issued, and the steps to archive the audit logs and later to extract and analyze them.

- 1\_ Create an audit policy that audits the EXECUTE category and apply this policy to the database:

```
CREATE AUDIT POLICY STATEMENTS CATEGORIES EXECUTE WITH DATA COMMIT COMMIT
```

- 2 Regularly archive the audit to create an archive copy log

The following statement should be run by the security administrator; or a user to whom grant EXECUTE privilege for the SYSPROCAUDIT\_ARCHIVE stored procedure, on a regular basis, for example, once week or once a depending on the amount of data logged. These archived files can be kept for whatever is required. The AUDIT ARCHIVE procedure is called with two input parameters: the to the archive directory and -2, to indicate that the archive should be run on all members: they day, period path

CALL SYSPROC . AUDIT\_ARCHIVE( -2

- 3\_ The security administrator, O a user to whom grant EXECUTE privilege for the SYSPROCAUDIT\_LIST\_LOGS table function, uses AUDIT\_LIST\_LOGS to examine all of the available audit logs from April 2006, to determine which may contain the necessary data: they logs
- 4 From this output, the security administrator observes that the necessary should be in one file: dbzaudit.dbname. Tog.20060419234937. The timestamp shows this file was archived at the end of the for the the auditors want to see\_ logs day day
- The security administrator; or user to whom EXECUTE privilege for the SYSPROCAUDIT\_ DELIM\_EXTRACT stored procedure, uses this filename as input to AUDIT\_DELIM\_EXTRACT to extract the audit data into delimited files. The audit data in these files can be loaded into Db2 database tables, where it can be analyzed to find the particular statement the auditors are interested in Even though the auditors are only interested in single SQL statement, multiple statements from the unit of work may need to be examined in case have any impact on the statement of interest: they grant they
- 5\_ In order to replay the statement; the security administrator must take the following actions:
- Determine the exact statement to be issued from the audit record.
- Determine the user who issued the statement from the audit record\_
- Re-create the exact permissions of the user at the time issued the statement, including any LBAC protection. they
- Reproduce the compilation environment; by using the compilation environment column in the audit record in combination with the SET COMPILATION ENVIRONMENT statement:
- Restore the database to its exact state at the time the statement was issued:

```
SELECT FILE FROM TABLE(SYSPROC . AUDIT_LIST_LOGS ( ' /auditarchive' ) ) AS WHERE FILE LIKE dbzaudit.dbname. Iog.0.200604% FILE dbzaudit.dbname_ 0.20060418235612 dbzaudit.dbname.Iog.0.20060419234937 dbzaudit.dbname. Iog.0.20060420235128
```

To avoid disturbing the production system, any restore of the database and replay of the statement should be done on second database system: The security administrator; running as the user who issued the statement, can reissue the statement as found in the statement text with any input variables that are provided in the statement value data elements.

## Enabling replay of past activities:

As part of a comprehensive security policy, a company can require the ability to retroactively go back a set number of years and analyze the effects of particular request against certain tables in their database any

## Before you begin

company must institute a policy of archiving their weekly backups and associated files such that can reconstitute the database for any chosen moment in time: log they

## About this task

To allow at any future time, the replay and analysis of any request against the relevant, restored database, sufficient database audit information must be captured about every request made against the database: This requirement can cover both static and dynamic SQL statements. The EXECUTE category, when logged WITH DATA contains the necessary information to replay past SQL statements, assuming that the data in the database is restored to the state it was when the statement was issued.

## Restrictions

The following authority and privileges are required:

- EXECUTE privilege is required for the audit routines and procedures.
- SECADM authority is required to create the audit policies,

## Procedure

To enable replay of past activities, as the SECADM:

- 1. Create an audit policy that audits the EXECUTE category and apply this policy to the database

CREATE AUDIT POLICY STATEMENTS CATEGORIES EXECUTE WITH DATA

STATUS BOTH ERROR TYPE

AUDIT

- COMMIT
- AUDIT DATABASE USING POLICY STATEMENTS
- COMMIT
- 2\_ Regularly archive the audit to create an archive copy: To archive the audit run the following command on regular basis, specifying the to the archive directory and -2 to indicate the archive should be run on all members: CALL SYSPROC. AUDIT\_ARCHIVE( lauditarchive -2 ) log path
- 3 Check that the audit files were created. These archived files will then be kept for the number of years specified by the company's business policy: To check the audit files run: log log
- SELECT FILE FROM SESSION.AUDIT ARCHIVE RESULTS

## Results

Your environment is now set up s0 data and information is archived to allow future replay of logged database activity

## Replaying past database activities:

Replaying past database activity is possible if all required data, and information is available: This reference topic shows how SECADM might replay past database activity via example: logs

## Description

At some point, company auditors might want to analyze the activities of a particular user that occurred in the past: The SECADM can use the backup database images, coupled with the backup and audit to reconstitute the database in question and replay the activity the auditors want to analyze: Suppose the activities of a particular user that occurred on April 19, 2006 are in question, the following example shows the flow of how SECADM would help the auditors carry out their analysis. logs, logs

## Example

- 1 The SECADM would issue the AUDIT\_LIST\_LOGS to find all available audit from April 2006. logs
- 2 From this output, the SECADM observes that the necessary should be in was taken at the end of the business on April 19, 2006. logs log day
- 3\_ This is as input to the SYSPROCAUDIT\_DELIM\_EXTRACT stored procedure: The arguments passed into the procedure are: used
- character delimiter (default),
- output path,
- to the archived audit path logs,
- the filename filter to determine what files are extracted from,
- the status for each category to be extracted, in this case the only category is EXECUTE.
- 4\_ The audit data is now in delimited files. The SECADM will load the audit data from the EXECUTE category into the AUDITDATA EXECUTE table The table can be created by executing the following:

```
SELECT FILE FROM TABLE(SYSPROC . AUDIT_LIST_LOGS ( ' /auditarchive' ) ) AS WHERE FILE LIKE dbzaudit.db.sample.log.0.200604% FILENAME dbzaudit.db.samp]e.Iog.0.20060418235612 dbzaudit.db.sample.Iog.0.20060419234937 dbzaudit.db.samp]e.Tog.0.20060420235128
```

```
CALL SYSPROC. AUDIT_DELIM_EXTRACT ( lauditarchive dbzaudit.db.samp]e.1og.0.20060419234937 category execute
```

db2 SET CURRENT   SCHEMA  AUDITDATA db2 -tvf sqllib/misc/dbzaudit.dd]

- 5. Next, load the data from execute del to the AUDITDATA EXECUTE table: The do this run the following command: dbz LOAD FROM FILE execute.del OF  DEL MODIFIED BY  LOBSINFILE INSERT
- 6\_ The SECADM now has all the audit data in the audit tables located within the AUDITDATA schema. This data can now be analyzed to find the particular statement the auditors are interested in\_

Note: Even though the auditors are only interested in single SQL statement, multiple statements from the unit of work may need to be examined in case have any impact on the statement of interest: they

- 7 . In order to replay the statement, the following actions must be taken:
- The exact statement issued must be determined from the audit record\_
- The user who issued the statement must be determined from the audit record \_
- The exact permissions of the user at the time issued the statement must be re-created, including any LBAC protection. they
- The compilation environment must be reproduced, by the compilation environment column in the audit record in combination with the SET COMPILATION ENVIRONMENT statement: using
- The exact state of the database at the time the statement was issued must be re-created:

Note: So as not to disturb the production system, any restore of the database and replay of the statement should be done on secondary database system.

- The SECADM would need to roll forward to the time the statement will start executing: The statement local start time (local\_start\_time) is of the EXECUTE audit record. the following EXECUTE audit record as an example: part Using

```
timestamp-2006-04-10-13.20.51.029203; category-EXECUTE; audit event-STATEMENT; event correlator=l; event status-0; database-SAMPLE; userid-smith; authid-SMITH; session authid-SMITH; app] ication id=*LOCAL.prodrig.060410172044; app] ication name-myapp; package schema-NULLID; package name-SQLCZFOA; package section-20l; uow id-2; activity id-3; statement invocation id-0; statement nesting statement text-SELECT FROM  DEPARTMENT WHERE DEPTNO AND DEPTNAME 2; statement isolation Ievel-CS; compilation environment= isolation query optimization-5 degree-1 sqlrules-DBZ schema=SMITH maintained table type-SYSTEM resolution timestamp-2006-04-10-13.20.51.000000 federated asynchrony-0; value index-0; value type-CHAR; value data-C01; value index-l; value type-VARCHAR; value index-INFORMATION CENTER; Ioca _start time-2006-04-10-13.20.51.021507;
```

The rollforward statement would look like this:

```
ROLLFORWARD DATABASE sample To 2006-04-10-13.20.51.021507 USING LOCAL TIME AND COMPLETE
```

- 9 The compilation environment needs to be set as well The compilation environment variable can be set by the SET COMPILATION ENVIRONMENT statement: The SECADM, running as the user who issued the statement, can now replay the statement as found in statement text with any input variables that are provided in the statement value data elements. Here is a sample program in C embedded SQL that will set the COMPILATION ENVIRONMENT and replay the SELECT statement the auditors want to analyze:

EXEC SQL INCLUDE SQLCA;

```
EXEC SQL BEGIN DECLARE SECTION; SQL TYPE IS BLOB(1M) hv_blob; EXEC SQL END DECLARE SECTION; EXEC SQL DECLARE cl FROM AUDITDATA.EXECUTE TIMESAMP= 2006-04-10-13.20.51.029203 EXEC SQL DECLARE c2 CURSOR FOR SELECT FROM  DEPARTMENT WHERE DEPTNO Co1" AND   DEPTNAME INFORMATION CENTER EXEC SQL OPEN cl; EXEC SQL FETCH cl Into hv_blob; EXEC SQL SET COMPILATION ENVIRONMENT :hv_blob; EXEC SQL OPEN c2; EXEC SQL CLOSE cl; EXEC SQL CLOSE c2;
```

## Audit facility management

## Audit facility behavior

This topic provides background information to help you understand how the of audit records to the can affect database performance; how to manage errors that occur within the audit facility; and how audit records are generated in different Situations timing writing log

## Controlling the timing of writing audit records to the active log

The writing of the audit records to the active can take place synchronously or asynchronously with the occurrence of the events causing the generation of those records. The value of the audit buf Sz database manager configuration parameter determines when the of audit records is done log writing

If the value of audit buf\_Sz is zero (0), the writing is done synchronously: The event generating the audit record waits until the record is written to disk The wait associated with each record causes the performance of the Db2 database to decrease:

If the value of audit buf\_Sz is greater than zero, the record writing is done asynchronously: The value of the audit\_buf\_ Sz when it is greater than zero is the number of 4 KB pages used to create an internal buffer: The internal buffer is used to number of audit records before writing a group of them out to disk The keep

statement generating the audit record as a result of an audit event will not wait until the record is written to disk, and can continue its operation.

In the asynchronous case, it could be possible for audit records to remain in an unfilled buffer for some time. To prevent this from happening for an extended period, the database manager forces the writing of the audit records regularly An authorized user of the audit facility can also flush the audit buffer with an explicit request: Also, the buffers are automatically flushed an archive operation. during

There are differences when an error occurs dependent on whether there is synchronous or asynchronous record writing: In asynchronous mode, there might be some records lost because the audit records are buffered before written to disk. In synchronous mode, there might be one record lost because the error could only prevent at most one audit record from written\_ being being

## Managing audit facility errors

The setting of the ERRORTYPE audit facility parameter controls how errors are managed between the Db2 database and the audit facility When the audit facility is active, and the of the ERRORTYPE audit parameter is AUDIT, then the audit facility is treated in the same way as any other part of Db2 database: An audit record must be written (to disk in synchronous mode; Or to the audit buffer in asynchronous mode) for an audit event associated with a statement to be considered successful. Whenever an error is encountered when running in this mode, negative SQLCODE is returned to the application for the statement generating an audit record system facility setting

If the error type is set to NORMAL, then any error from dbzaudit is ignored and the operation's SQLCODE is returned:

## Audit records generated in different situations

Depending on the API or query statement and the audit none, one, or several audit records might be generated for a particular event For example, an SQL UPDATE statement with a SELECT subquery might result in one audit record containing the results of the authorization check for UPDATE privilege on table and another record containing the results of the authorization check for SELECT privilege on table. settings, dynamic data manipulation language (DML) statements, audit records are generated for all authorization checking at the time that the statement is prepared. Reuse of those statements by the same user will not be audited again since no authorization checking takes place at that time. However; if a change was made to one of the catalog tables containing privilege information, then in the next unit of work, the statement privileges for the cached dynamic SQL or XQuery statements are checked again and one or more new audit records created For

For a package containing only static DML statements, the only auditable event that could generate an audit record is the authorization check to see if a user has the privilege to execute that package The authorization checking and possible audit record creation required for the static SQL or XQuery statements in the package is carried out at the time the package is precompiled or bound. The execution of the static SQL or XQuery statements within the package is auditable using the EXECUTE category When a package is bound either explicitly by the user; or implicitly by the system, audit records are generated for the authorization again

For statements where authorization checking is performed at statement execution time (for example, data definition language (DDL), GRANT, and REVOKE statements) , audit records are generated whenever these statements are used.

Note: When executing DDL, the section number recorded for all events (except the context events) in the audit record will be zero (0) no matter what the actual section number of the statement might have been:

## Audit facility tips and techniques

Best practices for managing your audit include regularly archiving the audit the error type AUDIT when create an audit policy, and other tips as described here. using you

## Archiving the audit log

You should archive the audit on a regular basis. Archiving the audit moves the current audit to an archive directory while the server begins writing to a new, active audit The name of each archived file includes a timestamp that helps you identify files of interest for later analysis. log log 1og log: log log

For long-term storage, you might want to compress groups of archived files.

For archived audit that you are no longer interested in, the instance owner can simply delete the files from the operating logs. system.

## Error handling

When you create an audit policy, you should use the error type AUDIT, unless you are just creating a test audit policy For example, if the error type is set to AUDIT; and an error occurs, such as running out of disk space, then an error is returned: The error condition must be corrected before any more auditable actions can continue. However; if the error type was set to NORMAL, the logging would simply fail and no error is returned to the user: Operation continues as if the error did not happen:

If a problem occurs archive, such as running out of disk space in the archive path, or the archive does not exist, the archive process fails and an interim file with the file extension bk is generated in the audit data for example, db2audit.instance. 0.20070508172043640941.bk. After the problem is resolved (by allocating sufficient disk space in the archive path, or by creating the archive path) you must move this interim to the archive Then, you can treat it in the same way as a successfully archived during path 1og log path, log log:

## DDL statement restrictions

Some data definition language (DDL) statements, called AUDIT exclusive SQL statements, do not take effect until the next unit of work. Therefore, you are advised to use a COMMIT statement immediately after each of these statements.

The AUDIT exclusive SQL statements are:

- AUDIT
- CREATE AUDIT POLICY, ALTER AUDIT POLICY, and DROP AUDIT POLICY
- DROP ROLE and DROP TRUSTED CONTEXT, if the role or trusted context dropped is associated with an audit policy being

## Table format for holding archived data might change

The security administrator can use the SYSPROC.AUDIT\_DEL\_EXTRACT stored procedure, or the system administrator can use the dbzaudit extract command, to extract audit records from the archived audit files into delimited files. You can load the audit data from the delimited files into Db2 database tables for analysis. The format of the tables you need to create to hold the audit data might change from release to release\_

Important: The script, dbzaudit.ddl, creates tables of the correct format to contain the audit records. You should expect to run dbzaudit.dd] for each release, as columns might be added or the size of an existing column might change:

## Using CHECKING events

In most cases, when working with CHECKING events, the object type field in the audit record is the object checked to see if the required privilege or authority is held by the user ID attempting to access the object: For example, if a user attempts to ALTER a table by adding a column, then the CHECKING event audit record indicates the access attempted was ALTER" and the object type checked was "TABLE" (not the column, because it is table privileges that are checked): being being

However; when the checking involves verifying if a database authority exists to allow a user ID to CREATE or BIND an object, or to DROP an object, then although there is a check against the database, the object type field will specify the object created, bound, or dropped (rather than the database itself) being

When creating an index on table, the privilege to create an index is required, therefore the CHECKING event audit record has an access attempt type of 'index" rather than create'

## Audit records created for binding a package

When binding a package that already exists, then an OBJMAINT event audit record is created for the DROP of the package and then another OBJMAINT event audit record is created for the CREATE of the new copy of the package:

## Using CONTEXT event information after ROLLBACK

Data Definition Language (DDL) might generate OBJMAINT or SECMAINT events that are logged as successful. It is possible however that following the logging of the event, subsequent error might cause the object as not created; or the GRANT or REVOKE actions as incomplete. The use of CONTEXT events becomes important in this case. Such CONTEXT event audit records, especially the statement that ends the event, indicates the nature of the completion of the attempted operation:

## The load delimiter

When extracting audit records in a delimited format suitable for loading into a Db2 database table, you should be clear regarding the delimiter used within the statement text field. This can be done when extracting the delimited file, dbzaudit extract delasc del imiter load delimiter using:

The load delimiter can be a single character (such as ) or four-byte string representing a hexadecimal value (such as "Ox3b"). Examples of valid commands are:

dbzaudit extract delasc dbzaudit extract delasc del imiter dbzaudit extract delasc del imiter Ox3b

If you have used anything other than the default load delimiter as the delimiter when extracting, you should use the MODIFIED BY on the LOAD command. A partial example of the LOAD command with "Ox3b" used as the delimiter follows: Ioad from context.del of del modified by charde]Ox3b replace into option

This overrides the default load character string delimiter which is (double quote).

## Security model for the dbzcluster command

The dbzcluster command is the main interface into Db2 cluster services, and as such acts on both the cluster manager and shared file system cluster provided for the IBM Db2 pureScale Feature: The dbzcluster command options that are available to a user depend on the user's authority

In terms of the security model for the dbzcluster command, there are three user groups, broken down by the type of tasks each user group is likely to perform:

information about the Db2 pureScale instance, but not to make any changes.

- Anyone with a userid on the system Users in this group are able to use the dbzcluster command to report
- The SYSADM, SYSCTL or SYSMAINT group

Users in this group are able to use the dbzcluster command to keep the instance up and running, and to perform some administrative tasks on the cluster manager: By definition, a user in this group is either the userid of the instance, a member of the primary group of the instance owner; or a member of non-primary group of the instance owner: Db2 recommends that normal to activities are performed userid with membership in a non-primary group of the instance owner day day using

- The Db2 cluster services administrator

Users in this group have no requirements to access data in the database; this is an administrative role used for:

- installation and configuration of the Db2 cluster services portion of Db2
- maintaining clustered instances in the cluster domain and maintaining the shared file system cluster

The Db2 cluster services administrator role is an end user with access to root-owned userid for the operating system; for example, an operating administrator: Db2 cluster services can affect all clustered environments, whether you are the Db2 pureScale Feature or partitioned database environment with integrated HA. Therefore, roles such as DBADM, SECADM, SQLADM, WLMADM, EXPLAIN, ACCESSCTRL, and DATAACCESS that act on databases, do not provide the appropriate level of authority for cluster management The Db2 cluster services administrator can be the same person as someone with a userid in the SYSADM, SYSCTL or SYSMAINT groups. system using

Note: Just because a user has SYSADM privileges, it does not necessarily mean the user has operating system administration privileges.

## Cluster manager tasks for dbzcluster

- Anyone with a userid on the system can retrieve information about the current state of the cluster domain using the -list and -verify options
- The Db2 cluster services administrator can perform administrative tasks that affect Db2 cluster services as whole across all clustered instances on all hosts in the cluster domain. This user can perform configuration tasks such as setting the tiebreaker device and the host failure detection time, the -set As well, the Db2 cluster services administrator can perform maintenance-related tasks, such as putting hosts into maintenance mode, using the -enter option, Or committing changes or updates to the cluster manager; the -commit This user can also perform advanced maintenance operations on the cluster manager peer domain, such as creating, deleting, starting, or stopping the domain, and or removing hosts; however; it is strongly recommended that these tasks be performed only under the advisement of Db2 service personnel. Certain DB2 cluster administrative commands require DBZINSTANCE environment variable to be using option. using option. adding set.
- Users in the SYSADM, SYSMAINT or SYSCTL group can query and change the preferred primary cluster caching facility the -Tist and ~set options As well, these users can use the -clear -alert option to clear alerts for any of the hosts, members, and cluster caching facilities in the current instance (as defined by the DBZINSTANCE registry variable): Users in this group can also create and delete cluster resources, and repair the cluster manager resource model; however; it is strongly recommended that these tasks be performed only under the advisement of Db2 service personnel: using

## Shared file system tasks for dbzcluster

- Anyone with a userid on the system can retrieve information about the current state of the cluster domain also perform wide variety of file system operations with the dbzcluster command options, but what can do is constrained by file system permissions. As as the userid running the command has read and write ownership of the device being used, that user can create file systems and add disks. Once a file system has been created or mounted, access to that file system is limited to the userid that created it and to the Db2 cluster services administrator; S0 only those users can remove, delete, or rebalance a file Either the userid that created it, or the Db2 cluster services administrator can create directories that are accessible to other users, much as with normal file using regular they long system. system.
- The Db2 cluster services administrator can perform administrative tasks that affect Db2 cluster services as whole across all clustered instances on all hosts in the cluster domain: This user can perform change for the tiebreaker device, the -set well, the Db2 cluster services administrator can perform maintenance-related tasks, such as putting hosts into maintenance mode, using the -enter option, or committing changes or updates to the shared file system, the -commit This user can also perform advanced maintenance operations on the shared file system cluster, such as creating, deleting, starting, or stopping the domain, and or removing hosts; however; it is strongly recommended that these tasks be performed only under the advisement of Db2 service personnel: options As using option. using option. adding

## Chapter 2. Roles

Roles simplify the administration and management of privileges by offering an equivalent capability as groups but without the same restrictions:

A role is a database object that groups together one or more privileges and can be assigned to users, groups, PUBLIC, or other roles using a GRANT statement, or can be assigned to a trusted context by a CREATE TRUSTED CONTEXT or ALTER TRUSTED CONTEXT statement: A role can be specified for the SESSION\_USER ROLE connection attribute in workload definition: by using

Roles provide several advantages that make it easier to manage privileges in database system:

- Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations)
- Users are granted membership in the roles that reflect their job responsibilities. As their job responsibilities change, their membership in roles can be easily granted and revoked.
- The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then that role to each user in that job function: grant
- A role's privileges can be updated and all users who have been granted that role receive the update; the administrator does not need to the privileges for every user on an individual basis. update
- The privileges and authorities granted to roles are always when you create views, triggers, materialized query tables (MQTs), static SQL and SQL routines, whereas privileges and authorities granted to groups (directly or indirectly) are not used. used
- This is because the Db2 database system cannot determine when membership in a group changes, as the group is managed by third-party software (for example, the operating or an LDAP directory): Because roles are managed inside the database, the Db2 database system can determine when authorization changes and act accordingly Roles granted to groups are not considered, due to the same reason groups are not considered. system
- All the roles assigned to user are enabled when that user establishes a connection, so all privileges and authorities granted to roles are taken into account when user connects\_ Roles cannot be explicitly enabled or disabled:
- The security administrator can delegate management of a role to others\_

All Db2 privileges and authorities that can be granted within database can be example, a role can be granted any of the following authorities and privileges:

- DBADM, SECADM, DATAACCESS, ACCESSCTRL, SQLADM, WLMADM, LOAD, and IMPLICIT\_SCHEMA database authorities
- CONNECT, CREATETAB, CREATE\_NOT\_FENCED, BINDADD, CREATE\_EXTERNAL\_ROUTINE, or QUIESCE\_CONNECT database authorities
- database object privilege (including CONTROL) Any

user's roles are automatically enabled and considered for authorization when a user connects to a database; you do not need to activate a role by the SET ROLE statement: For example, when you create a view, a materialized query table (MQT), a trigger; a package, or an SQL routine, the privileges that you through roles apply: However; privileges that you through roles granted to groups of which you are member do not apply using gain gain

A role does not have an owner: The security administrator can use the WITH ADMIN OPTION clause of the GRANT statement to delegate management of the role to another user; so that the other user can control the role membership.

## Restrictions

There are few restrictions in the use of roles:

- A role cannot own database objects.
- Permissions and roles granted to groups are not considered when you create the following database objects:
- Packages containing static SQL
- Views
- Materialized query tables (MQT)
- Triggers
- SQL Routines

Only roles granted to the user creating the object or to PUBLIC, directly o indirectly (such as through role hierarchy), are considered when creating these objects.

## Creating and granting membership in roles

The security administrator holds the authority to create, grant, revoke, and comment on role: The security administrator uses the GRANT (Role) statement to grant membership in role to an authorization ID and uses the REVOKE (Role) statement to revoke membership in a role from an authorization ID. drop, \_

The security administrator can delegate the management of membership in a role to an authorization ID by granting the authorization ID membership in the role with the WITH ADMIN OPTION. The WITH ADMIN OPTION clause of the GRANT (Role) statement gives another user the ability to:

- Grant roles to others.
- Revoke roles from others:
- Comment on the role:

The WITH ADMIN OPTION clause does not give the ability to:

- the role. Drop
- Revoke the WITH ADMIN OPTION for a role from an authorization ID.
- Grant WITH ADMIN OPTION to someone else (if you do not hold SECADM authority).

After the security administrator has created a role, the database administrator can use the GRANT statement to assign authorities and privileges to the role: All Db2 privileges and authorities that can be granted within a database can be granted to role: Instance level authorities, such as SYSADM authority, cannot be assigned to role

The security administrator; or any user who the security administrator has granted membership in a role with WITH ADMIN OPTION can use the GRANT (Role) statement to grant membership in that role to other users, groups, PUBLIC o roles. A user may have been granted membership in role with WITH ADMIN OPTION either directly, or indirectly through PUBLIC, a group or role:

All the roles assigned to user are enabled when that user establishes a session: All the privileges and authorities associated with a user's roles are taken into account when the Db2 database system checks for authorization. Some database systems use the SET ROLE statement to activate a particular role: The Db2 database system supports SET ROLE to provide compatibility with other products using the SET ROLE statement: In Db2 database system, the SET ROLE statement checks whether the session user is a member of the role and returns an error if they

To revoke a user S membership in a role, the security administrator; Or a user who holds WITH ADMIN OPTION privilege on the role, uses the REVOKE (Role) statement:

## Example

role has a certain set of privileges and a user who is granted membership in this role inherits those privileges. This inheritance of privileges eliminates managing individual privileges when reassigning the privileges of one user to another user: The only operations required when roles is to revoke membership in the role from one user and grant membership in the role to the other user: using

For example, the employees BOB and ALICE, working\_in department DEV, have the privilege to SELECT on the tables SERVER, CLIENT and TOOLS: One management decides to move them to a new department, QA, and the database administrator has to revoke their privilege to select on tables SERVER, CLIENT and TOOLS. Department DEV later hires a new employee, TOM, and the database administrator has to SELECT privilege on tables SERVER, CLIENT and TOOLS to TOM day, grant

When using roles, the following steps occur:

- 1 The security administrator creates a role, DEVELOPER: CREATE ROLE DEVELOPER
- 2. The database administrator (who holds DBADM authority) grants SELECT on tables SERVER, CLIENT, and TOOLS to role DEVELOPER:
- 3 The security administrator the role DEVELOPER to the users in department DEV, BOB and ALICE: grants
- GRANT ROLE DEVELOPER TO USER BOB, USER ALICE
- 4. When BOB and ALICE leave department DEV, the security administrator revokes the role DEVELOPER from users BOB and ALICE:
- REVOKE ROLE DEVELOPER FROM USER BOB, USER ALICE
- 5\_ When TOM is hired in department DEV; the security administrator grants the role DEVELOPER to user TOM:

GRANT SELECT ON TABLE SERVER TO ROLE DEVELOPER

GRANT SELECT ON TABLE CLIENT TO ROLE DEVELOPER

GRANT SELECT ON TABLE TOOLS TO ROLE DEVELOPER

GRANT ROLE DEVELOPER TO USER TOM

## Role hierarchies

role hierarchy is formed when one role is granted membership in another role:

role contains another role when the other role is granted to the first role: The other role inherits all of the privileges of the first role For example, if the role DOCTOR is granted to the role SURGEON, then SURGEON is said to contain DOCTOR The role SURGEON inherits all the privileges of role DOCTOR

Cycles in role hierarchies are not allowed: A occurs if a role is granted in circular way such that one role is granted to another role and that other role is granted to the original role: For example, the role DOCTOR is granted to role SURGEON, and then the role SURGEON is granted back to the role DOCTOR If you create in a role hierarchy, an error is returned (SQLSTATE 428GF): cycle cycle

## Example of building a role hierarchy

The following example shows how to build a role hierarchy to represent the medical levels in a hospital.

Consider the following roles: DOCTOR, SPECIALIST, and SURGEON: A role hierarchy is built by granting role to another role, but without creating The role DOCTOR is granted to role SPECIALIST, and role SPECIALIST is granted to role SURGEON. cycles.

Granting role SURGEON to role DOCTOR would create and is not allowed. cycle

The security administrator runs the following SQL statements to build the role hierarchy:

CREATE ROLE DOCTOR CREATE ROLE SPECIALIST CREATE ROLE SURGEON

GRANT ROLE DOCTOR

## Effect of revoking privileges from roles

When privileges are revoked, this can sometimes cause dependent database objects, such as views, packages or triggers, to become invalid or inoperative

The following examples show what happens to a database object when some privileges are revoked from an authorization identifier and privileges are held through a role or through different means

## Example of revoking privileges from roles

- 1. The security administrator creates the role DEVELOPER and grants the user BOB membership in this role:

CREATE ROLE DEVELOPER GRANT ROLE DEVELOPER TO USER BOB

- 2 User ALICE creates a table, WORKITEM:

CREATE TABLE WORKITEM (x int)

- 3. The database administrator grants SELECT and INSERT privileges on table WORKITEM to PUBLIC and also to the role DEVELOPER:

GRANT  SELECT ON TABLE ALICE.WORKITEM TO PUBLIC GRANT INSERT ON TABLE ALICE.WORKITEM TO PUBLIC GRANT  SELECT ON TABLE ALICE.WORKITEM TO ROLE DEVELOPER

GRANT   INSERT ON  TABLE ALICE.WORKITEM TO ROLE DEVELOPER

- 4\_ User BOB creates view, PROJECT, that uses the table WORKITEM, and a package, PKG1, that depends on the table WORKITEM: CREATE VIEW PROJECT AS SELECT FROM ALICE.WORKITEM PREP emboo1.sqc BINDFILE PACKAGE USING VERSION 1
- 5. If the database administrator revokes SELECT privilege on table ALICE.WORKITEM from PUBLIC, then the view BOB.PROJECT remains operative and package PKGL remains valid because the view definer; BOB, still holds the privileges required through his membership in the role DEVELOPER: REVOKE SELECT ON TABLE ALICE.WORKITEM FROM PUBLIC
- 6\_ If the database administrator revokes SELECT privilege on table ALICEWORKITEM from the role DEVELOPER, the view BOB.PROJECT becomes inoperative and package PKGI becomes invalid because the view and package definer; BOB, does not hold the required privileges through other means:

REVOKE SELECT ON TABLE ALICE. WORKITEM FROM ROLE DEVELOPER

## Example of revoking DBADM authority

In this example, the role DEVELOPER holds DBADM authority and is granted to user BOB.

- 1\_ The security administrator creates the role DEVELOPER: CREATE ROLE DEVELOPER
- 2 The system administrator grants DBADM authority to the role DEVELOPER: GRANT DBADM ON  DATABASE To ROLE DEVELOPER
- 3\_ The security administrator grants user BOB membership in this role: GRANT ROLE DEVELOPER TO USER BOB
- 4\_ User ALICE creates table, WORKITEM: CREATE TABLE WORKITEM (x int)
- 5. User BOB creates view PROJECT that uses table WORKITEM, a package PKGI that depends on table WORKITEM, and trigger; TRG1, that also depends on table WORKITEM:

CREATE VIEW PROJECT AS SELECT FROM ALICE.WORKITEM BINDFILE PACKAGE USING PKG1 VERSION AFTER DELETE ON ALICE. WORKITEM FOR EACH STATEMENT MODE DBZSQL INSERT INTO ALICE. WORKITEM VALUES (1)

- 6.
- The security administrator revokes the role DEVELOPER from user BOB:

REVOKE ROLE DEVELOPER FROM USER BOB

Revoking the role DEVELOPER causes the user BOB to lose DBADM authority because the role that held that authority was revoked. The view, package, and trigger are affected as follows:

- View BOB. PROJECT is still valid.
- Package PKGL becomes invalid:
- Trigger BOB.TRGI is still valid.

View BOBPROJECT and trigger BOB.TRGI are usable while package PKGI is not usable: View and trigger objects created by an authorization ID holding DBADM authority are not affected when DBADM authority is lost:

## Delegating role maintenance by using the WITH ADMIN OPTION clause

Using the WITH ADMIN OPTION clause of the GRANT (Role) SQL statement, the security administrator can delegate the management and control of membership in role to someone else.

The WITH ADMIN OPTION clause gives another user the authority to grant membership in the role to other users, to revoke membership in the role from other members of the role, and to comment on a role, but not to the role\_ drop

The WITH ADMIN OPTION clause does not give another user the authority to grant WITH ADMIN OPTION on a role to another user: It also does not give the authority to revoke WITH ADMIN OPTION for role from another authorization ID.

## Example demonstrating use of the WITH ADMIN OPTION clause

- 1. A security administrator creates the role, DEVELOPER, and grants the new role to user BOB the WITH ADMIN OPTION clause: CREATE ROLE DEVELOPER GRANT ROLE DEVELOPER TO USER BOB WITH ADMIN OPTION using
- 2.
- User BOB can grant membership in the role to and revoke membership from the role from other users, for example, ALICE: GRANT ROLE DEVELOPER TO USER ALICE REVOKE ROLE DEVELOPER FROM USER ALICE
- 3\_ User BOB cannot drop the role or grant WITH ADMIN OPTION to another user (only security administrator can perform these operations). These commands issued by BOB will fail: two

DROP ROLE DEVELOPER FAILURE!

only security administrator is a] lowed to the role GRANT ROLE DEVELOPER TO USER ALICE WITH ADMIN OPTION FAILURE! only security administrator can grant WITH ADMIN OPTION drop

- 4 User BOB cannot revoke role administration privileges (conferred by WITH ADMIN OPTION) from users for role DEVELOPER, because he does not have security administrator (SECADM) authority: When BOB issues the following command, it fails:

REVOKE ADMIN OPTION FOR ROLE DEVELOPER FROM USER SANJAY FAILURE!

- 5\_ A security administrator is allowed to revoke the role administration privileges for role DEVELOPER (conferred by WITH ADMIN OPTION) from user BOB and user BOB still has the role DEVELOPER granted:

REVOKE ADMIN OPTION FOR ROLE DEVELOPER FROM USER BOB

Alternatively, if security administrator simply revokes the role DEVELOPER from user BOB, then BOB loses all the privileges he received by being a member of the role DEVELOPER and the authority on the role he received through the WITH ADMIN OPTION clause:

FROM USER BOB

## Roles compared to groups

Privileges and authorities granted to groups are not considered when creating views, materialized query tables (MQTs), SQL routines, triggers, and packages containing static SQL. Avoid this restriction by roles instead of groups. using

Roles allow users to create database objects their privileges acquired through roles, which are controlled by the Db2 database system. Groups and users are controlled externally from the Db2 database system, for example, by an operating system or an LDAP server: using

## Example of replacing the use of groups with roles

This example shows how you can replace groups by roles. using

Assume that there are three groups, DEVELOPER\_G, TESTER\_G and SALES\_G. The users BOB, ALICE, and TOM are members of these groups, as shown in the following table:

Table 9. Example groups and users

| Group       | Users belonging to this group   |
|-------------|---------------------------------|
| DEVELOPER_G | BOB                             |
| TESTER_G    | ALICE , TOM                     |
| SALES_G     | ALICE , BOB                     |

- 1. The security administrator creates the roles DEVELOPER, TESTER, and SALES to be used instead of the groups.
- 2 The security administrator membership in these roles to users (setting the membership of users in groups was the responsibility of the system administrator): grants
- 3\_ The database administrator can grant to the roles similar privileges or authorities as were held by the groups, for example: GRANT privilege ON object TO ROLE DEVELOPER

CREATE ROLE DEVELOPER

CREATE ROLE TESTER

CREATE ROLE SALES

GRANT ROLE DEVELOPER TO USER BOB

GRANT ROLE TESTER TO USER ALICE, USER TOM

GRANT ROLE SALES TO USER BOB, USER ALICE

The database administrator can then revoke these privileges from the groups, as well as ask the system administrator to remove the groups from the system.

## Example of creating a trigger using privileges acquired through a role

This example shows that user BOB can successfully create a trigger; TRG1, when he holds the necessary privilege through the role DEVELOPER

- 1 First, user ALICE creates the table, WORKITEM: CREATE TABLE WORKITEM (x int)
- 2. Then, the privilege to alter ALICE's table is granted to role DEVELOPER by the database administrator:
- GRANT ALTER ON ALICE. WORKITEM TO ROLE DEVELOPER
- 3\_ User BOB successfully creates the trigger; TRGL, because he is a member of the role, DEVELOPER
- AFTER DELETE ON ALICE. WORKITEM

FOR EACH STATEMENT MODE DBZSQL  INSERT INTO ALICE.WORKITEM VALUES (1)

## Notes

- Roles that are granted to groups are not considered.

## Using roles after migrating from IBM Informix Dynamic Server

If you have migrated from IBM Informix Dynamic Server to the Db2 database system and are roles there are a few things you need to be aware of. using

The Informix Dynamic Server (IDS) SQL statement, GRANT ROLE, provides the clause WITH GRANT OPTION. The Db2 database system GRANT ROLE statement provides the clause WITH ADMIN OPTION (this conforms to the SQL standard) that provides the same functionality: During an IDS to Db2 database system migration, after the dbschema tool generates CREATE ROLE and GRANT ROLE statements, the dbschema tool replaces any occurrences of WITH GRANT OPTION with WITH ADMIN OPTION.

In an IDS database system, the SET ROLE statement activates a particular role: The Db2 database system supports the SET ROLE statement; but only to provide compatibility with other products that SQL statement: The SET ROLE statement checks whether the session user is member of the role and returns an error if are not using they

## Example dbschema output

Assume that an IDS database contains the roles DEVELOPER, TESTER and SALES: Users BOB, ALICE, and TOM have different roles granted to each of them; the role DEVELOPER is granted to BOB, the role TESTER granted to ALICE, and the roles TESTER and SALES granted to TOM. To migrate to the Db2 database system, use the dbschema tool to generate the CREATE ROLE and GRANT ROLE statements for the database:

CREATE ROLE DEVELOPER

CREATE ROLE TESTER

CREATE ROLE SALES

GRANT DEVELOPER

GRANT TESTER TO ALICE, TOM

GRANT SALES

You must create the database in the Db2 database system, and then you can run the preceding statements in that database to re-create the roles and assignment of the roles:

## Chapter 3. Using trusted contexts and trusted connections

You can establish an explicit trusted connection by making a request within an application when a connection to Db2 database is established. The security administrator must have previously defined a trusted context, the CREATE TRUSTED CONTEXT statement; with attributes matching those of the connection you are establishing (see 1, later). using Step

## Before you begin

The API you use to request an explicit trusted connection when you establish a connection depends on the type of application you are using (see the table in 2): Step

After you have established an explicit trusted connection, the application can switch the user ID of the connection to a different user ID the appropriate API for the type of application (see the table in 3). using Step

## Procedure

- 1 The security administrator defines a trusted context in the server by the CREATE TRUSTED CONTEXT statement: For example: using

CREATE TRUSTED CONTEXT MYTCX BASED UPON CONNECTION USING SYSTEM AUTHID NEWTON ATTRIBUTES   (ADDRESS 192.0.2.1') WITH USE FOR PUBLIC WITHOUT AUTHENTICATION ENABLE

- 2 To establish a trusted connection, use one of the following APIs in your application:
- 3\_ To switch to different user, with or without authentication, use one of the following APIs in your application:

| Option      | Description                                              |
|-------------|----------------------------------------------------------|
| Application | API                                                      |
| CLIIODBC    | SQLConnect, SQLSetConnectAttr                            |
| XA CLIIODBC | Xa_open                                                  |
| JAVA        | getDBZTrustedPooledConnection, getDB2TrustedXAConnection |

| Option      | Description                                                                                          |
|-------------|------------------------------------------------------------------------------------------------------|
| Application | API                                                                                                  |
| CLIIODBC    | SQLSetConnectAttr                                                                                    |
| XA CLIODBC  | SQLSetConnectAttr                                                                                    |
| JAVA        | getDB2Connection, reuseDB2Connection                                                                 |
| NET         | DBZConnection ConnectionString keywords: TrustedContextSystemUserID and TrustedContextSystemPassword |

The switching can be done either with or without authenticating the new user ID, depending on the definition of the trusted context object associated with the

```
explicit trusted connection: For example, suppose that the security administrator creates the following trusted context object: CREATE TRUSTED CONTEXT BASED UPON  CONNECTION  USING SYSTEM AUTHID USERI ATTRIBUTES (ADDRESS 192.0.2.1') WITH USE FOR USERZ WITH AUTHENTICATION USER3 WITHOUT AUTHENTICATION ENABLE
```

Further; suppose that an explicit trusted connection is established. A request to switch the user ID on the trusted connection to USER3 without providing authentication information is allowed because USER3 is defined as a user of trusted context CTXI for whom authentication is not request to switch the user ID on the trusted connection to USER2 without providing authentication information will fail because USER2 is defined as a user of trusted context CTXI for whom authentication information must be provided:

## Example of establishing an explicit trusted connection and switching the user

In the following example, a middle-tier server needs to issue some database requests on behalf of an end-user; but does not have access to the end-user's credentials to establish database connection on behalf of that end-user:

You can create a trusted context object on the database server that allows the middle-tier server to establish an trusted connection to the database: After establishing an explicit trusted connection, the middle-tier server can switch the current user ID of the connection to a new user ID without the need to authenticate the new user ID at the database server: The following CLI code snippet demonstrates how to establish a trusted connection the trusted context; MYTCX, defined in 1, earlier; and how to switch the user on the trusted connection without authentication: explicit using Step

```
int main(int argc, char *argv [] ) SQLHANDLE henv; environment handle */ SQLHANDLE hdbcl; connection handle */ char origUserid[10] "newton char sword[10] "test char switchUserid[10] zurbie" ; char dbName[10] testdb' Allocate the handles SQL_HANDLE_ENV &henv ) ; SQLAI IocHandle( SQL_HANDLE_DBC , &hdbcl ) ; Set the trusted connection attribute SQLSetConnectAttri hdbcl_ SQL_ATTR_USE_TRUSTED_CONTEXT , SQL_TRUE, SQL_IS_INTEGER ) ; Establish trusted connection SQLConnect hdbcl_ dbName SQL_NTS , origUserid, SQL_NTS, password, [Perform some work under user ID "newton Commit the work SQLEndTran (SQL_HANDLE_DBC , hdbcl, SQL_COMMIT) ;
```

```
Switch the user ID on the trusted connection SQLSetConnectAttr hdbcl, SQL_ATTR_TRUSTED_CONTEXT_USERID, switchUserid, SQL_IS_POINTER ) ; [Perform new work using user ID "zurbie" the work SQLEndTranSQL_HANDLE_DBC , hdbcl, COMMIT) ; Disconnect from database SQLDisconnect ( hdbcl ) ; return 0; end of main */ SQL_C
```

## What to do next

## When does the user ID actually switched? get

After the command to switch the user on the trusted connection is issued, the switch user request is not performed until the next statement is sent to the server\_ This is demonstrated by the following example where the Tist appl ications command shows the original user ID until the next statement is issued.

- 1\_ Establish an explicit trusted connection with USERIDL.
- 2. Issue the switch user command, such as getDBZConnection for USERIDZ
- 3 Run db2 Tist app] ications. It still shows that USERIDI is connected.
- 4\_ Issue a statement on the trusted connection, such as executeQuery ("values current sqlid") , to perform the switch user request at the server:
- 5 Run db2 ist app] ications It now shows that USERID2 is connected. again:

## Trusted contexts and trusted connections

trusted context is a database object that defines a trust relationship for a connection between the database and an external such as an application server entity

The trust relationship is based upon the following set of attributes:

- System authorization ID: Represents the user that establishes a database connection
- IP address (or domain name): Represents the host from which database connection is established
- Data stream encryption: Represents the encryption (if any) for the data communication between the database server and the database client setting

When a user establishes database connection, the Db2 database system checks whether the connection matches the definition of a trusted context object in the database: When a match occurs, the database connection is said to be trusted:

A trusted connection cannot be established if the connection is to a local database using inter-process communication (IPC)

trusted connection allows the initiator of this trusted connection to acquire additional capabilities that may not be available outside the scope of the trusted connection. The additional capabilities vary depending on whether the trusted connection is explicit or implicit:

The initiator of an explicit trusted connection has the ability to:

- Switch the current user ID on the connection to different user ID with or without authentication
- Acquire additional privileges via the role inheritance feature of trusted contexts

An implicit trusted connection is a trusted connection that is not explicitly requested; the implicit trusted connection results from a normal connection request rather than an explicit trusted connection request No application code changes are needed to obtain an implicit connection. Also, whether you obtain an implicit trusted connection or not has no effect on the connect return code (when you request an explicit trusted connection, the connect return code indicates whether the request succeeds or not). The initiator of an implicit trusted connection can only acquire additional privileges via the role inheritance feature of trusted contexts; cannot switch the user ID. they

## How using trusted contexts enhances security

The three-tiered application model extends the standard two-tiered client and server model by placing a middle tier between the client application and the database server: It has great popularity in recent years particularly with the emergence of web-based technologies and the Java 2 Enterprise Edition (J2EE) platform: An example of a software product that supports the three-tier application model is IBM WebSphere" Application Server (WAS) gained

In three-tiered application model, the middle tier is responsible for authenticating the users running the client applications and for managing the interactions with the database server: Traditionally, all the interactions with the database server occur through database connection established by the middle tier combination of a user ID and credential that identify that middle tier to the database server: This means that the database server uses the database privileges associated with the middle tier's user ID for all authorization checking and auditing that must occur for any database access, including access performed by the middle tier behalf of a user: using on

While the three-tiered application model has many benefits, having all interactions with the database server (for example, a user request) occur under the middle tier's authorization ID raises several security concerns, which can be summarized as follows:

- Loss of user identity
- Diminished user accountability
- Some enterprises to know the identity of the actual user accessing the database for access control purposes. prefer
- Accountability through auditing is a basic principle in database security Not knowing the user's identity makes it difficult to distinguish the transactions performed by the middle tier for its own purpose from those performed by the middle tier on behalf of a user
- Over granting of privileges to the middle tier's authorization ID

The middle tier's authorization ID must have all the privileges necessary to execute all the requests from all the users. This has the security issue of enabling users who do not need access to certain information to obtain access anyway:

- Weakened security
- In addition to the privilege issue raised in the previous point, the current approach requires that the authorization ID used by the middle tier to connect must be granted privileges on all resources that might be accessed by user requests. If that middle-tier authorization ID is ever compromised, then all those resources will be exposed.
- "Spill over" between users of the same connection Changes by previous user can affect the current user:

Clearly, there is a need for a mechanism whereby the actual user's identity and database privileges are for database requests performed by the middle tier on behalf of that user The most straightforward approach of achieving this goal would be for the middle-tier to establish a new connection the user's ID and password, and then direct the user's requests through that connection. Although simple, this approach suffers from several drawbacks which include the following: used using

- Inapplicability for certain middle tiers middle-tier servers do not have the user authentication credentials needed to establish a connection. Many
- Performance overhead. There is an obvious performance overhead associated with creating a new physical connection and re-authenticating the user at the database server
- Maintenance overhead. In situations where you are not a centralized security set up or are not single sign-on, there is maintenance overhead in having two user definitions (one on the middle tier and one at the server). This requires changing passwords at different places using using

The trusted contexts capability addresses this problem. The security administrator can create trusted context object in the database that defines a trust relationship between the database and the middle-tier: The middle-tier can then establish an explicit trusted connection to the database, which gives the middle tier the ability to switch the current user ID on the connection to different user ID, with or without authentication. In addition to solving the end-user identity assertion problem, trusted contexts offer another advantage: This is the ability to control when a privilege is made available to a database user: The lack of control on when privileges are available to a user can weaken overall security: For example, privileges may be used for purposes other than security administrator can one or more privileges to a role and that role to a trusted context object: Only trusted database connections (explicit or implicit) that match the definition of that trusted context can take advantage of the privileges associated with that role: they assign assign

## Enhancing performance

When you use trusted connections, you can maximize performance because of the following advantages:

- No new connection is established when the current user ID of the connection is switched:
- If the trusted context definition does not require authentication of the user ID to switch then the overhead associated with authenticating a new user at the database server is not incurred to,

## Example of creating a trusted context

Suppose that the security administrator creates the following trusted context object:

CREATE

TRUSTED CONTEXT

CTX1

ATTRIBUTES   (ADDRESS

192.0.2.1')

DEFAULT

ROLE managerRole

ENABLE

database system returns warning (SQLSTATE 01679, SQLCODE +20360) to indicate that a trusted connection could not be established, and that user userl simply a non-trusted connection. However; if user user2 requests a trusted connection from IP address 192.0.2.1, the request is honored because the connection attributes are satisfied by the trusted context CTXI. Now that use user2 has established trusted connection, he or she can now acquire all the\_privileges and authorities associated with the trusted context role managerRole These privileges and authorities may not be available to user user2 outside the scope of this trusted connection got

## Role membership inheritance through a trusted context

The current user of a trusted connection can acquire additional privileges through the automatic inheritance of a role through the trusted context, if this was specified by the security administrator as part of the relevant trusted context definition.

A role can be inherited by all users of the trusted connection by default: The security administrator can also use the trusted context definition to specify a role for specific users to inherit

The active roles that a session authorization ID can hold while on trusted connection are:

- The roles of which the session authorization ID is normally considered member; plus
- Either the trusted context default role or the trusted context user-specific role, if are defined they

## Note:

- If you configure user authentication using a custom security plugin that is built such that the system authorization ID and the session authorization ID produced by this security plug-in upon a successful connection are different from each other; then trusted contexts role cannot be inherited through that connection, even if it is trusted connection
- Trusted context privileges acquired through a role are effective only for dynamic DML operations. are not effective for: They
- Non-dynamic SQL (operations involving static SQL statements such as BIND, REBIND, implicit rebind, incremental bind, and s0 on)
- DDL operations

## Acquiring trusted context user-specific privileges

The security administrator can use the trusted context definition to associate roles with a trusted context so that:

- All users of the trusted connection can inherit a specified role by default

- Specific users of the trusted connection can inherit a specified role

When the user on a trusted connection is switched to new authorization ID and a trusted context user-specific role exists for this new authorization ID, the user-specific role overrides the trusted context default role, if one exists, as demonstrated in the example:

## Example of creating a trusted context that assigns a default role and a user-specific role

Suppose that the security administrator creates the following trusted context object:

```
BASED UPON CONNECTION USING SYSTEM AUTHID USERI ATTRIBUTES (ADDRESS 192.0.2.1') WITH USE FOR USERZ WITH AUTHENTICATION_ USER3 WITHOUT  AUTHENTICATION DEFAULT ROLE AUDITOR ENABLE
```

When USERI establishes a trusted connection, the privileges granted to the role AUDITOR are inherited by this authorization ID. Similarly, these same privileges are also inherited by USER3 when the current authorization ID on the trusted connection is switched to his or her user ID. (If the user ID of the connection is switched to USERZ at some point, then USER2 would also inherit the trusted context default role, AUDITOR:) The security administrator may choose to have USER3 inherit a different role than the trusted context default role can do so by assigning a role to this user as follows: They specific

```
CREATE  TRUSTED CONTEXT CTX1 BASED UPON  CONNECTION USING SYSTEM AUTHID USERI ATTRIBUTES   (ADDRESS 192.0.2.1') WITH USE USER3 WITHOUT  AUTHENTICATION ROLE OTHER ROLE DEFAULT ROLE AUDITOR ENABLE
```

When the current user ID on the trusted connection is switched to USER3, this user no longer inherits the trusted context default role: Rather; they inherit the specific role, OTHER\_ROLE, assigned to him or her by the security administrator:

## Rules for switching the user ID on an explicit trusted connection

On an explicit trusted connection, you can switch the user ID of the connection to different user ID. Certain rules apply:

- 1. If the switch request is not made from an trusted connection, and the switch request is sent to the server for processing, the connection is shut down and an error message is returned (SQLSTATE 08001, SQLCODE -30082 with reason code 41). explicit
- 2 If the switch request is not made on a transaction boundary, the transaction is rolled back, and the switch request is sent to the server for processing, the connection is into an unconnected state and an error message is returned (SQLSTATE 58009, SQLCODE -30020). put
- 3 If the switch request is made from within stored procedure, an error message is returned (SQLCODE -30090, reason code 29), indicating this is an illegal operation in this environment: The connection state is maintained and the connection is not placed into an unconnected state. Subsequent requests may be processed:

- If the switch request is delivered to the server on an instance attach (rather than database connection) , the attachment is shut down and an error message is returned (SQLCODE -30005).
- 5. If the switch request is made with an authorization ID that is not allowed on the trusted connection, error (SQLSTATE 42517 , SQLCODE -20361) is returned, and the connection is in an unconnected state: put
- 6 If the switch request is made with an authorization ID that is allowed on the trusted connection WITH AUTHENTICATION, but the appropriate authentication token is not provided, error (SQLSTATE 42517 , SQLCODE -20361) is returned, and the connection is put in an unconnected state
- 7 If the trusted context object associated with the trusted connection is disabled, and a switch request for that trusted connection is made, error (SQLSTATE 42517 , SQLCODE -20361) is returned, and the connection is put in an unconnected
- In this case, the only switch user request that is accepted is one that specifies the user ID that established the trusted connection or the NULL user ID. If a switch to the user ID that established the trusted connection is made, this user ID does not inherit any trusted context role (neither the trusted context default role nor the trusted context user-specific role)
- 8 If the system authorization ID attribute of the trusted context object associated with the trusted connection is changed, and a switch request for that trusted connection is made, error (SQLSTATE 42517 , SQLCODE -20361) is returned, and the connection is in an unconnected state: put
- In this case, the only switch user request that is accepted is one that specifies the user ID that established the trusted connection or the NULL user ID: If a switch to the user ID that established the trusted connection is made, this user ID does not inherit any trusted context role (neither the trusted context default role nor the trusted context user-specific role).
- If the trusted context object associated with the trusted connection is dropped, and a switch request for that trusted connection is made, error (SQLSTATE 42517 , SQLCODE -20361) is returned, and the connection is in an unconnected put
- In this case, the only switch user request that is accepted is one that specifies the user ID that established the trusted connection or the NULL user ID. If a switch to the user ID that established the trusted connection is made, this user ID does not inherit any trusted context role (neither the trusted context default role nor the trusted context user-specific role)
- 10. If the switch request is made with user ID allowed on the trusted connection, but that user ID does not hold CONNECT privilege on the database, the connection is in an unconnected state and an error message is returned (SQLSTATE 08004, SQLCODE -1060). put
- 11\_ If the trusted context system authorization ID appears in the WITH USE FOR clause, the Db2 database system honors the authentication setting for the system authorization ID on switch user request to switch back to the system authorization ID. If the trusted context system authorization ID does not appear in the WITH USE FOR clause, then a switch user request to switch back to the system authorization ID is always allowed even without authentication.

Note: When the connection is in the unconnected state, the only requests that are accepted and do not result in returning the error The application state is in error A database connection does not exist' (SQLCODE are: put -900)

- switch user request

- COMMIT or ROLLBACK statement
- A DISCONNECT;, CONNECT RESET or CONNECT request

Note: When the user ID on the trusted connection is switched to a new user all traces of the connection environment under the old user are gone: In other words, the switching of user IDs results in an environment that is identical to a new connection environment: For example, if the old user ID on the connection had any temporary tables or WITH HOLD cursors open, these objects are completely lost when the user ID on that connection is switched to a new user ID. ID,

Note: Java trusted connections do not have an unconnected state. If the switch user operation fails, Java will throw an exception and the connection will be disconnected:

## Trusted context problem determination

An explicit trusted connection is a connection that is successfully established by a specific, explicit request for a trusted connection. When you request an explicit trusted connection and you do not qualify for one, you regular connection and a warning (+20360). get

To determine why a user could not establish a trusted connection, the security administrator needs to look at the trusted context definition in the system catalogs and at the connection attributes. In particular; the IP address from which the connection is established, the encryption level of the data stream or network, and the system authorization ID making the connection: The -appl ication of the dbzpd utility returns this information, as well as the following additional information: option

- Connection Trust Type: Indicates whether the connection is trusted or not: When the connection is trusted, this also indicates whether this is an explicit trusted connection or an implicit trusted connection.
- Trusted Context name: The name of the trusted context associated with the trusted connection.
- Role Inherited: The role inherited through the trusted connection.

The following are the most common causes of to obtain an explicit trusted connection: failing

- The client application is not using TCP\_ IP to communicate with the Db2 server TCP /IP is the only supported protocol for a client application to communicate with the Db2 server that can be used to establish a trusted connection (explicit or implicit).
- The database server authentication type is set to CLIENT
- The database server does not have an enabled trusted context object: The definition of the trusted context object must explicitly state ENABLE in order for that trusted context to be considered for matching the attributes of an incoming connection
- The trusted context objects on the database server do not match the trust attributes that are presented. For example, one of the following situations may apply:
- The system authorization ID of the connection does not match any trusted context object system authorization ID.
- The IP address from which the connection originated does not match any IP address in the trusted context object considered for the connection\_

- The data stream encryption used by the connection does not match the value of the ENCRYPTION attribute in the trusted context object considered for the connection\_

You can use the dbzpd tool to find out the IP address from which the connection is established, the encryption level of the data stream or network used by the connection, and the system authorization ID making the connection: You can consult the SYSCATCONTEXTS and SYSCATCONTEXTATTRIBUTES catalog views to find out the definition of a particular trusted context object, such as its system authorization ID, its set of allowed IP addresses and the value of its ENCRYPTION attribute:

The following are the most common causes of switch user failure:

- The user ID to switch to does not have CONNECT privileges on the database: In this case, SQLIO6ON is returned:
- The user ID to switch to, or PUBLIC, is not defined in the WITH USE FOR clause of the trusted context object associated with the explicit trusted connection\_
- Switching the user is allowed with authentication, but the user presents no credentials or the wrong credentials.
- switch-user request is not made on transaction boundary:
- The trusted context that is associated with trusted connection has been disabled, dropped, or altered. In this case, only switching to the user ID that established the trusted connection is allowed.

## Chapter 4. Row and column access control (RCAC) overview

Db2 V1O.1 introduces row and column access control (RCAC), as an additional of data security: Row and column access control is sometimes referred to as fine-grained access control or FGAC RCAC controls access to table at the row level, column level, or both: RCAC can be used to complement the table privileges model: layer

To comply with various government regulations, you might implement procedures your organization are permitted access to only the subset of data that is required to perform their job tasks  For example, government regulations in your area might state that a doctor is authorized to view the medical records of their own patients, but not of other patients. The same regulations might also state that, unless a patient gives their consent, a healthcare provider is not permitted access to patient personal information, as the patients home phone number: such

You can use row and column access control to ensure that your users have access to only the data that is required for their work For example, a hospital running Db2 and RCAC can filter information and data to include only that data which particular doctor requires. Other patients do not exist as far as the doctor is concerned. Similarly, when a service representative queries the patient table at the same hospital, are able to view the name and telephone number columns, but the medical history column is masked for them If an alternate value is displayed, instead of the actual medical history system patient patient they patient

Row and column access control, or RCAC, has the following advantages:

- No database user is inherently exempted from the row and column access control rules.
- Even higher level authorities such as users with DATAACCESS authority are not exempt from these rules. Only users with security administrator (SECADM) authority can manage row and column access controls within database: Therefore, you can use RCAC to prevent users with DATAACCESS authority from freely accessing all data in a database.
- Table data is protected regardless of how table is accessed via SQL. Applications, improvised query tools, and report generation tools are all subject to RCAC rules. The enforcement is data-centric
- No application changes are required to take advantage of this additional of data security: layer
- That is, row and column level access controls are established and defined in a way that is not apparent to existing applications However; RCAC represents an important shift in paradigm in the sense that it is no longer what is asked but rather who is what: Result sets for the same query change based on the context in which the query was asked and there is no warning or error returned\_ This behavior is the exact intent of the solution. It means that application designers and DBAs must be conscious that queries do not see the whole picture in terms of the data in the table, unless granted permissions to do sO. being asking specific

## Related information:

Best practices: A practical to implementing row and column access control guide

## Row and column access control (RCAC) rules

Row and column access control (RCAC) places access control at the table level around the data itself: SQL rules created on rows and columns are the basis of the implementation of this capability:

Row and column access control is an access control model in which a security administrator manages privacy and security policies. RCAC permits all users to access the same table, as opposed to alternative views of a table RCAC does however; restrict access to the table based upon individual user permissions Or rules as specified by policy associated with the table There are two sets of rules, one set operates on rows, and the other on columns.

- Row permission
- A row permission is a database object that expresses a row access control rule for a specific table:
- A row access control rule is an SQL search condition that describes what set of rows user has access to\_
- Column mask
- column access control rule for a specific column in a table:
- A column access control rule is an SQL CASE expression that describes what column values a user is permitted to see and under what conditions

## SQL statements for managing RCAC rules

Using the following SQL statements, you can create, alter; and RCAC rules\_ drop

CREATE PERMISSION

ALTER PERMISSION

CREATE MASK

ALTER MASK

DROP

GRANT (database authorities)

REVOKE (database authorities)

AUDIT

COMMENT

CREATE TABLE

ALTER TABLE

RENAME

CREATE FUNCTION (external scalar)

CREATE FUNCTION (external table)

CREATE FUNCTION (OLE DB external table)

CREATE FUNCTION (SQL scalar; table, or row)

CREATE FUNCTION (sourced or template)

ALTER FUNCTION

CREATE TRIGGER

ALTER TRIGGER

## Built-in functions for managing RCAC permissions and masks

Use the following built-in scalar functions to express conditions in your permissions and masks. example, user must belong to one or more roles, or to one or more groups to access a For

## Scenario: ExampleHMO using row and column access control

This scenario presents ExampleHMO, a national organization with a and active list of patients, as a user of row and column access control. ExampleHMO uses row and column access control to ensure that their database policies reflect government regulatory requirements for privacy and security, as well as management business objectives. large

Organizations that handle patient health information and their personal information, like ExampleHMO, must comply with government privacy and data protection regulations, for example the Health Insurance Portability and Accountability Act (HIPAA) These privacy and data protection regulations ensure that any sensitive medical or personal information is shared, viewed, and modified only by authorities who are privileged to do so. violation of the act results in huge penalties including civil and criminal suits. patient Any

ExampleHMO must ensure that the data stored in their database systems is secure and only privileged users have access to the data. According to typical privacy regulations, certain information can be accessed and modified by only privileged users\_ patient

## Scenario: ExampleHMO using row and column access control Security policies

ExampleHMO implements security strategy where data access to databases are made available according to certain security policies.

The security policies conform to government privacy and data protection regulations  The first column outlines the policies and the challenges faced by the organization, the second column outlines the row and column access control feature which addresses the challenge:

| Security challenge                                                                                                                                                                                                         | Row and column access control feature which addresses the security challenge                                                                                                                                                         |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Limiting column access to only privileged users For example, Jane, who is drug researcher at partner company, is not permitted to view sensitive patient medical information or personal data like their insurance number: | Column masks can be used to filter or hide sensitive data from Jane_                                                                                                                                                                 |
| Limiting row access to only privileged users. Dr: Lee is only permitted to view patient information for his own patients, not all patients in the ExampleHMO system.                                                       | Row permissions can be implemented to control which user can view any particular row.                                                                                                                                                |
| Restricting data on need-to-know basis.                                                                                                                                                                                    | permissions can help with this challenge as well by restricting table level data at the user level Row                                                                                                                               |
| Restricting other database objects like UDFs, triggers, views on RCAC secured data_                                                                                                                                        | Row and column access control protects data at the data level. It is this data-centric nature of the row and column access control solution that enforces security policies on even database objects like UDFs, triggers, and views. |

## Scenario: ExampleHMO using row and column access control Database users and roles

In this scenario, a number of different people create, secure, and use ExampleHMO data. These people have different user rights and database authorities.

ExampleHMO implemented their security strategy to classify the way data is accessed from the database: Internal and external access to data is based on the separation of duties to users who access the data and their data access privileges. ExampleHMO created the following database roles to separate these duties:

## PCP

For primary care physicians.

## DRUG\_RESEARCH

For researchers.

## ACCOUNTING

For accountants-

## MEMBERSHIP

For members who add patients for and opt-out: opt-in

## PATIENT

For patients.

The following people create, secure, and use ExampleHMO data:

## Alex

ExampleHMO Chief Security Administrator: He holds the SECADM authority:

## Peter

ExampleHMO Database Administrator: He holds the DBADM authority:

ExampleHMO Database Developer: He has the privileges to create triggers and user-defined functions.

## Dr \_ Lee

ExampleHMO Physician. He belongs to the PCP role:

## Jane

Drug researcher at Innovative Pharmaceutical Company, a ExampleHMO partner: She belongs to the DRUG\_RESEARCH role:

John

ExampleHMO Accounting Department: He belongs to the ACCOUNTING role:

## Tom

ExampleHMO Membership Officer: He belongs to the MEMBERSHIP role:

Bob

ExampleHMO Patient: He belongs to the PATIENT role:

If you want to any of the example SQL statements and commands presented in this scenario, create these user IDs with their listed authorities. try

The following example SQL statements assume that the users have been created on the The SQL statements create each role and grant SELECT and INSERT permissions to the various tables in the ExampleHMO database to the users: ~~Creating roles and granting authority system:

CREATE ROLE PCP;

CREATE ROLE DRUG\_RESEARCH;

CREATE ROLE ACCOUNTING;

CREATE ROLE MEMBERSHIP;

CREATE ROLE   PATIENT;

GRANT ROLE PCP TO USER LEE;

GRANT ROLE DRUGRESEARCH

GRANT ROLE MEMBERSHIP TO USER TOM;

GRANT ROLE ACCOUNTING To USER JOHN;

GRANT ROLE PATIENT TO USER BOB;

## Scenario: ExampleHMO using row and column access control Database tables

This scenario focuses on two tables in the ExampleHMO database: the PATIENT table and the PATIENTCHOICE table:

The PATIENT table stores basic information and health information. This scenario considers the following columns within the PATIENT table: patient

## SSN

The patient's insurance number: A patient's insurance number is considered personal information.

## NAME

The patient's name: A patient's name is considered personal information:

## ADDRESS

The patient's address. A patient's address is considered personal information.

## USERID

The patient's database ID.

## PHARMACY

The patient's medical information.

## AccT BALANCE

The patient's information. billing

The patient's primary care physician database ID

The PATIENTCHOICE table stores individual patient opt-in and opt-out information which decides whether a patient wants to expose his health information to outsiders for research purposes in this table: This scenario considers the following columns within the PATIENTCHOICE table:

## SSN

The patient's insurance number is to match patients with their choices used

## CHOICE

The name of a choice can make\_ patient

## VALUE

The decision made by the patients about the choice:

For example, the row 123-45-6789, drug\_research, opt-in says that patient with SSN 123-45-6789 agrees to disclose their information for medical research purposes.

The following example SQL statements create the PATIENT, PATIENTCHOICE, and ACCT\_HISTORY tables. Authority is granted on the tables and data is inserted:

```
Patient table storing information regarding patient CREATE TABLE PATIENT SSN CHAR(11) = USERID VARCHAR(18) . NAME VARCHAR ( 128) ADDRESS VARCHAR(128) PHARMACY VARCHAR(250, AcCT BALANCE DECIMAL(12,2) WITH DEFAULT, PCP_ID VARCHAR(18) ) Patientchoice table which stores what patient opts ~-to expose regarding his health information CREATE TABLE PATIENTCHOICE SSN CHAR(11) _ CHOICE VARCHAR( 128) VALUE VARCHAR(128) ~~Log table track account balance CREATE TABLE ACCT_HISTORY
```

```
to SSN CHAR(11) _ BEFORE_BALANCE DECIMAL(12,2) , AFTER_BALANCE DECIMAL(12,2) = WHEN DATE, BY_WHO VARCHAR(20)
```

Grant authority

```
UPDATE ON TABLE PATIENT TO ROLE PCP; GRANT SELECT ON TABLE PATIENT TO ROLE DRUG_RESEARCH; GRANT SELECT , UPDATE, INSERT ON TABLE PATIENT TO ROLE MEMBERSHIP; TO ROLE MEMBERSHIP; GRANT SELECT ON TABLE PATIENT TO ROLE PATIENT; GRANT SELECT, TO USER ALEX; GRANT ALTER, SELECT To USER PAUL; GRANT   INSERT ON TABLE ACCT_HISTORY TO USER PAUL; Insert patient data VALUES ( '123-55-1234' MAX Max 'First Strt' , hypertension 89.70, LEE' ) ; INSERT Into PATIENTCHOICE VALUES ( '123-55-1234 ' drug-research opt-out' ) ; INSERT VALUES ( 123-58-9812" MIKE' Mike Long Strt null, 8.30, JAMES ' ) ; INSERT Into PATIENTCHOICE VALUES ( '123-58-9812 ' drug-research opt-out' ) ; INSERT   INTO PATIENT VALUES ( '123-11-9856 ' SAM" Sam" Big Strt VALUES ( 123-11-9856 drug-research opt-in' ) ; INSERT   INTO PATIENT VALUES ( 123-19-1454" DUG " Dug " Good Strt 0 . 00 , JAMES' ) ; INSERT Into PATIENTCHOICE VALUES ( ' 123-19-1454 ' drug-research opt-in' ) ;
```

## Scenario: ExampleHMO using row and column access control Security administration

Security administration and the security administrator (SECADM) role play important parts in securing and company data at ExampleHMO. At ExampleHMO, management decided that different people hold database administration authority and security administration authority patient

The management team at ExampleHMO decides to create a role for administering access to their data. The team also decides that even users with DATAACCESS authority are not able to view protected health and personal data by default:

The management team selects Alex to be the sole security administrator for ExampleHMO. From now 0n, Alex controls all data access authority With this whether functions and triggers are secure or not: These rules control which users have access to any given data under his control.

After Peter; the database administrator; creates the required tables and sets up the required roles, duties are separated. The database administration and security administration duties are separated by making Alex the security administrator:

Peter connects to the database and grants Alex SECADM authority Peter can grant SECADM authority since he currently holds the DBADM, DATAACCESS, and SECADM authorities:

- To seperate duties of security administrator from system administrator, the SECADMN Peter grants SECADM authority to user Alex \_ GRANT   SECADM ON DATABASE TO USER ALEX;

Alex, after receiving the SECADM authority, connects to the database and revokes the security administrator privilege from Peter: The duties are now separated and Alex becomes the sole authority to grant data access to others within and outside ExampleHMO. The following SQL statement shows how Alex revoked SECADM authority from Peter:

revokes the SECADMIN authority for Peter

REVOKE SECADM ON DATABASE FROM USER PETER;

## Scenario: ExampleHMO using row and column access control Row permissions

Alex, the security administrator; starts to restrict data access on the ExampleHMO database by row permissions, a part of row and column access control. Row permissions filter the data returned to users by IOw: using

Patients are permitted to view their own data. A physician is permitted to view the data of all his patients, but not the data of patients who see other physicians. Users belonging to the MEMBERSHIP; ACCOUNTING, or DRUG\_RESEARCH roles can access all patient information. Alex, the security administrator; is asked to implement these permissions to restrict who can see any given row on need-to-know basis.

Row permissions restrict or filter rows based on the user who has logged on to the database: At ExampleHMO, the row permissions create horizontal data restriction on the table named PATIENT:

Alex implements the following rOW permissions so that a user in each role is restricted to view result set that are privileged to view: they

CREATE PERMISSION ROW\_ACCESS ON PATIENT

```
Accounting information: ROLE  PATIENT is a] lowed to access his or her own row ROLE PCP is to access his or her patients rows ROLE MEMBERSHIP, ACCOUNTING, and DRUG_RESEARCH are a] Iowed to access a]1 rows FOR ROWS WHERE (VERIFY_ROLE_FOR_USER(SESSION_USER, PATIENT ' ) AND PATIENT . USERID SESSION_USER) OR (VERIFY_ROLE_FOR_USER (SESSION_USER, PCP' ) AND PATIENT . PCP_ID SESSION_USER) OR (VERIFY_ROLE_FOR_USER(SESSION_USER, 'MEMBERSHIP' ) OR
```

```
VERIFY_ROLE_FOR_USER(SESSION_USER, ACCOUNTING ' ) OR VERIFY_ROLE_FOR_USER(SESSION_USER, DRUG_RESEARCH' ) 1) ENFORCED FOR ALL ACCESS ENABLE;
```

Alex observes that even after creating a rOw permission, all data can still be viewed by the other employees. A row permission is not applied until it is activated on the table for which it was defined: Alex must now activate the permission:

row access control to imp]ement row permissions

ROW ACCESS CONTROL;

## Scenario: ExampleHMO using row and column access control Column masks

Alex, the security administrator; further restricts data access on the ExampleHMO database by column masks, a part of row and column access control. Column masks hide data returned to users by column unless are permitted to view the data: using they

Patient payment details must only be accessible to the users in the accounts department: The account balance must not be seen by any other database users\_ Alex is asked to prevent access by anyone other than users belonging to the ACCOUNTING role:

Alex implements the following column mask so that a user in each role is restricted to view result set that are privileged to view: they

~-Create Co]umn MASK ON ACCTBALANCE column on the PATIENT table

```
CREATE MASK ACCTBALANCE MASK ON PATIENT FOR Accounting information: Role ACCOUNTING is a] ]owed to access information on co]umn ACCT_BALANCE _ Other roles accessing this co]umn strictly view zero value COLUMN ACCT_BALANCE RETURN CASE WHEN VERIFY_ROLE_FOR_USER(SESSION_USER, 'ACCOUNTING ' ) THEN ACCT_BALANCE ELSE 0.00 END ENABLE;
```

Alex observes that even after creating a column mask, the data can still be viewed by the other employees. A column mask is not until it is activated on the table for which it was defined. Alex must now activate the mask: applied

~-Activate co]umn access control to imp]ement co]umn masks

ACTIVATE COLUMN ACCESS CONTROL;

Alex is asked by management to hide the insurance number of the patients. Only a patient, physician, accountant, or people in the MEMBERSHIP role can view the SSN column\_

Also, to protect the PHARMACY detail of a patient, the information in the PHARMACY column must only be viewed by a drug researcher or a physician. Drug researchers can see the data only if the patient has agreed to disclose the information.

Alex implements the following column masks so that a user in each role is restricted to view a result set that are privileged to view: they

## CREATE MASK SSN\_MASK ON PATIENT FOR

```
Persona] contact information: Roles PATIENT , PCP _ MEMBERSHIP , and are a] lowed to access the full information on columns SSN, USERID, NAME , and ADDRESS _ Other roles access ing these co]umns strictly view masked value COLUMN SSN RETURN CASE WHEN VERIFY_ROLE_FOR_USER(SESSION_USER, 'PATIENT ' ) 1 OR VERIFY ROLE_FOR_USER(SESSION_USER, 'PCP' ) OR VERIFY_ROLE_FOR_USER(SESSION_USER MEMBERSHIP ' ) OR VERIFY_ROLE_FOR_USER(SESSION_USER, ACCOUNTING ' ) THEN SSN ELSE CHAR( XXX-XX SUBSTR(SSN,8,4) ) END ENABLE;
```

CREATE MASK PHARMACY\_MASK ON PATIENT FOR

- Medica] information:

Role PCP is a] lowed

to access

on

- column PHARMACY \_

the ful]

information

- For the purposes of drug research Role DRUG\_RESEARCH can
- provided that the patient has opted-in\_
- conditionally see patient medica] informat ion
- In a11 other nul] values as
- cases are rendered co]umn
- values

```
COLUMN PHARMACY RETURN CASE WHEN VERIFY ROLE FOR_USER(SESSION_USER, PCP' ) 1 OR (VERIFY_ROLE_FOR_USER(SESSION_USER, DRUG_RESEARCH' )=1 AND EXISTS  (SELECT FROM  PATIENTCHOICE C WHERE PATIENT.SSN C.SSN AND C. CHOICE drug-research opt-in' ) ) THEN PHARMACY ELSE NULL END ENABLE;
```

Alex observes that after creating these column masks that the data is only viewable to the intended users. The PATIENT table already had column access control activated: two

## Scenario: ExampleHMO using row and column access control

When a new patient is admitted for treatment in the hospital, the new record must be added to the ExampleHMO database: patient

Bob is a new patient, and his records must be added to the ExampleHMO database: A user with the required security authority must create the new record for Bob. Tom, from the ExampleHMO membership department, with the

MEMBERSHIP role, enrolls Bob as new member: After connecting to the ExampleHMO database, Tom runs the following SQL statements to add Bob to the ExampleHMO database:

```
INSERT BOB " Bob" 123 Some St. hypertension 9 .00 , LEE' ) ; INSERT Into PATIENTCHOICE VALUES ( drug-research 'opt-in') ;
```

Tom confirmed that Bob was added to the database by querying the same from the PATIENT table in the ExampleHMO database:

Select FROM PATIENT WHERE NAME

| SSN             | USERID   | NAME   | ADDRESS   |      | PHARMACY    |    | AcCTBALANCE   | PCP_ID   |
|-----------------|----------|--------|-----------|------|-------------|----|---------------|----------|
| 123-45-6789 BOB |          | Bob    | 123  Some | St _ | XXXXXXXXXXX |  0 |               | LEE      |

## Scenario: ExampleHMO using row and column access control Data updates

While in the hospital, Bob gets his treatment changed. As a result his records in the ExampleHMO database need updating:

Dr: Lee, who is Bob's physician, advises a treatment change and changes Bob's medicine: Bob's record in the ExampleHMO systems must be updated. The IOw permission rules set in the ExampleHMO database specify that anyone who cannot view the data in a row cannot the data in that row. Since Bob's PCPID contains Dr: Lee's ID, and the row permission is set, Dr: Lee can both view, and Bob's record using the following example SQL statement: update update

UPDATE   PATIENT SET PHARMACY codeine WHERE  NAME Bob

## Dr: Lee checks the update:

Select FROM PATIENT WHERE NAME Bob"

| SSN         | USERID   | NAME   | ADDRESS   | ADDRESS   | PHARMACY   | ACCT_BALANCE   | PCP_ID   |
|-------------|----------|--------|-----------|-----------|------------|----------------|----------|
| 123-45-6789 | BOB      | Bob    | 123  Some | St_       | codeine    | 0 00           | LEE      |

is a who is under the care of Dr: James, one of Dr: Lee's colleagues. Dr: Lee attempts the same on the record for Dug patient update Dug:

SQLO1OOW No row was found for FETCH, UPDATE or DELETE; or the result of query is an empty table SQLSTATE-02000

PHARMACY codeine WHERE NAME Dug "

Since Dug's PCPID does not contain Dr: Lee's ID, and the row permission is set, Dr: Lee cannot view, or Dug's record: update

## Scenario: ExampleHMO using row and column access control Data queries

With row and column access control, people in different roles can have different result sets from the same database queries. For example, Peter; the database\_ administrator with DATAACCESS authority, cannot see any data on the PATIENT table:

Peter; Bob, Dr: Tom, Jane, and John each connect to the database and the following SQL query: Lee, try

SELECT SSN, USERID, NAME, ADDRESS, PHARMACY , PCP\_ID FROM PATIENT;

Results of the query vary according to who runs the query The rOw and column access control rules created by Alex are applied on these queries.

Here is the result set Peter sees:

record (s) selected.

Even though there is data in the table and Peter is the database administrator; he lacks the authority to see all data

Here is the result set Bob sees:

| SSN         | USERID   | NAME   | ADDRESS   | ADDRESS   | PHARMACY       |
|-------------|----------|--------|-----------|-----------|----------------|
| 123-45-6789 | BOB      | Bob    |           | 123 Some  | St.XXXXXXXXXXX |

record(s) selected.

Bob, patient, can only see his own data. Bob belongs to the PATIENT role: The PHARMACY and ACC\_BALANCE column data have been hidden from him: being

Here is the result set Dr: Lee sees:

| SSN USERID      | NAME   | ADDRESS    | PHARMACY              | AcC_BALANCE PCP_ID   |     |    |
|-----------------|--------|------------|-----------------------|----------------------|-----|----|
| 123-55-1234 MAX | Max    | First Strt | hypertension          |                      | LEE |    |
| 123-11-9856 SAM | Sam    | Big Strt   | High blood pressure 0 | 00                   | LEE |    |
|                 | Bob    |            | St.codeine            | 0.00                 | LEE |    |

3 record(s) selected.

Dr: Lee can see only the data for patients under his care\_ Dr: Lee belongs to the

Here is the result set Tom sees:

| SSN             | USERID   | NAME   | ADDRESS    | PHARMACY   | ACC_BALANCE PCP_ID   |      |       |
|-----------------|----------|--------|------------|------------|----------------------|------|-------|
| 123-55-1234     | MAX      | Max    | First Strt |            | XXXXXXXXXXX          | 0    | LEE   |
|                 | MIKE     | Mike   | Long Strt  |            | XXXXXXXXXXX          |      | JAMES |
| 123-11-9856 SAM |          | Sam    | Big Strt   |            | XXXXXXXXXXX          |      | LEE   |
| 123-19-1454     | DUG      | Dug    | Good       | Strt       | XXXXXXXXXXX          |      | JAMES |
| 123-45-6789     | BOB      | Bob    |            | 123  Some  | St.XXXXXXXXXXX       | 0 00 | LEE   |

5 record(s) selected \_

Tom can see all members. Tom belongs to the membership role: He is not privileged to see any data in the PHARMACY and ACC\_BALANCE columns.

## Here is the result set Jane sees:

| SSN              | USERID   | NAME       | ADDRESS     |   PHARMACY | AcC_BALANCE PCP_ID   |
|------------------|----------|------------|-------------|------------|----------------------|
| XXX-XX-1234 MAX  | Max      | First Strt | XXXXXXXXXXX |         00 | LEE                  |
| XXX-XX-9812 MIKE | Mike     | Long Strt  | XXXXXXXXXXX |         00 | JAMES                |

| XXX-XX-9856 SAM   | Sam   | Big Strt High blood pressure 0.00   |       | LEE   |
|-------------------|-------|-------------------------------------|-------|-------|
| XXX-XX-1454 DUG   | Dug   | Good Strt Influenza                 | 0 .00 | JAMES |
| XXX-XX-6789 BOB   | Bob   | 123  Some St.codeine                | 0.00  | LEE   |

5 record(s) selected and ACC\_BALANCE column data are hidden from her: The PHARMACY data is only available if the patients have to share their data with research companies opted-in drug

Here is the result set John sees:

| SSN              | USERID   | NAME   | ADDRESS    | PHARMACY       | ACC_BALANCE PCP_ID   |       |
|------------------|----------|--------|------------|----------------|----------------------|-------|
| 123-55-1234      | MAX      | Max    | First Strt | XXXXXXXXXXX    | 89.70                | LEE   |
| 123-58-9812 MIKE |          | Mike   | Long Strt  | XXXXXXXXXXX    | 8.30                 | JAMES |
| 123-11-9856      | SAM      | Sam    | Big Strt   | XXXXXXXXXXX    | 0.00                 | LEE   |
| 123-19-1454      | DUG      | Dug    | Good Strt  | XXXXXXXXXXX    | 0                    | JAMES |
| 123-45-6789      | BOB      | Bob    |            | St.XXXXXXXXXXX | 9 00                 | LEE   |

5 record(s) selected.

John can see all members. He belongs to the ACCOUNTING role: The PHARMACY column data is hidden from him:

## Scenario: ExampleHMO using row and column access control View creation

Alex, the security administrator; is asked to create a view on the PATIENT table that medical researchers can use\_

Researchers, that have a partnership with ExampleHMO, can have access to limited data if patients have opted-in to this access. Alex and the IT team are asked to create view to list only specific information related to research of the patient: The report must contain the insurance number; name of the patient and the disclosure chosen by the patient: patient permit patient option

The view created fetches the basic information and the health condition disclosure This view ensures that information is protected and fetched only with their permission for any other purpose: patient option. patient

Alex and the IT team implement the following view:

CREATE VIEW PATIENT INFOVIEW AS

```
SELECT P.SSN_ P.NAME  FROM PATIENT P, PATIENTCHOICE C WHERE P.SSN C.SSN AND C.CHOICE drug-research AND C.VALUE opt-in
```

After Alex and his team create the view, users can query the view see data according to the row and column access control rules defined on the base tables on which the view is created. They

Alex sees the following result-set from the following query on the view:

```
SELECT SSN, NAME FROM PATIENT_INFO_VIEW; SSN NAME record(s) selected.
```

Dr: Lee sees the following result-set from the following query the view: SELECT SSN, NAME FROM PATIENT\_INFO\_VIEW; on

```
SSN NAME 123-11-9856 Sam 123-45-6789 Bob
```

2 record(s) selected\_

Bob sees the following result-set from the following query on the view: SELECT SSN NAME FROM PATIENT INFO\_VIEW;

```
SSN NAME 123-45-6789 Bob
```

record(s) selected\_

## Scenario: ExampleHMO using row and column access control Secure functions

Functions must be deemed secure before can be called within row and column access control definitions. Alex, the security administrator; discusses how Paul, a database developer at ExampleHMO, can create a secure function for his new accounting application. they

After the privacy and security policy went into effect at ExampleHMO, Alex is notified that the accounting department has developed a powerful accounting application: ExampleHMOAccountingUDF is SQL scalar user-defined function (UDF) that is used in the column mask ACCT\_BALANCE\_MASK on the PATIENTACCT\_BALANCE table and row:

Only UDFs that are secure can be invoked within a column mask. Alex first discusses the UDF with Paul, who wrote the UDF, to ensure the operation inside the UDF is secure.

When Alex is satisfied that the function is secure, he system privilege to Paul so Paul can alter the UDF to be secure: GRANT CREATE\_SECURE\_OBJECT ON  DATABASE TO USER PAUL; grants

To create secured UDF; or alter a UDF to be secured, a developer must be granted CREATE\_SECURE\_OBJECT authority:

```
Paul creates the function: CREATE  FUNCTION EXAMPLEHMOACCOUNTINGUDF (X DECIMAL(12,2) ) RETURNS DECIMAL (12,2) LANGUAGE SQL CONTAINS SQL DETERMINISTIC NO   EXTERNAL ACTION RETURN X* (1.0
```

Paul alters the function so it is secured: ALTER FUNCTION EXAMPLEHMOACCOUNTINGUDF SECURED;

Alex now drops and recreates the mask ACC\_BALANCE\_MASK s0 the new UDF is used:

```
the mask to recreate DROP MASK ACCT BALANCE_MASK; ~-Drop
```

```
CREATE MASK EXAMPLEHMO.ACCT BALANCE MASK ONPATIENT FOR Accounting information: Role ACCOUNTING is a] ]owed to invoke the secured UDF Examp]eHMOAccountingUDFL passing co]umn AccTBALANCE as the input argument Other ROLEs accessing this co]umn strictly view zero value_ COLUMN ACCT BALANCE  RETURN CASE WHEN VERIFY ROLE_FOR_USER(SESSION_USER, ACCOUNTING' ) THEN  EXAMPLEHMOACCOUNTINGUDF (ACCT_BALANCE) ELSE 0.00 END
```

ENABLE;

Dr: Lee, who has the PCP role, must call a analysis user-defined function: DrugUDF returns patient drug information: In the Dr: Lee issues a SELECT statement that calls DrugUDF and receives the result set quickly: After the PATIENT table has been protected with row and column access control, the same query takes more time to return a result set drug past,

Dr: Lee consults with the ExampleHMO IT staff and Alex, the security administrator, about this performance degradation. not secure, the query cannot be optimized as well and it takes longer to return a result set:

Alex looks into the UDF with Dr: Lee and the owner; Paul, to ensure the operation inside the UDF is secure. Alex asks Paul to alter the UDF to be secure as Paul still has the CREATE\_SECURE\_OBJECT privilege granted by Alex:

~-Function for Examp]eHMO Pharmacy department

```
CREATE  FUNCTION DRUGUDF ( PHARMACY VARCHAR(5000) ) RETURNS VARCHAR(5000) BEGIN ATOMIC IF PHARMACY IS NULL THEN RETURN NULL; ELSE RETURN Norma] END IF; END; Secure the UDF ALTER FUNCTION DRUGUDF SECURED; Grant execute permissions to Dr . Lee GRANT EXECUTE ON FUNCTION DRUGUDF TO USER LEE;
```

```
Dr: Lee can issue the query and the query can be optimized expected:
```

```
as ~~Querying after the function is secured SELECT PHARMACY FROM PATIENT WHERE  DRUGUDF ( PHARMACY) Norma] AND SSN 123-45-6789 PHARMACY codeine
```

record(s) selected.

## Scenario: ExampleHMO using row and column access control Secure triggers

Triggers defined on table with row or column access control activated must be secure\_ Alex, the security administrator; discusses how Paul, a database developer at ExampleHMO, can create a secure trigger for his new accounting application:

Alex speaks to the accounting department and learns that an AFTER UPDATE trigger is needed for the PATIENT table. This trigger monitors the history of the ACCT\_BALANCE column.

Alex explains to Paul, who has the necessary privileges to create the trigger; that any trigger defined on row and column access protected table must be marked secure. Paul and Alex review the action of the new trigger and deem it to be secure\_

ExampleHMO\_ACCT\_BALANCE\_TRIGGER monitors the ACCT\_BALANCE column in the PATIENT table: Every time that column is updated, the trigger is fired, and inserts the current account balance details into the ACCT\_HISTORY table:

Paul creates the trigger:

```
CREATE TRIGGER HOSPITAL. NETHMO ACCT BALANCE TRIGGER AFTER UPDATE OF ACCT PATIENT REFERENCING OLD AS 0 NEW AS N FOR EACH ROW MODE DBZSQL SECURED BEGIN ATOMIC (SSN, BEFORE_BALANCE, AFTER_BALANCE, WHEN, BY_WHO) N.AcCT_BALANCE , CURRENT  TIMESTAMP SESSION_USER) END;
```

John, from the accounting department, must the account balance for the patient Bob whose SSN is '123-45-6789'. update

John looks at the data for Bob before running the SELECT ACCT\_BALANCE FROM PATIENT WHERE SSN 123-45-6789 update:

```
ACCT_BALANCE 9.00 record (s) selected_ SELECT FROM ACCT_HISTORY WHERE SSN 123-45-6789
```

SSN BEFORE\_BALANCE AFTER\_BALANCE WHEN BY\_WHO record(s) selected \_ John then runs the UPDATE   PATIENT   SET ACCTBALANCE 0.9 WHERE SSN 123-45-6789 Since there is a trigger defined on the PATIENT table, the fires the trigger Since the trigger is defined SECURED, the completes successfully John looks at the data for Bob after running the SELECT ACCT\_BALANCE FROM PATIENT WHERE SSN 123-45-6789 ACCT\_BALANCE 8.10 record(s) selected\_ SELECT FROM ACCTHISTORY WHERE SSN 123-45-6789 SSN BEFORE BALANCE AFTER BALANCE WHEN BY WHO 123-45-6789 9.00 8.10 2010-10-10   JOHN update: update update update:

record(s) selected \_

## Scenario: ExampleHMO using row and column access control Revoke authority

Alex, as security administrator; is responsible for controlling who can create secure objects. When developers are done creating secure objects, Alex revokes their authority on the database:

Paul, the database developer; is done with development activities. Alex immediately revokes the create authority from Paul: REVOKE CREATE\_SECURE\_OBJECT ON DATABASE FROM USER PAUL;

If Paul must create secure objects in the future, he must speak to Alex to have the create authority granted again.

## Scenario: ExampleBANK using row and column access control

This scenario presents ExampleBANK, a banking institution with a large customer base spanning many branches, as user of row and column access control: ExampleBANK uses row and column access control to ensure that their database policies reflect company requirements for privacy and security, as well as management business objectives.

Organizations that handle client investments, savings, and their personal information, like ExampleBANK, only share information within their organization on a must know basis. This data protection ensures that any sensitive client financial or personal information is shared, viewed, and modified only by employees who are privileged to do so.

## Scenario: ExampleBANK using row and column access control Security policies

ExampleBANK implements security strategy where data access to databases is made available according to certain security policies.

The security policies conform to privacy and data protection regulations at ExampleBANK The first column outlines the policies and the challenges faced by ExampleBANK, the second column outlines the row and column access control (RCAC) feature which addresses the challenge:

| Security challenge                                                                                                                                                                                         | Row and column access control feature which addresses the security challenge                                                                                           |
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Limiting IOW access to only authorized users_ Tellers are only permitted to view client data that belong to their own branch, not all clients of ExampleBANK in the company-wide system_                   | Row permissions can be implemented to control which user can view any particular row.                                                                                  |
| The account number is accessible by customer service representatives only when are the account application: This application is identified through stored procedure ACCOUNTS.ACCTUPDATE. they update using | Column masks can be used to filter or hide sensitive data from customer service representatives if query the data outside of the ACCOUNTS.ACCTUPDATE application: they |

## Scenario: ExampleBANK using row and column access control Database users and roles

In this scenario, a number of different people use ExampleBANK data. These people have different user rights.

ExampleBANK implemented their security strategy to classify the way data is accessed from the database. Internal access to data is based on the separation of duties to users who access the data and their data access privileges. ExampleBANK created the following database roles to separate these duties:

## TELLER

For tellers of branch locations:

## TELEMARKERTER

For telephone marketing and sales people:

## CSR

For customer service representatives:

The following people use ExampleBANK data:

## ZURBIE

A customer service representative at ExampleBANK  She belongs to the CSR role:

## NEWTON

A teller at an ExampleBANK branch: He belongs to the TELLER role:

## PLATO

A telephone marketing and sales person at ExampleBANK He belongs to the TELEMARKETER role:

If you want to try any of the example SQL statements and commands presented in this scenario, create these user IDs with their listed authorities.

The following example SQL statements assume that the users have been created on the system. The SQL statements create each role and SELECT permission to the various tables in the ExampleBANK database to the users: grant

Creating roles and granting authority

CREATE ROLE TELLER;

CREATE ROLE CSR;

CREATE ROLE TELEMARKERTER;

GRANT ROLE TELLER TO USER NEWTON;

GRANT ROLE TELEMARKERTER TO USER PLATO;

GRANT ROLE CSR TO USER ZURBIE;

## Scenario: ExampleBANK using row and column access control Database tables

This scenario focuses on two tables in the ExampleBANK database: the CUSTOMER table and the INTERNAL\_INFO table.

The INTERNAL\_INFO table stores information about employees who work for ExampleBANK  This scenario considers the following columns within the INTERNAL\_INFO table:

## HOME BRANCH

The employee home branch ID.

## EMP ID

The employee ID.

The CUSTOMER table stores individual client information:

The client account number

## NAME

The client name

## INCOME

The client income:

## BRANCH

The client branch ID.

The following example SQL statements create the customer; and INTERNAL\_INFO tables: Authority is granted on the tables and data is inserted:

~~Client table storing information regarding client information CREATE TABLE RCACTSPM. CUSTOMER ACCOUNT VARCHAR(19) \_ NAME VARCHAR(20) , INCOME  INTEGER\_ BRANCH CHAR(1)

) ;

Internal\_info table which stores employee information

CREATE TABLE RCACTSPM. INTERNAL  INFO HOME\_BRANCH CHAR(1) \_

EMP\_ID VARCHAR(10) )

```
Grant authority USER ZURBIE, USER PLATO; Insert data INSERT INTO RCACTSPM. CUSTOMER VALUES ('1111-2222-3333-4444" Alice' 22000_ 'A' ) ; INSERT INTO RCACTSPM. CUSTOMER VALUES 2222-3333-4444-5555 Bob 71000 _ A') ; INSERT INTO RCACTSPM. CUSTOMER VALUES Car] 123000 _ B' ) ; INSERT INTO RCACTSPM. CUSTOMER VALUES 4444-5555-6666-7777 David' 172000 _ INSERT INTO RCACTSPM. INTERNAL INFO VALUES ('A" ) INSERT INTO RCACTSPM. INTERNAL_INFO VALUES ('B ZURBIE
```

```
'C'); INSERT INTO RCACTSPM. INTERNAL_INFO VALUES PLATO ' )
```

## Scenario: ExampleBANK using row and column access control Row permissions

The security administrator at ExampleBANK, starts to restrict data access by row permissions, a part of row and column access control. Row permissions filter the data returned to users by row: using

Tellers are permitted to view client data only from their home branch: Telemarketers and CSRs are permitted to see all ExampleBANK clients in the system, but telemarketers cannot see the full account number

Row permissions restrict or filter rows based on the user who has logged on to the database: At ExampleBANK, the row permissions create horizontal data restriction on the CUSTOMER table:

The security administrator implements the following IOW permissions so that a user in each role is restricted to view result set that are privileged to view: they

CREATE PERMISSION TELLER\_ROW\_ACCESS ON RCACTSPM. CUSTOMER

```
Teller information: ROLE TELLER is a] Iowed to access client data only in their branch _ FOR ROWS WHERE VERIFY_ROLE_FOR_USER(USER, TELLER' ) AND BRANCH (SELECT HOME_BRANCH FROM RCACTSPM. INTERNAL_INFO WHERE EMP ID USER) ENFORCED FOR ALL ACCESS ENABLE; CREATE PERMISSION CSR ROW ACCESS ON RCACTSPM. CUSTOMER CSR and telemarketer information: ROLE TELEMARKETER and CSR are to access a11 client data rows in Examp ]eBANK _ FOR ROWS WHERE VERIFY_ROLE_FOR_USER (USER_ CSR' ) 1 OR VERIFY_ROLE_FOR_USER  (USER, TELEMARKETER' ) ENFORCED FOR ALL ACCESS ENABLE;
```

The security administrator observes that even after creating a rOw permission, all data can still be viewed by the employees. A row permission is not until it is activated on the table for which it was defined. The security administrator must now activate the permission: applied

row access control to implement row permissions ALTER TABLE RCACTSPM. CUSTOMER ACTIVATE ROW ACCESS CONTROL;

## Scenario: ExampleBANK using row and column access control Column masks

The ExampleBANK security administrator; further restricts data access by column masks, a part of row and column access control. Column masks hide data returned to users Or applications by column unless are permitted to view the data. using they

Customer service representatives can see all clients in the ExampleBANK system, but, are not permitted to view full account numbers unless are specific application: they they using

The security administrator implements the following column mask so that a customer service representative is restricted to view result set that are privileged to view: they

```
CREATE MASK ACCOUNT COL MASK ON RCACTSPM. CUSTOMER FOR
```

- Account number information: Role customer service representative (CSR) is allowed to access account number information only when are using the account update application\_ This appl ication is identified through stored procedure ACCOUNTS.ACCTUPDATE. If CSR queries this data outside of this appl ication, the account information is masked and the first 12 digits are rep]aced with X COLUMN ACCOUNT RETURN CASE WHEN (VERIFY\_ROLE\_FOR\_USER (USER, CSR " ) AND ROUTINE\_SPECIFIC\_NAME ACCTUPDATE " AND ROUTINE\_SCHEMA ACCOUNTS AND ROUTINE\_TYPE P') THEN ACCOUNT ELSE XXXX-XXXX-XXXX U SUBSTR(ACCOUNT,16,4) END ENABLE; they

The security administrator observes that even after creating a column mask, the data can still be viewed by all employees. A column mask is not applied until it is activated on the table for which it was defined: The security administrator must now activate the mask:

- ~-Activate co]umn access control to imp]ement co]umn masks

ALTER TABLE RCACTSPM. CUSTOMER ACTIVATE COLUMN ACCESS CONTROL;

## Scenario: ExampleBANK using row and column access control Data queries

With row and column access control, people in different roles can have different result sets from the same database queries. For example, Newton, a teller; cannot see any data of clients outside of their branch:

Newton, Zurbie, and Plato each connect to the database and try the following SQL query:

SELECT FROM RCACTSPM. CUSTOMER;

Results of the query vary according to who runs the query: The IOw and column access control rules created by the security administrator are on these queries. applied

Here is the result set Newton sees:

| ACCOUNT                   |   NAME INCOME | BRANCH   |
|---------------------------|---------------|----------|
| XXXX-XXXX-XXXX-4444 Alice |         22000 |          |
| XXXX-XXXX-XXXX-5555 Bob   |         71000 | A        |

2 record(s) selected.

Newton, a teller at branch A, can see only ExampleBANK clients that belong to that branch: being

Here is the result set Zurbie sees:

| ACCOUNT                  | NAME   |   INCOME | BRANCH   |
|--------------------------|--------|----------|----------|
| XXXX-XXXX-XXXX-4444      | Alice  |    22000 |          |
| XXXX-XXXX-XXXX-5555      | Bob    |    71000 |          |
| XXXX-XXXX-XXXX-6666 Car] |        |   123000 | B        |
| XXXX-XXXX-XXXX-7777      | David  |   172000 |          |

record (s) selected\_

Zurbie, being a customer service representative, can see all ExampleBANK clients in the system, but not their full account number unless he uses the ACCOUNTS.ACCTUPDATE application: Since this query was issued outside of ACCOUNTS.ACCTUPDATE, part of that number is masked.

Here is the result set Plato sees:

| ACCOUNT                  | NAME   |   INCOME | BRANCH   |
|--------------------------|--------|----------|----------|
| XXXX-XXXX-XXXX-4444      | Alice  |    22000 |          |
| XXXX-XXXX-XXXX-5555      | Bob    |    71000 |          |
| XXXX-XXXX-XXXX-6666 Car] |        |   123000 | B        |
| XXXX-XXXX-XXXX-7777      | David  |   172000 |          |

record(s) selected \_

Plato, being a telemarketer; can see all ExampleBANK clients in the system.

## Chapter 5. Label-based access control (LBAC)

Label-based access control (LBAC) greatly increases the control you have over who can access data. LBAC lets you decide exactly who has write access and who has read access to individual rows and individual columns. your

## What LBAC does

The LBAC capability is very configurable and can be tailored to match your particular security environment: All LBAC configuration is performed by a security administrator , which is a user that has been granted the SECADM authority

A security administrator configures the LBAC system by creating security label components. A\_ security label component is database object that represents criterion you want to use to determine if a user should access piece of data. example, the criterion can be whether the user is in a certain department, or whether are working on a certain project: A security policy describes the criteria that will be used to decide who has access to what data: A security policy contains one r more security label components. Only one security policy can be used to any one table but different tables can be protected by different security policies: For they protect

After creating a security policy, a security administrator creates objects, called security labels that are part of that policy: Security labels contain security label components. Exactly what makes up a security label is determined by the security policy and can be configured to represent the criteria that your organization uses to decide who should have access to particular data items. If you decide, for example, that you want to look at a person's position in the company and what projects are part of to decide what data should see, then you can configure your security labels so that each label can include that information: LBAC is flexible enough to let you set up anything from very complicated criteria, to a very simple system where each label represents either a 'high' or 'low" level of trust. they they

Once created, a security label can be associated with individual columns and rows in table to protect the data held there: Data that is protected by security label is called protected data. A security administrator allows users access to protected data by granting them security labels. When user tries to access protected data, that user's security label is compared to the security label protecting the data. The protecting label will block some security labels and not block others.

A user; a role, Or a group is allowed to hold security labels for multiple security policies at once For any given security policy, however; a use, role, or a group can hold at most one label for read access and one label for write access\_

A security administrator can also grant exemptions to users. An exemption allows you to access protected data that your security labels might otherwise prevent you from accessing: Together security labels and exemptions are called your LBAC credentials. your

If you try to access protected column that your LBAC credentials do not allow you to access then the access will fail and you will get an error message.

If you try to read protected rows that your LBAC credentials do not allow you to read then Db2 acts as if those rows do not exist: Those rows cannot be selected as Even the aggregate functions ignore rows that your LBAC credentials do not allow rows that you have read access to.

## Views and LBAC

You can define a view on protected table the same way you can define one on non-protected table: When such a view is accessed the LBAC protection on the underlying table is enforced. The LBAC credentials used are those of the session authorization ID. Two users accessing the same view might see different rows depending on their LBAC credentials.

## Referential integrity constraints and LBAC

The following rules how LBAC rules are enforced in the presence of referential integrity constraints: explain

- Rule 2: The LBAC read access rules are NOT applied for internally generated scans of parent tables
- Rule 1: The LBAC read access rules are NOT for internally generated scans of child tables. This is to avoid children. applied having orphan
- Rule 3: The LBAC write rules are when a CASCADE operation is performed on child tables: For example, If a user deletes a parent; but cannot delete any of the children because of an LBAC write rule violation, then the delete should be rolled-back and an error raised. applied

## Storage overhead when using LBAC

When you use LBAC to protect a table at the row level, the additional storage cost is the cost of the row security label column: This cost depends on the type of security label chosen: For example, if you create security policy with two components to a table, a security label from that security policy will occupy 16 bytes (8 bytes for each component): Because the row security label column is treated as a not nullable VARCHAR column; the total cost in this case would be 20 bytes per rOW: In general, the total cost per IOw is (N*8 + 4) bytes where N is the number of components in the security policy protecting the table: protect

When you use LBAC to protect a table at the column level, the column security label is meta-data (that is, it is stored together with the column's meta-data in the SYSCOLUMNS table). This meta-data is simply the ID of the security label protecting the column: The user table does not incur any storage overhead in this case\_ catalog

## What LBAC does not do

- LBAC will never allow access to data that is forbidden by discretionary access control.

Example: If you do not have permission to read from a table then you will not be allowed to read data from that table--even the rows and columns to which LBAC would otherwise allow you access.

- Your LBAC credentials only limit your access to protected data. have no effect on your access to unprotected data. They

- LBAC credentials are not checked when you drop table or a database, even if the table or database contains protected data.
- LBAC credentials are not checked when you back up your data: If you can run a backup on LBAC protection on the data. Also, data on the backup media is not protected by LBAC. Only data in the database is protected:
- LBAC cannot be used to protect any of the following types of tables:
- A staging table
- table that a staging table depends on
- A typed table
- LBAC protection cannot be applied to nickname.

## LBAC tutorial

tutorial leading you through the basics of using LBAC is available online at http: , [wwwibm.com developerworks/ data and is called DB2 Label-Based Access Control, a practical guide:

## LBAC security policies

The security administrator uses security policy to define criteria that determine who has write access and who has read access to individual rows and individual columns of tables:

A security policy includes this information:

- What security label components are used in the security labels that are part of the policy
- What rules are when comparing those security label components used
- What additional security labels and exemptions are to be considered when enforcing access to data protected by the security policy: For example, the option to consider or not to consider security labels granted to roles and groups is controlled through the security policy
- Which of certain optional behaviors are used when accessing data protected by the policy

Every protected table must have one and only one security policy associated with it: Rows and columns in that table can only be protected with security labels that are part of that security policy and all access of protected data follows the rules of that policy: You can have multiple security policies in a single database but you cannot have more than one security policy protecting any given table:

## Creating a security policy

You must be a security administrator to create a security policy You create security policy with the SQL statement CREATE SECURITY POLICY The security label components listed in security policy must be created before the CREATE SECURITY POLICY statement is executed. The order in which the components are listed when a security policy is created does not indicate any sort of precedence or other relationship among the components but it is important to know the order when creating security labels with built-in functions like SECLABEL.

From the security policy you have created, you can create security labels to protect your data.

## Altering a security policy

A security administrator can use the ALTER SECURITY POLICY statement to modify a security policy

## Dropping a security policy

You must be a security administrator to a security policy You security policy the SQL statement DROP drop drop using

You cannot a security policy if it is associated with (added to) any table: drop

## LBAC security label components overview

A security label component is database object that is part of label-based access control (LBAC) You use security label components to model your organization's security structure

A security label component can represent any criteria that you might use to decide if a user should have access to a given piece of data. Typical examples of such criteria include:

- How well trusted the user is
- What department the user is in
- Whether the user is involved in a particular project

Example: If you want the department that a user is in to affect which data can access, you could create component named dept and define elements for that component that name the various departments in your company You would then include the component dept in your security policy they

An element of a security label component is one particular "setting" that is allowed for that component:

Example: A security label component that represents a level of trust might have the four elements: Secret, Secret, Classified, and Unclassified. Top

## Creating a security label component

You must be a security administrator to create a security label component: You create security label components with the SQL statement CREATE SECURITY

When you create security label component you must provide:

- A name for the component
- What type of component it is (ARRAY, TREE, or SET)
- A complete list of allowed elements
- For types ARRAY and TREE you must describe how each element fits into the structure of the component

After creating your security label components, you can create a security policy based on these components. From this security policy, YOu can create security labels to your data: protect

## Types of components

- TREE: Each element represents a node in tree structure
- ARRAY: Each element represents a on linear scale point
- SET: Each element represents one member of a set

The types are used to model the different ways in which elements can relate to each other: For example, if you are creating component to describe one or more departments in company you would probably want to use a component type of TREE because most business structures are in the form of a tree: If are creating component to represent the level of trust that a person you would probably use a component of type ARRAY because for any two levels of trust, one will always be higher than the other: you has,

The details of each type, including detailed descriptions of the relationships that the elements can have with each other; are described in their own section.

## Altering security label components

The security administrator can use the ALTER SECURITY LABEL COMPONENT statement to modify a security label component

## Dropping a security label component

You must be a security administrator to security label component: You security label component with the SQL statement DROP drop drop

## LBAC security label component type: SET

SET is one type of security label component that can be used in a label-based access control (LBAC) security policy

Components of type SET are unordered lists of elements. The only comparison that can be made for elements of this type of component is whether or not a given element is in the list:

## LBAC security label component type: ARRAY

ARRAY is one type of security label component

In the ARRAY type of component the order in which the elements are listed when the component is created defines a scale with the first element listed the highest value and the last the lowest: being being

Example: If the component mycomp is defined in this way:

CREATE SECURITY LABEL COMPONENT mycomp ARRAY Secret Secret Emp]oyee" Public' Top

Then the elements are treated as if are organized in a structure like this: they

<!-- image -->

In a component of type ARRAY, the elements can have these sorts of relationships to each other:

Element A is higher than element B if element A is listed earlier in the ARRAY clause than element B.

## Lower than

Element A is lower than element B if element A is listed later in the ARRAY clause than element B

## LBAC security label component type: TREE

TREE is one type of security label component that can be used in a label-based access control (LBAC) security policy:

In the TREE type of component the elements are treated as if are arranged in tree structure. When you specify an element that is part of a component of type TREE you must also specify which other element it is under The one exception is the first element which must be specified as the ROOT of the tree This allows you to organize the elements in a tree structure\_ they being

Example: If the component mycomp is defined this way:

CREATE SECURITY LABEL COMPONENT   mycomp

TREE

Corporate"

Publishing'

UNDER Corporate

Software

UNDER

Corporate

Development

UNDER

Software

Sales

UNDER Software

Support

UNDER Software

Business Sales UNDER Sales

Home Sales UNDER Sales

Then the elements are treated as if are organized in a tree structure like this: they

<!-- image -->

In component of type TREE, the elements can have these types of relationships to each other:

Parent Element A is a parent of element B if element B is UNDER element A

Example: This diagram shows the parent of the Business Sales element:

<!-- image -->

<!-- image -->

## Sibling

Two elements are of each other if have the same parent: siblings they

Example: This diagram shows the siblings of the Development element:

<!-- image -->

## Ancestor

Element A is an ancestor of element B if it is the parent of B, Or if it is the parent of the parent of B, and s0 on. The root element is an ancestor of all other elements in the tree

<!-- image -->

## Descendent

Element A is a descendent of element B if it is the child of B, or if it is the child of a child of B, and so on.

Example: This diagram shows the descendents of the Software element:

<!-- image -->

## LBAC security labels

In label-based access control (LBAC) a security label is a database object that describes certain set of security criteria. Security labels are applied to data in order to protect the data: are granted to users to allow them to access protected data. They

When a user tries to access protected data, their security label is compared to the security label that is protecting the data. The protecting security label will block some security labels and not block others If a user's security label is blocked then the user cannot access the data\_

security label is part of exactly one security policy and includes one value for each component in that security policy: A value in the context of a security label component is a list of zero or more of the elements allowed by that component: Every

Values for ARRAY type components can contain zero r one element, values for other types can have zero or more elements. A value that does not include any elements is called an empty value.

Example: If a TREE type component has the three elements Human Resources, Sales, and Shipping then these are some of the valid values for that component:

- Human Resources (or any of the elements by itself)
- Human Resources, Shipping (or any other combination of the elements as as no element is included more than once) long
- An empty value

Whether a particular security label will block another is determined by the values of each component in the labels and the LBAC rule set that is specified in the security policy of the table: The details of how the comparison is made are given in the topic that discusses how LBAC security labels are compared.

When security labels are converted to a text string use the format described in the topic that discusses the format for security label values they

## Creating security labels

You must be a security administrator to create a security label. You create a security label with the SQL statement CREATE SECURITY LABEL. When you create security label you provide:

- name for the label
- The security policy that the label is part of
- Values for one or more of the components included in the security policy

components for which a value is not specified is assumed to have an empty value: A security label must have at least one non-empty value: Any

## Altering security labels

Security labels cannot be altered. The only way to change a security label is to drop it and re-create it: However; the components of a security label can be modified by a security administrator (using the ALTER SECURITY LABEL COMPONENT statement).

## Dropping security labels

You must be a security administrator to a security label. You a security label with the SQL statement DROP You cannot security label that is used to protect data anywhere in the database or that is currently held one or more users\_ drop drop drop being by

## Granting security labels

You must be a security administrator to grant a security label to a user; group, or role You grant a security label with the SQL statement GRANT SECURITY LABEL. When you grant a security label can grant it for read access, for write access, or for both read and write access. A user; group, Or a role cannot hold more than one security label from the same security policy for the same type of access. you

## Revoking security labels

You must be a security administrator to revoke a security label from a user; group, or role: To revoke a security label, use the SQL statement REVOKE SECURITY LABEL\_

## Data types compatible with security labels

Security labels have a data type of SYSPROC DBZSECURITYLABEL. Data conversion is supported between SYSPROC DBZSECURITYLABEL and VARCHAR(128) FOR BIT DATA.

## Determining the security labels held by users

You can use the following query to determine the security labels that are held by users:

SELECT A.grantee B.secpol icyname c.seclabelname FROM syscat.securitylabelaccess A, syscat.securitypol icies B, syscat.securitylabels WHERE A.sec]abel id C.sec]abelid and B.secpol icyid C.secpol icyid

## Format for security label values

Sometimes the values in security label are represented in the form of a character for example when the built-in function SECLABEL. string, using

When the values in a security label are represented as are in the following format: string, they

- The values of the components are listed from left to right in the same order that the components are listed in the CREATE SECURITY POLICY statement for the security policy
- An element is represented by the name of that element
- Elements for different components are separated by a colon
- If more than one element are given for the same component the elements are enclosed in parentheses (()) and are separated by a comma
- Empty values are represented by a set of empty parentheses

Example: A security label is part of a security policy that has these three components in this order: Level, Department, and Projects. The security label has these values:

Table 10. Example values for a security label

| Component   | Values                          |
|-------------|---------------------------------|
| Level       | Secret                          |
| Department  | Empty value                     |
| Projects    | Epsilon 37 Megaphone Cloverleaf |

This security label values look like this as Secret: () : (Epsilon 37,Megaphone,Cloverleaf) string:

## How LBAC security labels are compared

When you to access data protected by label-based access control (LBAC), your LBAC credentials are compared to one or more security labels to see if the access is blocked. Your LBAC credentials are any security labels you hold plus any exemptions that you hold: try

There are only two types of comparison that can be made: Your LBAC credentials can be compared to a Single security label for read access or your LBAC credentials compared to a single security label for write access Updating and deleting are treated as read followed by a write. When an operation requires multiple comparisons to be made, each is made separately: being

## Which of your security labels is used

Even though you might hold multiple security labels only one is compared to the protecting security label. The label used is the one that meets these criteria:

- It is part of the security policy that is protecting the table accessed. being
- It was granted for the type of access (read or write)

If you do not have a security label that meets these criteria then a default security label is assumed that has empty values for all components.

## How the comparison is made

Security labels are compared component by component: If a security label does not have a value for one of the components then an empty value is assumed. each component is examined, the appropriate rules of the LBAC rule set are used to decide if the elements in your value for that component should be blocked by the elements in the value for the same component in the protecting label. If any of your values are blocked then your LBAC credentials are blocked by the protecting security label. As

The LBAC rule set used in the comparison is designated in the security policy: To find out what the rules are and when each one is used, see the description of that rule set

## How exemptions affect comparisons

If you hold an exemption for the rule that is being used to compare two values then that comparison is not done and the protecting value is assumed not to block the value in your security label.

Example: The LBAC rule set is DBZLBACRULES and the security policy has two components. One component is of type ARRAY and the other is of type TREE The user has been granted an exemption on the rule DBZLBACREADTREE, which is the rule used for read access when comparing values of components of type TREE. If the user attempts to read protected data then whatever value the user has for the TREE component, even if it is an empty value, will not block access because that rule is not Whether the user can read the data depends entirely on the values of the ARRAY component of the labels. used.

## LBAC rule sets overview

An LBAC rule set is a predefined set of rules that are used when comparing security labels. When the values of a two security labels are compared, one or more of the rules in the rule set will be used to determine if one value blocks another being

Each LBAC rule set is identified by a unique name: When you create security policy you must specify the LBAC rule set that will be used with that policy comparison of security labels that are part of that policy will use that LBAC rule set\_ Any

Each rule in a rule set is also identified by a unique name You use the name of a rule when you are granting an exemption on that rule:

How many rules are in a set and when each rule is used can vary from rule set to rule set

There is currently only one supported LBAC rule set: The name of that rule set is DBZLBACRULES.

## LBAC rule set: DBZLBACRULES

The DBZLBACRULES LBAC rule set provides a traditional set of rules for comparing the values of security label components It protects from both write-up and write-down.

## What are write-up and write down?

Write-up and write-down apply only to components of type ARRAY and only to write access. Write up occurs when the value protecting data that you are writing to is higher than your value. Write-down is when the value protecting the data is lower than yours. By default neither write-up nor write-down is allowed, meaning that you can only write data that is protected by the same value that you have:

When comparing two values for the same component, which rules are used depends on the type of the component (ARRAY, SET, or TREE) and what type of access is attempted (read, or write). This table the rules, tells when each is used, and describes how the rule determines if access is blocked. being lists

Table 11. Summary of the DBZLBACRULES rules

| Rule name         | Used to compare values of this type of component   | Used for this type of access   | Access is blocked when this condition is met                                             |
|-------------------|----------------------------------------------------|--------------------------------|------------------------------------------------------------------------------------------|
| DBZLBACREADARRAY  | ARRAY                                              | Read                           | The user's value is lower than the protecting value                                      |
| DBZLBACREADSET    | SET                                                | Read                           | There are one or more protecting values that the user does not hold:                     |
| DBZLBACREADTREE   | TREE                                               | Read                           | None of the user's values is to or an ancestor of one of the protecting values_ equal    |
| DBZLBACWRITEARRAY | ARRAY                                              | Write                          | The user's value is higher than the protecting value or lower than the protecting value_ |

Table 11. Summary of the DBZLBACRULES rules (continued)

| Rule name        | Used to compare values of this type of component   | Used for this type of access   | Access is blocked when this condition is met                                          |
|------------------|----------------------------------------------------|--------------------------------|---------------------------------------------------------------------------------------|
| DBZLBACWRITESET  | SET                                                | Write                          | There are one or more protecting values that the user does not hold:                  |
| DBZLBACWRITETREE | TREE                                               | Write                          | None of the user's values is equal to or an ancestor of one of the protecting values. |

## Note:

- 1. The DBZLBACWRITEARRAY rule can be thought of as being two different rules combined. One prevents writing to data that is higher than your level (write-up) and the other prevents writing to data that is lower than your level (write-down). When granting an exemption to this rule you can exempt the user from either of these rules or from both:

## How the rules handle empty values

All rules treat empty values the same way: An empty value blocks no other values and is blocked by any non-empty value:

## DBZLBACREADSET and DBZLBACWRITESET examples

user trying to read or trying to write protected data. assume that the values are for component of type SET that has these elements: one two three four They

Table 12. Examples of applying the DBZLBACREADSET and DBZLBACWRITESET rules:

| User's value      | Protecting value   | Access blocked?                                                                     |
|-------------------|--------------------|-------------------------------------------------------------------------------------|
| 'one'             | one                | Not blocked_ The values are the same_                                               |
| '(one,two,three)' | one                | Not blocked_ The user's value contains the element one'.                            |
| '(one,two)        | (one,two,four)'    | Blocked_ The element 'four' is in the protecting value but not in the user's value_ |
|                   | one                | Blocked. An empty value is blocked by any non-empty value:                          |
| one               |                    | Not blocked. No value is blocked by an empty value.                                 |
|                   |                    | Not blocked. No value is blocked by an empty value:                                 |

## DBZLBACREADTREE and DBZLBACWRITETREE

These examples are valid for both read access and write access assume that the values are for a component of type TREE that was defined in this way: CREATE SECURITY LABEL COMPONENT mycomp TREE They

Corporate'

ROOT ,

```
Pub]ishing' UNDER Corporate Software UNDER Corporate Development UNDER Software Sales UNDER Software Support UNDER Software Business Sales UNDER Sales Home Sales UNDER Sales
```

This means the elements are in this arrangement:

<!-- image -->

|                          | Protecting value             | Access blocked?                                                                                                                        |
|--------------------------|------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|
| '(Support,Sales)'        | 'Development'                | Blocked. The element 'Development' is not one of the user's values and neither 'Support' nor 'Sales' is an ancestor of 'Development' . |
| '(Development,Software)' | (Business Sales Publishing)' | Not blocked. The element 'Software' is an ancestor of 'Business Sales' _                                                               |
| (Publishing,Sales)'      | (Publishing Support)'        | Not blocked. The element 'Publishing' is in both sets of values.                                                                       |
| 'Corporate'              | 'Development'                | Not blocked. The root value is an ancestor of all other values:                                                                        |
|                          | 'Sales                       | Blocked. An empty value is blocked by any non-empty value_                                                                             |
| 'Home Sales'             |                              | Not blocked. No value is blocked by an empty value:                                                                                    |
|                          |                              | Not blocked: No value is blocked by an empty value:                                                                                    |

## DBZLBACREADARRAY examples

These examples are for read access only assume that the values are for a component of type ARRAY that includes these elements in this arrangement: They

<!-- image -->

Lowest

Table 14. Examples of applying the DBZLBACREADARRAY rule

| User's value   | Protecting value   | Read access blocked?                                                     |
|----------------|--------------------|--------------------------------------------------------------------------|
| 'Secret'       | 'Employee'         | Not blocked. The element 'Secret' is higher than the element 'Employee'. |
| 'Secret'       | 'Secret            | Not blocked. The values are the same:                                    |
| 'Secret'       | Secret' Top        | Blocked. The element Secret' is higher than the element 'Secret'_ Top    |
|                | 'Public'           | Blocked: An empty value is blocked by any non-empty value                |
| 'Public'       |                    | Not blocked. No value is blocked by an empty value:                      |
|                |                    | Not blocked. No value is blocked by an empty value:                      |

## DBZLBACWRITEARRAY examples

These examples are for write access only: assume that the values are for a component of type ARRAY that includes these elements in this arrangement: They

<!-- image -->

Lowest

Table 15. Examples of applying the DBZLBACWRITEARRAY rule

| User's value   | Protecting value   | Write access blocked?                                                 |
|----------------|--------------------|-----------------------------------------------------------------------|
| 'Secret'       | 'Employee'         | Blocked: The element 'Employee' is lower than the element 'Secret'_   |
| 'Secret'       | 'Secret            | Not blocked. The values are the same_                                 |
| 'Secret'       | Top Secret'        | Blocked_ The element Secret' is higher than the element 'Secret' 'Top |
|                | Public'            | Blocked. An empty value is blocked by any non-empty value:            |
| Public'        |                    | Not blocked. No value is blocked by an empty value.                   |
|                |                    | Not blocked. No value is blocked by an empty value                    |

## LBAC rule exemptions

When you hold an LBAC rule exemption on a particular rule of a particular security policy, that rule is not enforced when you try to access data protected by that security policy:

An exemption has no effect when comparing security labels of security policy other than the one for which it was granted. any

## Example:

There are two tables: T1 and T2. Tl is protected by security policy Pl and T2 is protected by security policy P2. Both security policies have one component: The component of each is of type ARRAY Tl and T2 each contain only one row of data. The security label that you hold for read access under security policy P1 does not allow access to the row in Tl. The security label that you hold for read access under security policy P2 does not allow you read access to the row in T2. you

Now you are granted an exemption on DBZLBACREADARRAY under P1. You can now read the row from Tl but not the row from T2 because T2 is protected by a different security policy and you do not hold an exemption to the DBZLBACREADARRAY rule in that policy:

You can hold multiple exemptions If you hold an exemption to every rule used by security policy then you will have complete access to all data protected by that security policy

## Granting LBAC rule exemptions

You must be a security administrator to an LBAC rule exemption. To grant an LBAC rule exemption, use the SQL statement GRANT EXEMPTION ON RULE grant

When you an LBAC rule exemption you provide this information: grant

- The rule or rules that the exemption is for
- The security policy that the exemption is for
- The user; group, Or role to which you are granting the exemption

Important: LBAC rule exemptions provide very powerful access. Do not grant them without careful consideration.

## Revoking LBAC rule exemptions

You must be a security administrator to revoke an LBAC rule exemption. To revoke an LBAC rule exemption, use the SQL statement REVOKE EXEMPTION ON RULE.

## Determining the rule exemptions held by users

You can use the following query to determine the rule exemptions that are held by users:

SELECT A.grantee, A.accessrulename B. secpo] icyname FROM syscat.securitypol icyexemptions WHERE A.secpol icyid B\_ secpol icyid

## Built-in functions for managing LBAC security labels

The built-in functions SECLABEL, SECLABEL\_BY\_NAME, and SECLABEL\_TO\_CHAR are provided for managing label-based access control (LBAC) security labels.

Each is described briefly here and in detail in the SQL Reference

## SECLABEL

This built-in function is used to build a security label by specifying a security policy and values for each of the components in the label. The returned value has data type of DBZSECURITYLABEL and is a security label that is part of the indicated security policy and has the indicated values for the components. It is not necessary that a security label with the indicated values already exists\_

Example: Table Tl has two columns, the first has a data type of DBZSECURITYLABEL and the second has data type of INTEGER Tl is protected by security policy Pl, which has three security label components: level, departments, and groups. If UNCLASSIFIED is an element of the component level, ALPHA and SIGMA are both elements of the component departments, and G2 is an element of the component groups then a security label could be inserted like this:

VALUES SECLABEL ( P1 UNCLASSIFIED: (ALPHA,SIGMA) :62 ) , 22 )

## SECLABEL BY\_NAME

This built-in function accepts the name of a security policy and the name of a security label that is part of that security policy: It then returns the indicated security label as DBZSECURITYLABEL. You must use this function when inserting an existing security label into a column that has a data type of DBZSECURITYLABEL.

Example: Table Tl has two columns, the first has a data type of DBZSECURITYLABEL and the second has a data type of INTEGER The security label named Ll is part of security policy P1. This SQL inserts the security label: VALUES SECLABEL\_BY\_NAME 'Ll ), 22

This SQL statement does not work:

VALUES Pl.Ll \_ 22 )

## SECLABEL\_TO\_CHAR

This built-in function returns string representation of the values that make up a security label.

Example: Column C1 in table Tl has a data type of DBZSECURITYLABEL. Tl is protected by security policy P1, which has three security label components: level, departments, and groups. There is one row in Tl and the value in column C1 that has these elements for each of the components:

| Component   | Elements        |
|-------------|-----------------|
| level       | SECRET          |
| departments | DELTA and SIGMA |
| groups      | G3              |

user that has LBAC credentials that allow reading the IOw executes this SQL statement:

SELECT SECLABEL\_TO\_CHAR( 'P1' C1 )

The output looks like this: C1

SECRET: (DELTA,SIGMA) 63

## Protection of data using LBAC

Label-based access control (LBAC) can be used to protect rows of data, columns of data, or both: Data in a table can only be protected by security labels that are part of the security policy protecting the table: Data protection, including adding a security policy, can be done when creating the table or later by altering the table:

You can add a security policy to a table and protect data in that table as part of the same CREATE TABLE or ALTER TABLE statement:

As a general rule you are not allowed to data in such a way that your current LBAC credentials do not allow you to write to that data: protect

## Adding a security policy to a table

You can add a security policy to a table when you create the table by using the SECURITY POLICY clause of the CREATE TABLE statement. You can add security policy to an existing table by using the ADD SECURITY POLICY clause of the ALTER TABLE statement: You do not need to have SECADM authority or have LBAC credentials to add a security policy to a table:

Adding a security policy to a table does not activate row or column protection by itself. It simply associates a security policy with the table which is to be when row or column protection is activated. Refer to the "Protecting rows and "Protecting columns" sections below for more information on how to activate row and column protection: The value of the PROTECTIONGRANULARITY column in the SYSCATTABLES catalog view indicates what level of LBAC protection is currently active for table: used

Security policies cannot be added to types of tables that cannot be protected by LBAC. See the overview of LBAC for list of table types that cannot be protected by LBAC:

No more than one security policy can be added to any table:

## Protecting rows

You can allow protected rows in new table by including column with data type of DBZSECURITYLABEL when you create the table: The CREATE TABLE statement must also add a security policy to the table: You do not need to have SECADM authority or have any LBAC credentials to create such a table:

You can allow protected rows in an existing table by column that has data type of DBZSECURITYLABEL. To add such a column, either the table must already be protected by a security policy or the ALTER TABLE statement that adds the column must also add a security policy to the table: When the column is added, the security label you hold write access is used to protect all existing rows. If you do not hold a security label for write access that is part of the security policy protecting the table then you cannot add column that has a data type of DBZSECURITYLABEL. adding for

After a table has a column of type DBZSECURITYLABEL you protect each new row of data by storing security label in that column: The details of how this works are described in the topics about inserting and updating LBAC protected data. You must have LBAC credentials to insert rows into a table that has a column of type DBZSECURITYLABEL.

A column that has a data type of DBZSECURITYLABEL cannot be dropped and cannot be changed to any other data type:

## Protecting columns

You can protect column when you create the table by using the SECURED WITH column option of the CREATE TABLE statement: You can add protection to an existing column by using the SECURED WITH option in an ALTER TABLE statement:

To protect a column with a particular security label you must have LBAC credentials that allow you to write to data protected by that security label. You do not have to have SECADM authority:

Columns can only be protected by security labels that are part of the security policy protecting the table: You cannot protect columns in a table that has no security policy You are allowed to table with security policy and protect one or more columns in the same statement: protect

You can protect any number of the columns in a table but a column can be protected by no more than one security label.

## Reading of LBAC protected data

When you try to read data protected by label-based access control (LBAC), your LBAC credentials for reading are compared to the security label that is protecting the data: If the protecting label does not block your credentials you are allowed to read the data.

In the case of a protected column the protecting security label is defined in the schema of the table The protecting security label for that column is the same for every row in the table: In the case of a protected row the protecting security label is stored in the row in a column of type DBZSECURITYLABEL. It can be different for every row in the table:

The details of how your LBAC credentials are compared to security label are given in the topic about how LBAC security labels are compared.

## Reading protected columns

When you try to read from a protected column your LBAC credentials are compared with the security label protecting the column: Based on this comparison access will either be blocked or allowed: If access is blocked then an error is returned and the statement fails. Otherwise, the statement proceeds as usual.

Trying to read column that your LBAC credentials do not allow you to read, causes the entire statement to fail:

## Example:

Table T1 has two protected columns. The column C1 is protected by the security label Ll. The column C2 is protected by the security label L2.

Assume that user Jyoti has LBAC credentials for reading that allow access to security label Ll but not to LZ. If Jyoti issues the following SQL statement, the statement will fail:

SELECT FROM Tl

The statement fails because column C2 is included in the SELECT clause as part of the wildcard

If Jyoti issues the following SQL statement it will succeed: SELECT C1 FROM Tl

The only protected column in the SELECT clause is C1, and Jyoti's LBAC credentials allow her to read that column:

## Reading protected rows

If you do not have LBAC credentials that allow you to read a row it is as if that row does not exist for you:

When you read protected rows, only those rows to which your LBAC credentials allow read access are returned. This is true even if the column of type DBZSECURITYLABEL is not part of the SELECT clause:

Depending on their LBAC credentials, different users might see different rows in a table that has protected rows\_ example, two users executing the statement SELECT COUNT (*) FROM Tl may different results if Tl has protected rows and the users have different LBAC credentials. For get

Your LBAC credentials affect not only SELECT statements but also other SQL statements like UPDATE, and DELETE. If you do not have LBAC credentials that allow you to read a row, you cannot affect that row:

## Example:

Table T1 has these rows and columns. The column ROWSECURITYLABEL has a data type of DBZSECURITYLABEL.

Table 16. Example values in table T1

| LASTNAME   | DEPTNO   | ROWSECURITYLABEL   |
|------------|----------|--------------------|
| Rjaibi     | 55       | L2                 |
| Miller     |          | Ll                 |
| Fielding   |          | L3                 |
| Bird       | 55       | L2                 |

Assume that user Dan has LBAC credentials that allow him to read data that is protected by security label Ll but not data protected by L2 or L3.

Dan issues the following SQL statement: SELECT

The SELECT statement returns only the row for Miller: No error messages or warning are returned.

Dan's view of table Tl is this:

Table 17. Example values in view of table T1

| LASTNAME   | DEPTNO   | ROWSECURITYLABEL   |
|------------|----------|--------------------|
| Miller     |          | Ll                 |

The rows for Rjaibi, Fielding, and Bird are not returned because read access is blocked by their security labels. Dan cannot delete or these rows\_ will also not be included in any aggregate functions. For Dan it is as if those rows do not exist: update They

Dan issues this SQL statement: FROM

The statement returns a value of 1 because only the row for Miller can be read by the user Dan:

## Reading protected rows that contain protected columns

Column access is checked before row access. If your LBAC credentials for read access are blocked by the security label protecting one of the columns you are selecting then the entire statement fails. If not, the statement continues and only the rows protected by security labels to which your LBAC credentials allow read access are returned.

## Example

The column LASTNAME of table Tl is protected with the security label L1. The column DEPTNO is protected with security label L2. The column ROWSECURITYLABEL has a data type of DBZSECURITYLABEL. Tl, including the data, looks like this:

Table 18. Example values in table T1

| LASTNAME Protected by Ll   |   DEPTNO Protected by L2 | ROWSECURITYLABEL   |
|----------------------------|--------------------------|--------------------|
| Rjaibi                     |                       55 | L2                 |
| Miller                     |                       77 | Ll                 |
| Fielding                   |                       11 | L3                 |

Assume that user Sakari has LBAC credentials that allow reading data protected by security label L1 but not L2 o L3.

Sakari issues this SQL statement:

SELECT FROM T1

The statement fails because the SELECT clause uses the wildcard which includes the column DEPTNO. The column DEPTNO is protected by security label L2, which Sakari's LBAC credentials do not allow her to read:

Sakari next issues this SQL statement: SELECT LASTNAME , ROWSECURITYLABEL FROM Tl

The select clause does not include any columns that Sakari is not able to read so the statement continues. Only one row is returned, however; because each of the other rows is protected by security label L2 or L3.

Table 19. Example output from query on table T1

| LASTNAME   | ROWSECURITYLABEL   |
|------------|--------------------|
| Miller     | Ll                 |

## Inserting of LBAC protected data

When you to insert data into a protected column, or to insert a new rOw into a table with protected rows, your LBAC credentials determine how that INSERT statement is handled: try

## Inserting to protected columns

When you try to insert data into a protected column LBAC credentials for writing are compared with the security label protecting that column. Based on this comparison access will either be blocked or allowed. your

The details of how two security labels are compared are given in the topic about how LBAC security labels are compared.

If access is allowed, the statement proceeds as usual. If access is blocked, then the insert fails and an error is returned.

If you are inserting a row but do not provide a value for a protected column then default value is inserted if one is available: This happens even if your LBAC credentials do not allow write access to that column: A default is available in the following cases:

- The column was declared with the WITH DEFAULT option
- The column is a generated column
- The column has a default value that is given through BEFORE trigger
- The column has a data type of DBZSECURITYLABEL, in which case security label that you hold for write access is the default value

## Inserting to protected rows

When you insert a new row into a table with protected rows, you do not have to provide a value for the column that is of type DBZSECURITYLABEL. If you do not provide value for that column, the column is automatically populated with the security label you have been granted for write access. If you have not been granted security label for write access, an error is returned and the insert fails.

By using built-in functions like SECLABEL, YOU can explicitly provide a security label to be inserted in column of type DBZSECURITYLABEL. The provided security label is only used, however; if your LBAC credentials would allow you to write to data that is protected with the security label you are trying to insert

If you provide a security label that you would not be able to write, then what happens depends on the security policy that is protecting the table If the security policy has the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL option, then the insert fails and an error is returned. If the security policy does not have the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL or if it instead has the OVERRIDE NOT AUTHORIZED WRITE SECURITY LABEL option, then the security label you provide is ignored and if you hold security label for write access, it is used instead. If you do not hold a security label for write access, an error is returned: option

## Examples

Table Tl is protected by a security policy named P1 that was created without the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL Table T1 has two columns but no rows. The columns are LASTNAME and LABEL\_ The column LABEL has a data type of DBZSECURITYLABEL. option.

User Joe holds a security label L2 for write access. Assume that the security label L2 allows him to write to data protected by security label L2 but not to data protected by security labels L1 or L3.

Joe issues the following SQL statement: VALUES Rjaibi 11)

Because no security label was included in the INSERT statement, Joe's security label for write access is inserted into the LABEL row:

Table 20. Values in the example table T1 after first INSERT statement

| LASTNAME   | LABEL   |
|------------|---------|
| Rjaibi     | L2      |

Joe issues the following SQL statement, in which he explicitly provides the security label to be inserted into the column LABEL:

INSERT INTO T1 VALUES ('Miller' 'L1') )

The SECLABEL\_BY\_NAME function in the statement returns security label that is part of security policy Pl and is named L1: Joe is not allowed to write to data that is protected with Ll so he is not allowed to insert Ll into the column LABEL

Because the security policy protecting Tl was created without the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL the security label that Joe holds for writing is inserted instead. No error O message is returned. option

The table now looks like this:

Table 21. Values in example table T1 after second INSERT statement

| LASTNAME   | LABEL   |
|------------|---------|
| Rjaibi     | L2      |
| Miller     | L2      |

If the security policy protecting the table had been created with the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL then the insert would have failed and an error would have been returned: option

Next Joe is granted an exemption to one of the LBAC rules Assume that his new LBAC credentials allow him to write to data that is protected with security labels Ll and LZ. The security label granted to Joe for write access does not change, it is still L2

Joe issues the following SQL statement: INSERT INTO T1 VALUES Bird SECLABEL\_BY L1') )

Because of his new LBAC credentials Joe is able to write to data that is protected by the security label Ll. The insertion of Ll is therefore allowed. The table now looks like this:

Table 22. Values in example table T1 after third INSERT statement

| LASTNAME   | LABEL   |
|------------|---------|
| Rjaibi     | L2      |
| Miller     | L2      |
| Bird       | Ll      |

## Updating of LBAC protected data

Your LBAC credentials must allow you write access to data before you can it: In the case of updating a LBAC credentials must also allow read access to the row. update your

## Updating protected columns

When you to data in protected column, your LBAC credentials are compared to the security label protecting the column: The comparison made is for write access. If write access is blocked then an error is returned and the statement fails, otherwise the continues: update try\_ update

The details of how your LBAC credentials are compared to a security label are given in the topic about how LBAC security labels are compared.

## Example:

Assume there is a table Tl in which column DEPTNO is protected by a security label L2 and column PAYSCALE is protected by security label L3. T1, including its data, looks like this:

Table 23. Table T1

|   EMPNO | LASTNAME   | DEPTNO Protected by L2   |   PAYSCALE Protected by L3 |
|---------|------------|--------------------------|----------------------------|
|       1 | Rjaibi     |                          |                          4 |
|       2 | Miller     | 11                       |                          7 |
|       3 | Bird       | 11                       |                          9 |

User Lhakpa has no LBAC credentials. He issues this SQL statement:

UPDATE T1

WHERE LASTNAME "Bird"

This statement executes without error because it does not any protected columns. Tl now looks like this: update

Table 24. Table T1 After Update

|   EMPNO | LASTNAME   |   DEPTNO Protected by L2 |   PAYSCALE Protected by L3 |
|---------|------------|--------------------------|----------------------------|
|       1 | Rjaibi     |                       11 |                          4 |
|       2 | Miller     |                       11 |                          7 |
|       4 | Bird       |                       11 |                          9 |

Lhakpa next issues this SQL statement:

UPDATE Tl SET DEPTNO 55 WHERE LASTNAME "Miller"

This statement fails and an error is returned because DEPTNO is protected and Lhakpa has no LBAC credentials:

Assume Lhakpa is granted LBAC credentials and that allow the access summarized in the following table: The details of what those credentials are and what elements are in the security labels are not important for this example:

| Security label protecting the data   | Can read?   | Can Write?   |
|--------------------------------------|-------------|--------------|
| L2                                   | No          | Yes          |
| L3                                   | No          | No           |

Lhakpa issues this SQL statement again:

UPDATE T1 SET DEPTNO 55

WHERE LASTNAME "Miller"

This time the statement executes without error because Lhakpa's LBAC credentials allow him to write to data protected by the security label that is protecting the column DEPTNO. It does not matter that he is not able to read from that same column. The data in Tl now looks like this:

Table 25. Table T1 After Second Update

| EMPNO   | LASTNAME   |   DEPTNO Protected by L2 |   PAYSCALE Protected by L3 |
|---------|------------|--------------------------|----------------------------|
|         | Rjaibi     |                       11 |                          4 |
| 2       | Miller     |                       55 |                          7 |
| 4       | Bird       |                       11 |                          9 |

Next Lhakpa issues this SQL statement:

UPDATE T1 SET DEPTNO 55, PAYSCALE

WHERE LASTNAME Bird"

The column PAYSCALE is protected by the security label L3 and Lhakpa's LBAC credentials do not allow him to write to it: Because Lhakpa is unable to write to the column; the fails and no data is changed. update

## Updating protected rows

does not exist for you so there is no way for you to that row: rows that you are able to read, you must also be able to write to the row in order to it\_ update For update

When you try to writing are compared to an error is returned. If write access is not blocked, then the update continues. update

The that is performed is done the same way as an to a non-protected row except for the treatment of the column that has a data type of DBZSECURITYLABEL. If you do not explicitly set the value of that column, it is automatically set to the security label that you hold for write access. If you do not have security label for write access, an error is returned and the statement fails. update update

If the update explicitly sets the column that has a data type of DBZSECURITYLABEL, then your LBAC credentials are checked again. If the you are trying to perform would create a row that your current LBAC credentials would not allow you to write to, then what happens depends on the security policy that is protecting the table If the security policy has the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL option, then the update fails and an error is returned. If the security policy does not have the RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL or if it instead has the OVERRIDE NOT AUTHORIZED WRITE SECURITY LABEL option, then the security label you provide is ignored and if you hold a security label for write access, it is used instead. If you do not hold security label for write access, an error is returned. update option

## Example:

Assume that table Tl is protected by a security policy named Pl and has a column named LABEL that has a data type of DBZSECURITYLABEL.

T1, including its data, looks like this:

Table T1

|   EMPNO | LASTNAME   |   DEPTNO | LABEL   |
|---------|------------|----------|---------|
|       1 | Rjaibi     |       11 | Ll      |
|       2 | Miller     |       11 | L2      |
|       3 | Bird       |       11 | L3      |

Assume that user Jenni has LBAC credentials that allow her to read and write data protected by the security labels LO and Ll but not data protected by any other security labels. The security label she holds for both read and write is LO. The details of her full credentials and of what elements are in the labels are not important for this example.

Jenni issues this SQL statement:

SELECT

Jenni sees only one row in the table:

Table 27. Jenni's SELECT Query Result

| EMPNO   | LASTNAME   |   DEPTNO | LABEL   |
|---------|------------|----------|---------|
|         | Rjaibi     |       11 | Ll      |

The rows protected by labels L2 and L3 are not included in the result set because Jenni's LBAC credentials do not allow her to read those rows. For Jenni it is as if those rows do not exist:

```
Jenni issues these SQL statements: UPDATE Tl SET DEPTNO 44 WHERE DEPTNO 11; SELECT FROM Tl;
```

The result set returned by the query looks like this:

Table 28. Jenni's UPDATE &amp; SELECT Query Result

| EMPNO   | LASTNAME   | DEPTNO   | LABEL   |
|---------|------------|----------|---------|
|         | Rjaibi     |          | LO      |

The actual data in the table looks like this:

Table 29. Table T1

|   EMPNO | LASTNAME   |   DEPTNO | LABEL   |
|---------|------------|----------|---------|
|       1 | Rjaibi     |       44 | LO      |
|       2 | Miller     |       11 | L2      |
|       3 | Bird       |       11 | L3      |

The statement executed without error but affected the first row: The second and third rows are not readable by Jenni so are not selected for by the statement even though meet the condition in the WHERE clause: only they update they

Notice that the value of the LABEL column in the updated row has changed even though that column was not explicitly set in the UPDATE statement: The column was set to the security label that Jenni held for writing:

Now Jenni is granted LBAC credentials that allow her to read data protected by any security label. Her LBAC credentials for writing do not She is still only able to write to data protected by LO and Ll: change:

Jenni again issues this SQL statement: UPDATE SET DEPTNO 44 WHERE DEPTNO 11

This time the fails because of the second and third rows. Jenni is able to read those rows, SO are selected for by the statement: She is not, however; able to write to them because are protected by security labels L2 and L3. The does not occur and an error is returned. update update they they update

```
Jenni now issues this SQL statement: UPDATE SET DEPTNO 55, LABEL SECLABEL_BY_NAME ( P1 ' "Rjaibi
```

The SECLABEL\_BY\_NAME function in the statement returns the security label Jenni's LBAC credentials allow her to read the first row, s0 it is selected for Her LBAC credentials allow her to write to rows protected by the security label LO so she is allowed to the row Her LBAC credentials would not, however; allow her to write to a row protected by the security label L2, so she is not allowed to set the column LABEL to that value\_ The statement fails and an error is returned: No columns in the row are update. update updated:

Jenni now issues this SQL statement:

UPDATE Tl SET LABEL P1 ' , Ll' ) WHERE LASTNAME "Rjaibi

The statement succeeds because she would be able to write to a row protected by the security label L1.

T1 now looks like this:

Table 30. Table T1

|   EMPNO | LASTNAME   |   DEPTNO | LABEL   |
|---------|------------|----------|---------|
|       1 | Rjaibi     |       44 | Ll      |
|       2 | Miller     |       11 | L2      |
|       3 | Bird       |       11 | L3      |

## Updating protected rows that contain protected columns

If you try to update protected columns in a table with protected rows then your LBAC credentials must allow writing to of all of the protected columns affected by the update, otherwise the fails and an error is returned. This is as described in section about updating protected columns, earlier: If you are allowed to all of the protected columns affected by the update you will still only be able to rows that your LBAC credentials allow you to both read from and write to. This is as described in the section about updating protected rows, earlier: The handling of a column with data type of DBZSECURITYLABEL is the same whether the affects protected columns or not update update update update

If the column that has a data type of DBZSECURITYLABEL is itself a protected column then your LBAC credentials must allow you to write to that column or you cannot any of the rows in the table: update

## Deleting or dropping of LBAC protected data

Your ability to delete data in tables protected by LBAC depend on your LBAC

## Deleting protected rows

If your LBAC credentials do not allow you to read a row, it is as if that row does row that you are able to read, your LBAC credentials must also allow you to write to the row To delete any row in table that has protected columns you must have LBAC credentials that allow you to write to all protected columns in the table

When you try to delete a rOw, your LBAC credentials for writing are compared to the security label protecting the row: If the protecting security label blocks write access by LBAC credentials, the DELETE statement fails, an error is returned, and no rows are deleted: your

## Example

Protected table T1 has these rows:

| LASTNAME   | DEPTNO   | LABEL   |
|------------|----------|---------|
| Rjaibi     |          | L2      |
| Miller     |          | Ll      |
| Bird       |          | L2      |
| Fielding   |          | L3      |

Assume that user Pat has LBAC credentials such that her access is as summarized in this table:

| Security label   | Read access?   | Write access?   |
|------------------|----------------|-----------------|
| Ll               | Yes            | Yes             |
| L2               | Yes            | No              |
| L3               | No             | No              |

The exact details of her LBAC credentials and of the security labels are unimportant for this example:

Pat issues the following SQL statement:

SELECT FROM Tl WHERE DEPTNO 4= 999

The statement executes and returns this result set:

| LASTNAME   |   DEPTNO | LABEL   |
|------------|----------|---------|
| Rjaibi     |       55 | L2      |
| Miller     |       77 | Ll      |
| Bird       |       55 | L2      |

The last row of Tl is not included in the results because Pat does not have read access to that row. It is as if that row does not exist for Pat:

Pat issues this SQL statement:

DELETE FROM T1 WHERE DEPTNO 999

Pat does not have write access to the first or third row, both of which are protected by L2. So even though she can read the rows she cannot delete them. The DELETE statement fails and no rows are deleted.

Pat issues this SQL statement:

DELETE FROM T1 WHERE DEPTNO

77;

This statement succeeds because Pat is able to write to the row with Miller in the LASTNAME column. That is the only row selected by the statement: The row with Fielding in the LASTNAME column is not selected because Pat's LBAC credentials do not allow her to read that row. That row is never considered for the delete s0 no error occurs\_

The actual rows of the table now look like this:

| LASTNAME   |   DEPTNO | LABEL   |
|------------|----------|---------|
| Rjaibi     |       55 | L2      |
| Bird       |       55 | L2      |
|            |       77 | L3      |

## Deleting rows that have protected columns

To delete any rOw in a table that has protected columns you must have LBAC credentials that allow you to write to all protected columns in the table If there is any row in the table that your LBAC credentials do not allow you to write to then the delete will fail and an error will be returned.

If the table has both protected columns and protected rows then to delete a particular row you must have LBAC credentials that allow you to write to every want to delete:

## Example

In protected table T1, the column DEPTNO is protected by the security label L2 T1 contains these rows:

| LASTNAME   | DEPTNO Protected by L2   | LABEL   |
|------------|--------------------------|---------|
| Rjaibi     | 55                       | L2      |
| Miller     |                          | Ll      |
| Bird       |                          | L2      |
| Fielding   |                          | L3      |

Assume that user Benny has LBAC credentials that allow him the access summarized in this table:

| Security label   | Read access?   | Write access?   |
|------------------|----------------|-----------------|
| Ll               | Yes            | Yes             |
| L2               | Yes            | No              |
| L3               | No             | No              |

The exact details of his LBAC credentials and of the security labels are unimportant for this example:

Benny issues the following SQL statement:

DELETE FROM Tl WHERE DEPTNO 77

The statement fails because Benny does not have write access to the column DEPTNO.

Now Benny's LBAC credentials are changed so that he has access as summarized in this table:

| Security label   | Read access?   | Write access?   |
|------------------|----------------|-----------------|
| Ll               | Yes            | Yes             |
| L2               | Yes            | Yes             |
| L3               | Yes            | No              |

Benny issues this SQL statement again:

DELETE FROM T1 WHERE DEPTNO 77

This time Benny has write access to the column DEPTNO so the delete continues. The delete statement selects only the row that has a value of Miller in the LASTNAME column: The row that has a value of Fielding in the LASTNAME column is not selected because Benny's LBAC credentials do not allow him to read that row. Because the row is not selected for deletion by the statement it does not matter that Benny is unable to write to the row:

The one row selected is protected by the security label L1: Benny's LBAC credentials allow him to write to data protected by Ll so the delete is successful.

The actual rows in table T1 now look like this:

| LASTNAME   |   DEPTNO Protected by L2 | LABEL   |
|------------|--------------------------|---------|
| Rjaibi     |                       55 | L2      |
| Bird       |                       55 | L2      |
| Fielding   |                       77 | L3      |

## Dropping protected data

You cannot a column that is protected by a security label unless your LBAC credentials allow you to write to that column: drop

A column with a data type of DBZSECURITYLABEL cannot be dropped from table. To remove it you must first the security policy from the table When you drop the security policy the table is no longer protected with LBAC and the data type of the column is automatically changed from DBZSECURITYLABEL to VARCHAR(128) FOR BIT DATA. The column can then be dropped. drop

Your LBAC credentials do not prevent you from dropping entire tables or databases that contain protected data. If you would normally have permission to table or a database you do not need any LBAC credentials to do S0, even if the database contains protected data. drop

## Removal of LBAC protection from data

You must have SECADM authority to remove the security policy from table To remove the security policy from table you use the DROP SECURITY POLICY clause of the ALTER TABLE statement: This also automatically removes protection from all rows and all columns of the table:

## Removing protection from rows

In table that has protected rows every row must be protected by a security label. There is no way to remove LBAC protection from individual rows.

A column of type DBZSECURITYLABEL cannot be altered or removed except by removing the security policy from the table:

## Removing protection from columns

Protection of a column can be removed the DROP COLUMN SECURITY clause of the SQL statement ALTER TABLE: To remove the protection from a column you must have LBAC credentials that allow you to read from and write to that column in addition to the normal privileges and authorities needed to alter a table: using

## Chapter 6. Using the system catalog for security information

Information about each database is automatically maintained in a set of views called the system catalog, which is created when the database is created  This system describes tables, columns, indexes, programs, privileges, and other objects. catalog

The following views and table functions list information about privileges held by users, identities of users granting privileges, and object ownership:

## SYSCATCOLAUTH

Lists the column privileges

## SYSCATDBAUTH

Lists the database privileges

## SYSCATINDEXAUTH

Lists the index privileges

## SYSCATMODULEAUTH

Lists the module privileges

## SYSCATPACKAGEAUTH

Lists the package privileges

## SYSCATPASSTHRUAUTH

Lists the server privilege

## SYSCATROLEAUTH

Lists the role privileges

## SYSCATROUTINEAUTH

Lists the routine (functions, methods, and stored procedures) privileges

## SYSCATSCHEMAAUTH

Lists the schema privileges

## SYSCAT.SEQUENCEAUTH

Lists the sequence privileges

## SYSCATSURROGATEAUTHIDS

Lists the authorization IDs for which another authorization ID can act as surrogate.

## SYSCATTABAUTH

Lists the table and view privileges

## SYSCATTBSPACEAUTH

Lists the table space privileges

## SYSCATVARIABLEAUTH

Lists the variable privileges

## SYSCATWORKLOADAUTH

Lists the workload privileges

## SYSCATXSROBJECTAUTH

Lists the XSR object privileges

Privileges granted to users by the system will have SYSIBM as the grantor: SYSADM, SYSMAINT SYSCTRL, and SYSMON are not listed in the system catalog:

The CREATE and GRANT statements place privileges in the system catalog: Users with ACCESSCTRL and SECADM authority can and revoke SELECT privilege on the system views. grant catalog

## Retrieving authorization names with granted privileges

You can use the PRIVILEGES and other administrative views to retrieve information about the authorization names that have been granted privileges in a database:

## About this task

For example, the following query retrieves all explicit privileges and the authorization IDs to which were granted, plus other information, from the PRIVILEGES administrative view: they

SELECT AUTHID, PRIVILEGE \_ OBJECTNAME, OBJECTSCHEMA, OBJECTTYPE FROM SYSIBMADM. PRIVILEGES

The following query uses the AUTHORIZATIONIDS administrative view to find all the authorization IDs that have been granted privileges or authorities, and to show their types:

SELECT  AUTHID, AUTHIDTYPE FROM SYSIBMADM. AUTHORIZATIONIDS

You can also use the SYSIBMADMOBJECTOWNERS administrative view and the SYSPROCAUTH\_LIST\_GROUPS\_FOR AUTHID table function to find security-related information.

Prior to Version 9.1, no single system view contained information about all privileges. For releases earlier than version 9.1, the following statement retrieves all authorization names with privileges: catalog

```
SELECT DISTINCT GRANTEE , GRANTEETYPE, DATABASE ' FROM SYSCAT . DBAUTH UNION SELECT DISTINCT GRANTEE, GRANTEETYPE , TABLE FROM SYSCAT. TABAUTH UNION SELECT DISTINCT GRANTEE, GRANTEETYPE, PACKAGE FROM SYSCAT.PACKAGEAUTH UNION SELECT DISTINCT GRANTEE, GRANTEETYPE, INDEX FROM SYSCAT. INDEXAUTH SELECT DISTINCT GRANTEE , GRANTEETYPE , COLUMN FROM SYSCAT. COLAUTH UNION SELECT DISTINCT GRANTEE , GRANTEETYPE, SCHEMA FROM SYSCAT. SCHEMAAUTH SELECT DISTINCT GRANTEE _ GRANTEETYPE, SERVER FROM SYSCAT. PASSTHRUAUTH ORDER BY GRANTEE, GRANTEETYPE, 3
```

Periodically, the list retrieved by this statement should be compared with lists of user and group names defined in the system security facility You can then identify those authorization names that are no longer valid.

Note: If you are supporting remote database clients, it is possible that the authorization name is defined at the remote client only and not on your database server machine:

## Retrieving all names with DBADM authority

The following statement retrieves all authorization names that have been directly granted DBADM authority:

## About this task

SELECT DISTINCT GRANTEE\_ GRANTEETYPE FROM SYSCAT. DBAUTH

WHERE   DBADMAUTH Y

## Retrieving names authorized to access a table

You can use the PRIVILEGES and other administrative views to retrieve information about the authorization names that have been granted privileges in a database:

## About this task

The following statement retrieves all authorization names (and their types) that are directly authorized to access the table EMPLOYEE with the qualifier JAMES:

SELECT DISTINCT AUTHID, AUTHIDTYPE FROM SYSIBMADM.PRIVILEGES WHERE OBJECTNAME AND OBJECTSCHEMA JAMES"

For releases earlier than Version 9.1, the following query retrieves the same information:

```
SELECT DISTINCT GRANTEETYPE, GRANTEE FROM SYSCAT. TABAUTH WHERE  TABNAME AND   TABSCHEMA UNION SELECT DISTINCT GRANTEETYPE, GRANTEE FROM SYSCAT. COLAUTH WHERE TABNAME EMPLOYEE AND   TABSCHEMA JAMES "
```

To find out who can the table EMPLOYEE with the qualifier JAMES, issue the following statement: update

```
SELECT DISTINCT GRANTEETYPE, GRANTEE FROM SYSCAT. TABAUTH WHERE TABNAME EMPLOYEE AND TABSCHEMA JAMES " AND (CONTROLAUTH Y' OR UPDATEAUTH In ('G' 'Y')) UNION SELECT DISTINCT GRANTEETYPE, GRANTEE FROM SYSCAT. DBAUTH WHERE   DBADMAUTH Y UNION SELECT DISTINCT GRANTEETYPE , GRANTEE FROM SYSCAT. COLAUTH WHERE  TABNAME EMPLOYEE: AND  TABSCHEMA JAMES " AND PRIVTYPE U'
```

This retrieves any authorization names with DBADM authority, as well as those names to which CONTROL or UPDATE privileges have been directly granted.

Remember that some of the authorization names may be groups, not just individual users

## Retrieving all privileges granted to users

By making queries on the system catalog views, users can retrieve a list of the privileges hold and list of the privileges have granted to other users. they they

## About this task

You can use the PRIVILEGES and other administrative views to retrieve information about the authorization names that have been granted privileges in a database. For example, the following query retrieves all the privileges granted to the current session authorization ID:

SELECT FROM SYSIBMADM. PRIVILEGES WHERE AUTHID SESSIONUSER AND AUTHIDTYPE U'

The keyword SESSION\_USER in this statement is a special register that is to the value of the current user's authorization name\_ equal releases earlier than Version 9.1, the following examples provide similar information. For example, the following statement retrieves a list of the database privileges that have been directly granted to the individual authorization name JAMES: For

```
SELECT FROM SYSCAT . DBAUTH WHERE  GRANTEE JAMES AND GRANTEETYPE U'
```

The following statement retrieves a list of the table privileges that were directly by the user JAMES: granted

SELECT FROM SYSCAT. TABAUTH

WHERE GRANTOR JAMES "

The following statement retrieves list of the individual column privileges that were directly granted by the user JAMES:

SELECT FROM SYSCAT. COLAUTH

WHERE GRANTOR JAMES"

## Securing the system catalog view

Because the system views describe every object in the database, if you have sensitive data, you might want to restrict their access. catalog

## About this task

The following authorities have SELECT privilege on all tables: catalog

- ACCESSCTRL
- DATAACCESS
- DBADM
- SECADM
- SQLADM

In addition, the following instance level authorities have the ability to select from SYSCATBUFFERPOOLS, SYSCATDBPARTITIONGROUPS ,

SYSCATDBPARTITIONGROUPDEF, SYSCATPACKAGES, and SYSCATTABLES:

- SYSADM
- SYSCTRL
- SYSMAINT
- SYSMON

You can use the CREATE DATABASE RESTRICTIVE command to create database in which no privileges are automatically granted to PUBLIC. In this case, none of the following normal default grant actions occur:

- CREATETAB
- BINDADD
- CONNECT
- IMPLICIT\_SCHEMA
- EXECUTE with GRANT on all procedures in schema SQL)
- EXECUTE with GRANT on all functions and procedures in schema SYSPROC
- BIND on all packages created in the NULLID schema
- EXECUTE on all packages created in the NULLID schema
- CREATEIN on schema SQLJ
- CREATEIN on schema NULLID
- USE on table space USERSPACEI
- SELECT access to the SYSCAT catalog views
- SELECT access to the SYSIBM catalog tables
- SELECT access to the SYSIBMADM administrative views
- SELECT access to the SYSSTAT catalog views
- UPDATE access to the SYSSTAT views catalog

If you have created a database the RESTRICTIVE option, no permissions are granted to PUBLIC You can run the following query to verify that no schemas are accessibly by PUBLIC: using

SELECT DISTINCT OBJECTSCHEMA  FROM SYSIBMADM. PRIVILEGES WHERE AUTHID= ' PUBLIC' OBJECTSCHEMA

For releases earlier than Version 9.1 of the Db2 database manager; during database creation, SELECT privilege on the system catalog views is granted to PUBLIC In most cases, this does not present any security problems. For very sensitive data, however; it may be inappropriate, as these tables describe every object in the database: If this is the case, consider revoking the SELECT privilege from PUBLIC; then the SELECT privilege as required to users\_ Granting and revoking SELECT on the system views is done in the same way as for any view, but you must have either ACCESSCTRL or SECADM authority to do this. specific grant catalog

At a minimum, if you don't want any user to be able to know what objects other users have access you should consider restricting access to the following catalog and administrative views: to,

- SYSCATCOLAUTH
- SYSCATDBAUTH
- SYSCATINDEXAUTH
- SYSCATPACKAGEAUTH
- SYSCATPASSTHRUAUTH
- SYSCATROUTINEAUTH
- SYSCATSCHEMAAUTH
- SYSCATSECURITYLABELACCESS
- SYSCATSECURITYPOLICYEXEMPTIONS
- SYSCATSEQUENCEAUTH
- SYSCATSURROGATEAUTHIDS
- SYSCATTABAUTH
- SYSCATTBSPACEAUTH

- SYSCATXSROBJECTAUTH
- SYSIBMADMAUTHORIZATIONIDS
- SYSIBMADMOBJECTOWNERS
- SYSIBMADMPRIVILEGES

This would prevent information about user privileges from becoming available to everyone with access to the database:

You should also examine the columns for which statistics are gathered. Some of the statistics recorded in the system catalog contain data values which could be sensitive information in your environment: If these statistics contain sensitive data, you may want to revoke SELECT privilege from PUBLIC for the SYSCATCOLUMNS and SYSCATCOLDIST views. catalog

If you want to limit access to the system views, you could define views to let each authorization name retrieve information about its own privileges. catalog

For example, the following view MYSELECTS includes the owner and name of every table on which a user's authorization name has been directly granted SELECT privilege:

```
CREATE VIEW MYSELECTS AS SELECT  TABSCHEMA, TABNAME FROM SYSCAT. TABAUTH U' AND  GRANTEE USER AND SELECTAUTH Y
```

The keyword USER in this statement is equal to the value of the current session authorization name\_

The following statement makes the view available to every authorization name: GRANT  SELECT ON TABLE MYSELECTS TO PUBLIC

And finally, remember to revoke SELECT privilege on the view and base table by issuing the following two statements:

REVOKE SELECT ON  TABLE SYSCAT. TABAUTH FROM PUBLIC

REVOKE SELECT ON  TABLE SYSIBM.SYSTABAUTH FROM PUBLIC

## Chapter 7 . Firewall support

A firewall is a set of related programs, located at network gateway server; that are used to prevent unauthorized access to a system or network\_

There are four types of firewalls:

- 1 Network level, packet-filter; or screening router firewalls
- 2 Classical application level proxy firewalls
- 3\_ Circuit level or transparent proxy firewalls
- 4 Stateful multi-layer inspection (SMLI) firewalls

There are existing firewall products that incorporate one of the firewall types listed previously There are many other firewall products that incorporate some combination of the types listed previously:

## Screening router firewalls

The screening router firewall is also known as network level or packet-filter firewall. Such a firewall works by screening incoming packets by protocol attributes. The protocol attributes screened may include source or destination address, type of protocol, source or destination port, or some other protocol-specific attributes.

For all firewall solutions (except SOCKS), you need to ensure that all the ports used by Db2 database are open for incoming and outgoing packets. Db2 database uses port 523 for the Db2 Administration Server (DAS), which is used by the Db2 database tools. Determine the ports used by all your server instances by the services file to the service name in the server database manager configuration file to its port number: using map

In addition, for partitioned database environments and Db2 pureScale environments, connections must be allowed on all non-privileged ports between members of the same Db2 instance: Non-privileged ports have port numbers than or equal to 1024. greater

## Application proxy firewalls

A proxy or proxy server is a technique that acts as an intermediary between a Web client and Web server: A proxy firewall acts as gateway for requests arriving from clients.

When client requests are received at the firewall, the final server destination address is determined by the proxy software The application proxy translates the address, performs additional access control checking and logging as necessary, and connects to the server on behalf of the client

The Db2 Connect product on firewall machine can act as a proxy to the destination server: Also, a Db2 database server the firewall, as a server to the final destination server; acts like an application proxy: acting hop on

## Circuit level firewalls

The circuit level firewall is also known as a transparent proxy firewall.

transparent proxy firewall does not modify the request or response beyond what is required for proxy authentication and identification: An example of a transparent proxy firewall is SOCKS:

The Db2 database system supports SOCKS Version 4

## Stateful multi-layer inspection (SMLI) firewalls

The stateful multi-layer inspection (SMLI) firewall uses a sophisticated form of packet-filtering that examines all seven layers of the Open System Interconnection (OSI) model:

Each packet is examined and compared against known states of friendly packets. While screening router firewalls only examine the packet header; SMLI firewalls examine the entire including the data. packet

## Chapter 8. Security plug-ins

Authentication for the Db2 database system is done security plug-ins. A security plug-in is a dynamically loadable library that provides authentication security services using

## Group retrieval plug-in

Retrieves group membership information for a particular user:

## User IDlpassword authentication plug-in

The following authentication types are implemented a user ID and password authentication plug-in: using

- CLIENT
- SERVER
- SERVER\_ENCRYPT
- DATA\_ENCRYPT
- DATA\_ENCRYPTCMP

These authentication types determine how and where authentication of a user occurs\_ The authentication type that is used is determined by the following method:

- For connect or attach operations, if you specify a value for the srvcon\_auth configuration parameter; then that value takes precedence over the value of the authentication configuration parameter:
- In all other cases, the value of the authentication configuration parameter is used.

## GSS-API authentication plug-in

GSS-API is formally known as Generic Security Service Application Program Interface, Version 2 (IETF RFC2743) and Generic Security Service API Version 2: C-Bindings (IETF RFC2744). The Kerberos protocol is the predominant means of implementing the GSS-API authentication mechanism The following authentication types are implemented GSS-API authentication plug-ins: using

- KERBEROS
- GSSPLUGIN
- KRB\_SERVER\_ENCRYPT
- GSS\_SERVER\_ENCRYPT

KRB\_SERVER\_ENCRYPT and GSS\_SERVER\_ENCRYPT support both GSS-API authentication and user ID/password authentication. However; GSS-API authentication is the preferred authentication type: Client-side Kerberos support is available on Solaris, AIX, HP-UX (64-bit only), Windows, and Linux operating systems. For Windows operating systems, Kerberos support is enabled by default

The Db2 database manager supports these plug-ins at both the client and the server

Note: Authentication types determine how and where a user is authenticated. To use a particular authentication type, set the value of the authentication database manager configuration parameter:

You can use each of the plug-ins independently, or with the other plug-ins. For example, you might use a sever-side authentication plug-in, but accept the Db2 default values for client and group authentication. Alternatively, you might have only a group retrieval, or client authentication plug-in, but without a server-side plug-in. specific

If you want to use GSS-API authentication, plug-ins are required on both the client and the server:

The default behavior for authentication is to use user ID /password plug-in that implements an operating-system-level mechanism to authenticate:

The Db2 database product includes plug-ins for group retrieval, user 'password authentication, and GSS-API authentication. You can customize Db2 client and server authentication behavior further by developing your own plug-ins, or by purchasing plug-ins from a third party:

## Deployment of security plug-ins on Db2 clients

Db2 clients can support one group retrieval plug-in and one user ID / password authentication plug-in.

Alternatively, clients using GSS-API authentication plug-in determine which plug-in to use by scanning the list of implemented GSS-API plug-ins on the Db2 server: The first authentication plug-in name that matches a GSS-API authentication plug-in implemented on the client is the one chosen. You specify the list of implemented server GSS-API plug-ins the srvcon\_gssplugin\_list database manager configuration parameter: The following figure portrays the security plug-in infrastructure on Db2 client: using

Figure 5. Deploying Security Plug-ins on Db2 Clients

<!-- image -->

## Deployment of security plug-ins on Db2 servers

Db2 servers can support one group retrieval plug-in, one user ID /password authentication plug-in, and multiple GSS-API plug-ins. You can specify the

available GSS-API plug-ins as list of values for the srvcon\_gssplugin\_list database manager configuration parameter: However; only one GSS-API plug-in in this list can be a Kerberos plug-in

In addition to deploying the server-side security plug-ins on your database server; you might have to deploy client authentication plug-ins on your database server: When you run instance-level operations, such as the dbzstart and dbztrc commands, the Db2 database manager performs authorization checking for these operations client authentication plug-ins. Therefore, you might need to install the client authentication plug-in that corresponds to the authentication plug-in on the server: This plug-in name is specified by the authentication database manager configuration parameter on the server using

You can set the authentication and srvcon\_auth configuration parameters to different values. This scenario causes one mechanism to be used to authenticate database connections and the other mechanism to be used for local authorization:

The most common method for this approach is to:

- Set the srvcon\_auth configuration parameter to GSSPLUGIN; and
- Set the authentication configuration parameter to SERVER:

The srvcon\_auth configuration parameter is a means to override the authentication type used by incoming connections These connections use the authentication method specified by the srvcon\_auth configuration parameter; but if this value is left empty, the value of the authentication parameter is used instead.

If you do not use client authentication plug-ins on the database server; instance-level operations, such as the db2start command, fail.

The following figure outlines the security authentication plug-in infrastructure on a Db2 server:

Figure 6. Deploying Security Plug-ins on Dbz Servers

<!-- image -->

## Enabling security plug-ins

You can specify the plug-ins to use for each authentication mechanism by database manager configuration parameters. The following table outlines these parameters: setting

Table 31\_ Database Manager configuration parameters for security authentication plug-ins

| Description                        | Parameter name        |
|------------------------------------|-----------------------|
| Client Userid-Password Plugin      | CLNT_PW_PLUGIN        |
| Client Kerberos Plugin             | CLNT_KRB_PLUGIN       |
| Group Plugin                       | GROUP_PLUGIN          |
| GSS Plugin for Local Authorization | LOCAL_GSSPLUGIN       |
| Server Plugin Mode                 | SRV_PLUGIN_MODE       |
| Server List of GSS Plugins         | SRVCON_GSSPLUGIN_LIST |
| Server Userid-Password Plugin      | SRVCON_PW_PLUGIN      |
| Server Connection Authentication   | SRVCON_AUTH           |
| Database manager authentication    |                       |

If you do not set the values for these parameters, the default plug-ins that the Dbz product supplies are used for group retrieval, user ID /password management, and Kerberos authentication (if the authenticationparameter is set to KERBEROS on the server). However; a default GSS-API plug-in is not provided. Therefore, if you specify an authentication type of GSSPLUGIN for the authentication parameter; you must also specify a GSS-API authentication plug-in for the srvcon\_gssplugin\_Tist configuration parameter:

## Loading security plug-ins

All of the supported plug-ins that are identified by the database manager configuration parameters are loaded when the database manager starts connect or attach operations, the Db2 client loads a plug-in that is appropriate for the security mechanism that the client negotiated with the server: A client application can cause multiple security plug-ins to be concurrently loaded and used. This situation can occur; for example, in a threaded program that has concurrent connections to different databases from different instances. In this scenario, the client program makes an initial connection to server A that uses a GSS-API plug-in (G1) Server A sends a list of supported plug-ins to the client; and the matching G1 plug-in is loaded on the client: The client program then has another thread, which connects to server B that uses GSS-API plug-in (G2). The client is informed about G2, which is then loaded, and now both Gl and G2 plug-ins are simultaneously in use on the client: During

Actions other than connect or attach operations (such as updating the database manager configuration, starting and stopping the database manager; or turning a Db2 trace on and off) also require an authorization mechanism. For such actions, the Db2 client program loads a plug-in that is specified by another database manager configuration parameter:

- If you set the authentication configuration parameter to GSSPLUGIN, the Db2 database manager uses the plug-in specified by the local\_gssplugin configuration parameter

- If set the authentication configuration parameter to KERBEROS, the Db2 database manager uses the plug-in specified by the clnt\_krb\_plugin configuration parameter: you
- Otherwise, the Db2 database manager uses the plug-in specified by the clnt\_pw\_plugin configuration parameter:

Security plug-ins are supported for connections made to the database server over both IPv4 and IPv6 address protocols.

## Developing security plug-ins

If you are developing a security authentication plug-in, must implement the functionality that you must implement for the three types of plug-ins: you

## Group retrieval plug-in

- Find and return the list of groups to which a user belongs

## User IDlpassword authentication plug-in

- Identify the default security context (for a client plug-in only)
- Determine whether a particular represents a valid user (for a server plug-in only) string
- Validate and, optionally, change a password
- Modify the user ID Or password that is provided on the client before it is sent to the server (for a client plug-in only)
- Return the Db2 authorization ID that is associated with particular user

## GSS-API authentication plug-in

- Identify the default security context (for a client plug-in only)
- Generate initial credentials based on a user ID and password and, optionally, change password (for a client plug-in only)
- Implement the required GSS-API functions
- Create and accept security tickets
- Return the Db2 authorization ID that is associated with a particular GSS-API security context

You can pass a user ID of up to 255 characters for a connect statement that you issue through the CLP or via a dynamic SQL statement:

Important: The integrity of your Db2 database system installation can be compromised if security plug-ins are not adequately coded, reviewed, and tested. The Db2 database product takes precautions against many common types of failures, but it cannot guarantee complete integrity if user-written security plug-ins are deployed.

## Security plug-in library locations

After you acquire your security plug-ins (either by developing them yourself, or purchasing them from third party) , copy them to specific locations on your database server:

Db2 clients looks for client-side user authentication plug-ins in the following directory:

- UNIX 32-bit: SDBZPATH/security32/plugin/client

- UNIX 64-bit: SDBZPATH/security64/plugin/cl ient
- WINDOWS 32-bit and 64-bit: SDBZPATH  securitylplugin|instance name c] ient

Note: On Windows-based platforms, the subdirectories instance name and client are not created automatically The instance owner has to manually create them:

The Db2 database manager looks for server-side user authentication plug-ins in the following directory:

- UNIX 32-bit: SDBZPATH/security32/plugin/server
- UNIX 64-bit: SDBZPATH/security64/plugin/server
- WINDOWS 32-bit and 64-bit: SDBZPATH  securitylplugin instance namelserver

Note: On Windows-based platforms, the subdirectories instance name and server are not created automatically The instance owner has to manually create them.

The Db2 database manager looks for group plug-ins in the following directory:

- UNIX 32-bit: SDBZPATH/security32/plugin/group
- UNIX 64-bit: SDBZPATH/security64/plugin/group
- WINDOWS 32-bit and 64-bit: SDBZPATHI securitylpluginlinstance namelgroup

Note: On Windows-based platforms, the subdirectories instance name and group are not created automatically The instance owner has to manually create them.

## Security plug-in naming conventions

Security plug-in libraries must have a platform-specific file name extension. Security plug-in libraries written in C or C++ must have a platform-specific file name extension:

- Windows: d11
- AIX: a or s0, and if both extensions exist, a extension is used.
- Linux, HP IPF and Solaris: So

Note: Users can also develop security plug-ins with the Db2 Universal JDBC Driver

For example, assume you have a security plug-in library called MyP]ugin. For each supported operating system, the appropriate library file name follows:

- Windows 32-bit: MyPlugin.dll
- Windows 64-bit: MyPlugin64.dll
- AIX 32 or 64-bit: MyPlugin.a or MyPlugin.so
- SUN 32 or 64-bit, Linux 32 or 64 bit, HP 32 or 64 bit on IPF: MyPlugin.so

Note: The suffix "64" is only required on the library name for 64-bit Windows security plug-ins.

When you the database manager configuration with the name of a security plug-in, use the full name of the without the "64" suffix and omit both the file extension and any qualified portion of the name. Regardless of the operating system, a security plug-in called MyPlugin would be registered as follows: update library path library

UPDATE DBM CFG USING CLNT\_PW\_PLUGIN MyPlugin

The security plug-in name is case sensitive, and must exactly match the name\_ Db2 database use the value from the relevant database manager configuration parameter to assemble the library and then uses the library to load the security plug-in library library systems path, path

To avoid security plug-in name conflicts, you should name the plug-in using the authentication method used, and an identifying symbol of the firm that wrote the plug-in. For instance, if the company Foo, Inc\_ wrote a plug-in implementing the authentication method FOOsomemethod, the plug-in could have a name like FOOsomemethod.d11.

The maximum length of a plug-in name (not including the file extension and the "64" suffix) is limited to 32 bytes. There is no maximum number of plug-ins supported by the database server; but the maximum length of the comma-separated list of plug-ins in the database manager configuration is 255 bytes. Two defines located in the include file sqlenv.h identifies these two limits:

#define SQL\_PLUGIN\_NAME\_SZ 32 plug-in name #define SQL\_SRVCON\_GSSPLUGIN\_LIST\_SZ 255 GSS API plug-in Tist */

The security plug-in files must have the following file permissions: library

- Owned by the instance owner:
- Readable by all users on the system:
- Executable by all users on the system.

## Security plug-in support for two-part user IDs

The Db2 database manager on Windows supports the use of two-part user and the mapping of two-part user IDs to two-part authorization IDs. IDs,

For example, consider a Windows operating system two-part user ID composed of and pieter is the user name In Db2 database systems, you can specify whether this two-part user ID should be mapped to either a one-part authorization ID or a two-part authorization ID.

The mapping of a two-part user ID to a two-part authorization ID is supported, but is not the default behavior: By default, both one-part user IDs and two-part user IDs map to one-part authorization IDs The mapping of a two-part user ID to two-part authorization ID is supported, but is not the default behavior:

The default mapping of a two-part user ID to a one-part user ID allows a user to connect to the database using:

db2 connect to db user MEDWAYIpieter using pw

In this situation, if the default behavior is used, the user ID MEDWAY pieter is resolved to the authorization ID PIETER If the support for mapping a two-part user ID to two-part authorization ID is enabled, the authorization ID would be MEDWAY| PIETER:

To enable Db2 to map two-part user IDs to two-part authorization IDs, Db2 supplies two sets of authentication plug-ins:

- One set exclusively maps a one-part user ID to one-part authorization ID and maps a two-part user-ID to a one-part authorization ID.

- Another set maps both one-part user ID or two-part user ID to two-part authorization ID.

If a user name in your work environment can be mapped to multiple accounts defined in different locations (such as local account, domain account; and trusted domain accounts) , you can specify the plug-ins that enable two-part authorization ID mapping:

It is important to note that a one-part authorization ID, such as, PIETER and a two-part authorization ID that combines a domain and user ID like MEDWAYIpieter are functionally distinct authorization IDs. The set of privileges associated with one of these authorization IDs can be completely distinct from the set of privileges associated with the other authorization ID. Care should be taken when working with one-part and two-part authorization IDs.

The following table identifies the kinds of plug-ins supplied by Db2 database systems, and the plug-in names for the specific authentication implementations.

Table 32. Db2 security plug-ins

| Authentication type         | Name of one-part user ID plug-in   | Name of two-part user ID plug-in   |
|-----------------------------|------------------------------------|------------------------------------|
| User ID / password (client) | IBMOSauthclient                    | IBMOSauthclientTwoPart             |
| User ID /password (server)  | IBMOSauthserver                    | IBMOSauthserverTwoPart             |
| Kerberos                    | IBMkrb5                            | IBMkrbSTwoPart                     |

Note: On Windows 64-bit platforms, the characters "64' are appended to the plug-in names listed here:

When you specify an authentication type that requires a user ID /password O Kerberos plug-in, the plug-ins that are listed in the "Name of one-part user ID plug-in' column in the previous table are used by default

To map a two-part user ID to a two-part authorization ID, you must specify that the two-part plug-in, which is not the default plug-in, be used. Security plug-ins are specified at the instance level by setting the security related database manager configuration parameters as follows:

For server authentication that maps two-part user IDs to two-part authorization IDs, you must set:

- srvcon\_pW\_plugin to IBMOSauthserverTwoPart
- cInt\_pW\_plugin to IBMOSauthc] ientTwoPart

For client authentication that maps two-part user IDs to two-part authorization IDs, you must set:

- srvcon\_pW\_plugin to IBMOSauthserverTwoPart
- clnt\_pW\_plugin to IBMOSauthc] ientTwoPart

For Kerberos authentication that maps two-part user IDs to two-part authorization IDs, you must set:

- srvcon\_gssplugin\_Iist to IBMOSkrbSTwoPart
- clnt\_krb\_plugin to IBMkrbSTwoPart

The security plug-in libraries accept two-part user IDs specified in a Microsoft Windows Security Account Manager compatible format: For example, in the format: domain user ID. Both the domain and user ID information will be used by the Db2 authentication and authorization processes at connection time.

You should consider implementing the two-part plug-ins when creating new databases to avoid conflicts with one-part authorization IDs in existing databases. New databases that use two-part authorization IDs must be created in a separate instance from databases that use single-part authorization IDs.

## Security plug-in API versioning

The Db2 database system supports version numbering of the security plug-in APIs. These version numbers are integers starting with 1 for Db2 UDB, Version 8.2.

The version number that Db2 passes to the security plug-in APIs is the highest version number of the API that Db2 can support, and corresponds to the version number of the structure: If the plug-in can support a higher API version, it must return function pointers for the version that Db2 has requested. If the plug-in only supports a lower version of the API, the plug-in should specify the function pointers for the lower version: In either situation, the security plug-in APIs should return the version number for the API it is supporting in the version field of the functions structure

For Db2, the version numbers of the security plug-ins will only change when necessary (for example, when there are changes to the parameters of the APIs) Version numbers will not automatically change with Db2 release numbers

## 32-bit and 64-bit considerations for security plug-ins

In general, a 32-bit Db2 instance uses the 32-bit security plug-in and a 64-bit Db2 instance uses the 64-bit security plug-in. However; on 64-bit instance, Db2 supports 32-bit applications, which require the 32-bit plug-in library:

A database instance where both the 32-bit and the 64-bit applications can run is known as hybrid instance. If you have a hybrid instance and intend to run 32-bit applications, ensure that the required 32-bit security plug-ins are available in the 32-bit plug-in directory 64-bit Db2 instances on Linux and UNIX operating systems, excluding Linux IPF, the directories security32 and security64 appear: For a 64-bit Db2 instance on Windows on x64 or IPF, both 32-bit and 64-bit security plug-ins are located in the same directory, but 64-bit plug-in names have a suffix, 64"\_ For on

If you want to upgrade from a 32-bit instance to a 64-bit instance, you should obtain versions of your security plug-ins that are recompiled for 64-bit:

If you acquired your security plug-ins from vendor that does not supply 64-bit plug-in libraries, you can implement a 64-bit stub that executes a 32-bit application: In this situation, the security plug-in is an external program rather than library:

## Security plug-in problem determination

Problems with security plug-ins are reported in ways: through SQL errors and through the administration notification two log:

Following are the SQLCODE values related to security plug-ins:

- SQLCODE -1365 is returned when a plug-in error occurs dbzstart or dbzstop during
- SQLCODE -1366 is returned whenever there is a local authorization problem.
- SQLCODE -30082 is returned for all connection-related plug-in errors

The administration notification are a resource for debugging and administrating security plug-ins. To see the an administration notification file on To see an administration notification on Windows operating systems, use the Event Viewer tool. The Event Viewer tool can be found by navigating from the Windows operating system "Start" button to Settings -&gt; Control Panel ~&gt; Administrative Tools Event Viewer. Following are the administration notification log values related to security plug-ins: logs good log

- 13000 indicates that a call to GSS-API security plug-in API failed with an error; and returned an optional error message:

SQLT\_

ADMIN GSS

API

ERROR   (13000)

Plug-in

"plug-in name

received error

code

"error code

from

GSS

API

gss api name"

with the

error message error message

- 13001 indicates that a call to a Db2 security plug-in API failed with an error; and returned an error message. optional

SQLT\_ADMIN\_PLUGIN\_API\_ERROR( 13001) Plug-in 'plug-in name" received error code "error code from Dbz security plug-in API gss api name with the error message "error message

- 13002 indicates that Db2 failed to unload a plug-in SQLT ADMIN\_PLUGIN\_UNLOAD\_ERROR (13002)

Unable to unload plug-in plug-in name No further action required.

- 13003 indicates a bad principal name\_ SQLT ADMIN INVALID PRIN NAME (13003) The principa name 'principal name used for "plug-in name" is invalid Fix the principa] name
- 13004 indicates that the plug-in name is not valid. Path separators (On UNIX and on Windows ') are not allowed in the plug-in name The plug-in name 'plug-in name is invalid. Fix the plug-in name
- 13005 indicates that the security plug-in failed to load. Ensure the plug-in is in the correct directory and that the appropriate database manager configuration parameters are updated.

Verify the plug-in existence and

SQLT ADMIN\_PLUGIN\_LOAD\_ERROR (13005) Unable to Ioad plug-in "plug-in name directory where it is located is correct

- 13006 indicates that an unexpected error was encountered by a security plug-in: Gather all the dbzsupport information, if possible capture a dbztrc, and then call IBM support for further assistance

SQLT ADMIN PLUGIN UNEXP ERROR (13006)

Plug-in encountered unexpected error\_ Contact IBM Support for further assistance\_

Note: If you are security plug-ins on Windows 64-bit database server and are seeing load error for a security plug-in, see the topics about 32-bit and 64-bit considerations and security plug-in naming conventions The 64-bit plug-in requires the suffix "64" on the name, but the entry in the security plug-in database manager configuration parameters should not indicate this suffix using library library

## Enabling plug-ins

## Deploying a group retrieval plug-in

To customize the Db2 security system's group retrieval behavior; you can develop your own group retrieval plug-in or one from third party: buy

## Before you begin

After you acquire a group retrieval plug-in that is suitable for your database management system, you can deploy it

## Procedure

- To deploy a group retrieval plug-in on the database server; perform the following steps:
- the group retrieval plug-in library into the server's group plug-in directory Copy
- 2. Update the database manager configuration parameter group\_plugin with the name of the plug-in:
- the group retrieval plug-in library in the client's group plug-in directory: Copy
- To deploy a group retrieval plug-in on database clients, perform the following steps:
- On the database client, the database manager configuration parameter group\_plugin with the name of the plug-in. update

## Deploying a user IDlpassword plug-in

To customize the Db2 security system's user ID / password authentication behavior you can develop your own user ID / password authentication plug-ins or one from third party: buy

## Before you begin

Depending on their intended usage, all user ID-password based authentication plug-ins must be placed in either the client plug-in directory or the server plug-in directory If a plug-in is placed in the client plug-in directory it will be used both for local authorization checking and for validating the client when it attempts to connect with the server: If the plug-in is placed in the server plug-in directory, it will be for handling incoming connections to the server and for checking whether an authorization ID exists and is valid whenever the GRANT statement is issued without specifying either the keyword USER or GROUP In most situations, user ID / password authentication requires only a server-side plug-in. It is possible, though generally deemed less useful, to have only client user ID / password plug-in. It is possible, though quite unusual to require matching user ID /password plug-ins on both the client and the server: used

Note: You must stop the Db2 server or any applications the plug-ins before you deploy a new version of an existing plug-in. Undefined behavior including traps will occur if a process is still a plug-in when a new version (with the same name) is copied over it: This restriction is not in effect when you deploy plugin for the first time or when the plug-in is not in use. After you acquire user ID / password authentication plug-ins that are suitable for using using your database management system, you can deploy them.

## Procedure

- To deploy a user ID /password authentication plug-in on the database server; perform the following steps on the database server:
- 2. Update the database manager configuration parameter srvcon\_pw\_plugin with the name of the server plug-in. This plug-in is used by the server when it is handling CONNECT and ATTACH requests
- 1. the user ID /password authentication plug-in library in the server plug-in directory: Copy
- 3 Either:
- Set the database manager configuration parameter srvcon\_ auth to the CLIENT, SERVER, SERVER\_ENCRYPT, DATA ENCRYPT, or DATA\_ENCRYPT\_CMP authentication type: Or:
- Set the database manager configuration parameter srvcon\_auth to NOT\_SPECIFIED and set authentication to CLIENT, SERVER, SERVER\_ENCRYPT, DATA\_ENCRYPT, or DATA\_ENCRYPT\_CMP authentication type:
- To deploy a user ID /password authentication plug-in on database clients, perform the following steps on each client:
- 1. the user ID /password authentication plug-in library in the client plug-in directory Copy
- 2. Update the database manager configuration parameter clnt\_pW\_plugin with the name of the client plug-in. This plug-in is loaded and called regardless of where the authentication is done, not only when the database configuration parameter; authentication is set to CLIENT. being
- For local authorization on client, server; Or gateway user ID / password authentication plug-in, perform the following steps on each client, server; or gateway: using
- the user ID / password authentication plug-in in the client plug-in directory on the client, server; or gateway Copy library
- 2. Update the database manager configuration parameter clnt\_pW\_plugin with the name of the plug-in:
- 3. Set the authentication database manager configuration parameter to CLIENT, SERVER, SERVER\_ENCRYPT, DATA\_ENCRYPT, or DATA\_ENCRYPT CMP.

## Deploying a GSS-API plug-in

To customize the Db2 security s authentication behavior you can develop your own authentication plug-ins the GSS-API, or one from third party: system' using buy

## Before you begin

In the case of plug-in types other than Kerberos, you must have matching plug-in names on the client and the server with the same plug-in type. The plug-ins on the client and server need not be from the same vendor; but must generate and consume compatible GSS-API tokens combination of Kerberos plug-ins deployed on the client and the server is acceptable since Kerberos plug-ins are standardized. However; different implementations of less standardized GSS-API mechanisms, such as x.509 certificates, might only be partially compatible with Db2 database systems. Depending on their intended usage, all GSS-API authentication plug-ins must be placed in either the client plug-in directory or the server plug-in directory: If a plug-in is placed in the client plug-in directory, it will be used for local authorization checking and when client attempts to connect with the server If the plug-in is placed in the server plug-in directory, it will be used for handling along they Any

incoming connections to the server and for checking whether an authorization ID exists and is valid whenever the GRANT statement is issued without specifying either the keyword USER or GROUP

Note: You must the Db2 server or any applications using the plug-ins before you deploy a new version of an existing plug-in. Undefined behavior including traps will occur if a process is still plug-in when a new version (with the same name) is copied over it: This restriction is not in effect when you deploy plugin for the first time or when the plug-in is not in use. stop using

After you acquire GSS-API authentication plug-ins that are suitable for your database management system, you can deploy them.

## Procedure

- To deploy a GSS-API authentication plug-in on the database server; perform the following steps on the server:
- 2 Update the database manager configuration parameter srvcon \_gssplugin\_list with an ordered, comma-delimited list of the names of the plug-ins installed in the GSS-API plug-in directory
- the GSS-API authentication plug-in library in the server plug-in directory: You can copy numerous GSS-API plug-ins into this directory: Copy
- Either:
- Setting the database manager configuration parameter srvcon\_auth to GSSPLUGIN or GSS\_SERVER\_ENCRYPT is a way to enable the server to use GSSAPI PLUGIN authentication method. Or:
- Setting the database manager configuration parameter srvcon\_auth to NOT SPECIFIED and authentication to GSSPLUGIN or GSSSERVER ENCRYPT is way to enable the server to use GSSAPI PLUGIN authentication method. setting
- To deploy a GSS-API authentication plug-in on database clients, perform the following steps on each client:
- Optional: Catalog the databases that the client will access, indicating that the client will only accept a GSS-API authentication plug-in as the authentication mechanism For example:
- 1 the GSS-API authentication plug-in library in the client plug-in directory You can copy numerous GSS-API plug-ins into this directory: The client selects a GSS-API plug-in for authentication during a CONNECT or ATTACH operation by picking the first GSS-API plug-in contained in the server S plug-in list that is available on the client: Copy
- CATALOG DB testdb AT NODE testnode AUTHENTICATION GSSPLUGIN
- For local authorization on client, server; or gateway using a GSS-API authentication plug-in, perform the following steps:
- 1 the GSS-API authentication plug-in library in the client plug-in directory on the client, server; Or gateway Copy
- Update the database manager configuration parameter Iocal\_gssplugin with the name of the plug-in:
- 3\_ Set the authentication database manager configuration parameter to GSSPLUGIN, or GSS\_SERVER\_ENCRYPT.

## Deploying a Kerberos plug-in

To customize the Kerberos authentication behavior of the Db2 security system, you can develop your own Kerberos authentication plug-ins or purchase one from a third party

## Before you begin

If you want to deploy a new version of an existing plug-in, you must the Db2 server and any applications using the plug-in. Undefined behaviors, including traps, occur if a process is using a plug-in when you deploy a new version of that plug-in (with the same name). stop

## About this task

The Kerberos authentication plug-in can be deployed on a database server or database client:

## Procedure

- To deploy a Kerberos authentication plug-in on the database server; perform the following steps on the server:
- 1. the Kerberos authentication plug-in library into the server plug-in directory Copy
- 2. Update the setting of the srvcon\_gssplugin\_Iist database manager configuration parameter; which is ordered, comma-delimited list, to include the Kerberos server plug-in name. Only one plug-in in this list can be a Kerberos plug-in. If there is no Kerberos plug-in in the list, an error is returned. If there is more than one Kerberos plug-in in the list, an error is returned. If the configuration parameter value is blank and the authentication configuration parameter is set to KERBEROS Or KRB\_SVR\_ENCRYPT, the default Db2 Kerberos plug-in, IBMkrb5, is used. an
- 3 If necessary, set the value of the srvcon\_auth database manager configuration parameter: If you want to deploy Kerberos plug-in, the acceptable values for the srvcon\_auth database manager configuration parameter are as follows:
- KERBEROS
- KRB\_SERVER\_ENCRYPT
- GSSPLUGIN
- GSS\_SERVER\_ENCRYPT
- Blank, but only if the authentication configuration parameter is set to one of the previous values in this list.
- 1. the Kerberos authentication plug-in library into the client plug-in directory Copy
- To deploy a Kerberos authentication plug-in on a database client; perform the following steps on the client:
- Set the clnt\_krb\_plugin database manager configuration parameter to the name of the Kerberos plug-in. If the value of the clnt\_krb\_plugin configuration parameter is blank, the client cannot use Kerberos authentication. On Windows, the default value is IBMkrb5. It only needs to be altered for a customized Kerberos plugin. On UNIX, the value must be set client, server; or gateway Kerberos authentication plug-in, perform the following steps: using

- a. the Kerberos authentication plug-in library in the client plug-in directory on the client, server; Or gateway Copy
- b\_ Set the clnt\_krb\_plugin database manager configuration parameter to the name of the plug-in.
- C. Set the authentication database manager configuration parameter to KERBEROS or KRB\_SERVER\_ENCRYPT.
- Optional: Catalog the databases that the client will access, indicating that the client will use only a Kerberos authentication plug-in. The following example catalogs the testdb database:

CATALOG DB testdb AT NODE testnode AUTHENTICATION KERBEROS

TARGET  PRINCIPAL service/host@REALM

## LDAP-based authentication and group lookup support

The Db2 database manager and Db2 Connect support LDAP-based authentication and group lookup functionality through the use of LDAP security plug-in modules and also through transparent LDAP

LDAP-based authentication support has been enhanced on the AIX operating system. Starting with Db2 V9.7 Fix Pack 1, transparent LDAP support has also been extended to Linux operating at the same version levels that the Db2 product supports. LDAP now enables central management of user authentication and group membership transparent LDAP authentication: You can configure Db2 instances to authenticate users and acquire their groups through the operating system. The operating system will, in turn, perform the authentication through an LDAP server: To enable transparent LDAP authentication, set the DBZAUTH miscellaneous registry variable to OSAUTHDB. Supported operating systems are: systems using

- AIX
- Linux

Another for implementing LDAP-based authentication is through the use of LDAP security plug-ins. LDAP security plug-in modules allow the Db2 database manager to authenticate users defined in an LDAP directory, removing the requirement that users and groups be defined to the operating system at the same version levels that the Db2 product supports. Supported operating systems are: option

- AIX
- Linux on IA32, X64, or zSeries hardware
- Windows

Supported LDAP servers for use with security plug-in modules are:

- IBM Lotus" Domino LDAP Server; Version 8.0, and later
- IBM Tivolic Directory Server (ITDS) Version 6.2 (with GSKit 7.0.4.20 and later), and later
- Microsoft Active Directory (MSAD) Version 2008, and later
- Novell eDirectory, Version 8.8, and later
- OpenLDAP server; Version 2.4, and later
- Sun Java System Directory Server Enterprise Edition, Version 5.2 FP4, and later
- 2/OS Integrated Security Services LDAP Server Version VIR6, and later

Note: When you use the LDAP plug-in modules, all users associated with the database must be defined on the LDAP server: This includes both the Db2 instance owner ID as well as the fenced user: (These users are typically defined in the

operating system, but must also be defined in LDAP) Similarly, if you use the LDAP group plug-in module, any groups required for authorization must be defined on the LDAP server This includes the SYSADM, SYSMAINT, SYSCTRL and SYSMON groups defined in the database manager configuration.

Db2 security plug-in modules are available for server-side authentication, client-side authentication and group lookup, described later: Depending on your specific environment, you may need to use one, two or all three types of plug-in:

To use Db2 security plug-in modules, follow these steps:

- 1\_ Decide if you need server, client, O group plug-in modules, or a combination of these modules:
- 2. Configure the plug-in modules by setting values in the IBM LDAP security plug-in configuration file (default name is IBMLDAPSecurity.ini) You will need to consult with your LDAP administrator to determine appropriate values
- 4 Test connecting with various LDAP User IDs.
- 3. Enable the plug-in modules

## Server authentication plugin

The server authentication plug-in module performs server validation of user IDs and passwords supplied by clients on CONNECT and ATTACH statements: It also provides way to map LDAP user IDs to Db2 authorization IDs, if required: The server plug-in module is generally required if you want users to authenticate to the Db2 database manager their LDAP user ID and password: using

## Client authentication plug-in

The client authentication plug-in module is used where user ID and password validation occurs on the client system; that is, where the Db2 server is configured with SRVCON AUTH or AUTHENTICATION settings of CLIENT The client validates any user IDs and passwords supplied on CONNECT or ATTACH statements, and sends the user ID to the Db2 server Note that CLIENT authentication is difficult to secure, and not generally recommended:

The client authentication plug-in module may also be required if the local operating user IDs on the database server are different from the Db2 authorization IDs associated with those users\_ You can use the client-side plugin to map local operating user IDs to Db2 authorization IDs before performing authorization checks for local commands on the database server, such as for:dbzstart. system system

## Group lookup plug-in

The group plug-in module retrieves group membership information from the LDAP server for particular user: It is required if you want to use LDAP to store group definitions. The most common scenario is where: lookup your

- All users and groups are defined in the LDAP server
- users defined locally on the database server are also defined with the same user ID on the LDAP server (including the instance owner and the fenced user) Any
- Password validation occurs on the Db2 server (that is, an AUTHENTICATION or SRVCON\_AUTH value of SERVER, SERVER ENCRYPT or DATA ENCRYPT is set in the server DBM config file)

It is generally sufficient to install only the server authentication plug-in module and the group plug-in module on the server: Db2 clients typically do not need to have the LDAP plug-in module installed: lookup

It is possible to use only the LDAP group lookup plug-in module in combination with some other form of authentication plug-in (such as Kerberos). In this case, the LDAP group lookup plug-in module will be provided the Db2 authorization IDs associated with a user: The plug-in module searches the LDAP directory for a user with a matching AUTHID\_ATTRIBUTE, then retrieves the groups associated with that user object:

## Configuring transparent LDAP for authentication and group lookup (AIX)

Starting in Db2 V9.7, transparent LDAP-based authentication and group look up are supported on the AIX operating system. Some configuration steps are required before this support is enabled.

## Before you begin

These steps assume that the LDAP server is RFC 2307 compliant and configured to store user and group information.

## Procedure

- 1 To configure your AIX client system for LDAP, perform the following steps:
- b\_ Ensure that the LDAP client file set has been installed on your AIX system. AIX works with all versions of LDAP clients: ITDS V6.1 which with AIX V6.1, and ITDS V6.2 which with the AIX expansion pack: The following shows ITDS V5.2 file sets installed on and AIX system: ships ships
- a in as user with root authority: Log

<!-- image -->

| $ Islpp Fileset                         | Leve]   | State     | Description                             |
|-----------------------------------------|---------|-----------|-----------------------------------------|
| Path: /usr/lib/objrepos Idap.cl ent.adt | 5.2.0.0 | COMMITTED | Directory Client SDK                    |
| Idap.cl ent rte                         | 5.2.0.0 | COMMITTED | Directory Client Runtime (No SSL)       |
| Idap.htm] en_US.config                  | 5.2.0.0 | COMMITTED | Directory Install/Config Gd-U.$ English |
| Idap.htm]                               | 5.2.0.0 | COMMITTED | Directory Man Pages Eng] ish            |
| Idap.msg en US                          | 5.2.0.0 | COMMITTED | Directory Messages                      |
| Path: /etc/objrepos client rte          | 5.2.0.0 | COMMITTED | Directory Client Runtime (No            |

SSL)

- C\_ Using the mksecIdap command with the -c option, configure the client: For more information about the mksecIdap command and how to use it to configure the client, see http:, /www.ibm.com / support /knowledgecenter / SSW
- d Update default stanza in the /etc/security/user file:
- Once you are certain that LDAP is configured properly and that you populated the LDAP directory with users, you must set the default user to use LDAP This will ensure that you can in to the AIX client with any user in the LDAP directory that is not restricted: have log

The SYSTEM and REGISTRY attributes in the /etc/security/user file are used to specify the authentication method and the database used for user management To enable LDAP authentication and user management, set the SYSTEM and REGISTRY attributes in the default stanza to LDAP For example:

chsec -f /etc/securityluser -S default "SYSTEM-LDAP or files" chsec -f /etc/securityluser -S default -a "REGISTRY-LDAP"

Db2 supports the following SYSTEM attributes:

- LDAP
- files

Db2 supports the following REGISTRY attributes:

- LDAP
- KRBSLDAP
- KRBSALDAP
- files
- KRBSfiles
- KRBSAfiles

Configurations that use other SYSTEM or REGISTRY attributes might work, but are not supported:

more details the stanza SYSTEM and REGISTRY attributes, refer to [wwwibm.com / support/ knowledgecenter ,\_ SSW aix\_72 / com.ibm aix security\_ user\_authentication.htm For on http: /

For more details, refer to the redbook titled, Integrating AIX into Heterogeneous LDAP Environments, at: http: / [wwwredbooks ibm.com abstracts\_ 'sg247165.html

- 2 To configure transparent LDAP authentication on your Db2 instance:
- a Set the DBZAUTH miscellaneous registry variable to OSAUTHDB. As user with SYSADM authority run dbzset DBZAUTH-OSAUTHDB:
- b\_ Using the UPDATE DBM CFG command, set the authentication on the database server instance to any one of the following:
- SERVER
- SERVER\_ENCRYPT
- DATA ENCRYPT
- C\_ Ensure that you are using the default Client Userid-Password Plugin (cInt\_ pw ugin), Server Userid-Password Plugin (srvcon\_pW\_plugin) and Group Plugin (group\_plugin). pIe
- d. Restart the Db2 instance:

## Considerations when using various authentication methods

Transparent LDAP-based authentication and group look up support on AIX extends support to Kerberos authentication.

Additional work was done on AIX for using Kerberos authentication with Transparent LDAP The following is what needs to be included in lusr/Tib/security/methods.cfg and /etc/securitylusers when there is a need to manage accounts in different locations and use different authentication methods, such as Kerberos.

In /usr/lib/securitylmethods.cfg you need to have the following to have files, LDAP and Kerberos authentication:

Note: KRBSA is for using Microsoft Active Directory as the Keberos Distribution Center (KDC): Key

For LDAP:

program lusr/liblsecurity/LDAP program\_64 =/usr/lib/security/LDAP64

For KRBSA:

```
program lusr/liblsecurity/KRBSA program_64 lusr/lib/security/KRBSA_64 options tgt_verify-no,authonly, is_kadmind_compat-no
```

For KRB5:

```
program lusr/liblsecurity/KRBS program_64 lusr/liblsecurity/KRBS_64 options kadmind-no
```

For KRBSAfiles:

options db-BUILTIN,auth-KRBSA

For KRBSfiles:

options db-BUILTIN,auth-KRBS

For KRBSALDAP:

options db-LDAP,auth-KRBSA

For KRBSLDAP:

options db-LDAP,auth-KRBS

## Example

The following example shows four accounts managed differently: Each uses different authentication methods.

If frank's account is stored on file and is authenticated using files, then this is what frank's stanza would look like in /etc/securitylusers.

frank:

```
SYSTEM files registry files
```

If karen's account is stored on file and is authenticated using Kerberos, then this is what karen's stanza would look like in /etc/securitylusers:

karen:

```
SYSTEM KRBSfiles registry KRBSfiles
```

If luke's account is stored on LDAP and is authenticated using Kerberos, then this is what luke's stanza would look like in /etc/securitylusers:

Iuke

SYSTEM KRBSLDAP

registry KRBSLDAP

If lucy's account is stored on LDAP and is authenticated using LDAP; then this is what lucy's stanza would look like in /etc/security/users:

Iucy

SYSTEM LDAP

registry LDAP

To determine if a user is defined on LDAP you can use the following command to query a user

Isuser -R LDAP Iucy Tucy id-1234 pgrp-staff groups-staff

## Configuring transparent LDAP for authentication and group lookup (Linux)

transparently uses LDAP-based authentication on the Linux operating system, use Pluggable Authentication Modules (PAM): Your LDAP server should already be configured to store user and group information.

## Before you begin

To enable support for transparent LDAP on the Db2 database, complete the following tasks:

- 2. Configure your Db2 instance
- 1\_ Configure your operating system to authenticate users PAM using

The steps assume that the LDAP server is RFC 2307 compliant:

## Procedure

- 1\_ To configure your operating system for LDAP and PAM, perform the following steps:
- a in as user with root authority Log
- b Ensure that the nss\_Idap and pam\_Idap packages are installed. These two packages appear as or lusr/1ib(64) directories:
- C\_ Set up your operating system to act as LDAP client machine by modifying the /etc/Idap.conf file to enable the operating to bind with LDAP server: Here's a sample /etc/Idap.conf file: system

host &lt;host&gt;

Address of Idap server

base &lt;base&gt;

The DN of the search base

rootbinddn &lt;binddn&gt;

The bind DN to bind LDAP

Idap version

LDAP version

pam Jogin\_attribute uid

user ID attribute for pam user Iookups

nss base\_group &lt;group&gt;

nsswitch configuration pertaining to group

search ookup

- d Set your password in the /etc/Idap.secret file. Only the root user should be able to read or write to this file:
- e Create or modify the PAM configuration file at /etc/pam.d/db2. The file should be only be readable and writable by root: You might have to modify the configuration file, depending on the version of the operating that is Here is a sample configuration file for SUSE Linux Enterprise Server 10: system being used.

auth

sufficient pam\_unix2.SO

auth

required pam 1 dap.

So

use\_first\_pass

account

sufficient pam\_unix2.SO

account

required

password required

password sufficient

pam\_unix2.SO

use authtok use\_first\_pass

password required

pam\_ 1dap.

use first \_pass

session

pam\_unix2.SO

required

For Red Hat Enterprise Linux 5, modify the configuration file as follows: #%PAM-1.0

auth

required

pam env So

auth

sufficient

pam\_unix.so Tikeauth nul lok

auth

sufficient pam Idap. so

use\_first\_pass

auth

required

pam\_deny.so

account

required

pam\_unix.So

account

sufficient pam\_succeed\_ 100 quiet

account

sufficient pam 1 dap.so

```
account required pam_permit.so password requisite pam_crack]ib.so retry-3 dcredit--l password sufficient pam_unix.SO nullok use_authtok md5 shadowremember=3 password sufficient use first_pass password required pam_deny.so session required pam_ session required
```

Db2 supports PAM configurations that use pam 1 unix.S0, and pam\_ Configurations that use other PAM modules might work, but are not supported: dap.

- Setup your Linux to perform group through LDAP Depending on the version of the operating system that is used, may be required to modify the group and passwd entries in letclnsswitch.conf file to ensure LDAP is entered as a lookup method. This action does not have to be done for RHELZ and above: Here is an example lookup system being you

group:

files Idap

passwd:

files Idap

- 2 To configure your Db2 instance to use transparent LDAP authentication, perform the following steps:
- a. Set the DBZAUTH miscellaneous registry variable to OSAUTHDB. Issue the following command as a user with SYSADM authority:

dbzset  DBZAUTH-OSAUTHDB

- Set the authentication on the server to any one of the following:
- SERVER
- SERVER\_ENCRYPT
- DATA ENCRYPT
- C. Ensure that you are using the default Client Userid-Password Plugin (cInt\_ pW\_plugin) , Server Userid-Password Plugin (srvcon\_pW\_plugin) and Group Plugin (group\_plugin).
- d\_ Restart the Db2 instance.

## Configuring the LDAP plug-in modules

To configure the LDAP plug-in modules, you need to your IBM LDAP security plug-in configuration file to suit your environment: In most cases, you will need to consult with your LDAP administrator to determine the appropriate configuration values update

The default name and location for the IBM LDAP security plug-in configuration file is:

- On UNIX: INSTHOME/sqllib/cfg/ IBMLDAPSecurity.ini
- On Windows: %DBZPATHlcfg" IBMLDAPSecurity.ini

Optionally, you can specify the location of this file using the DBZLDAPSecurityConfig environment variable. On Windows, you should set DBZLDAPSecurityConfig in the global system environment, to ensure it is picked up by the Db2 service.

The following tables provide information to help you determine appropriate configuration values.

This setting means TLS 1.2 is not supported

| Parameter         | Description                                                                                                                                                                                                                               |
|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| LDAP_HOST         | The name of your LDAP server(s) _ This is space separated list of LDAP server host  names or IP addresses, with an optional port number for each one For  example: hostl[:port] The default port number is 389, or 636 if SSL is enabled: |
| ENABLE_SSL        | To enable SSL support, set ENABLE_SSL to TRUE (you must have the GSKit installed): This is an optional parameter; it defaults to FALSE (no SSL support)                                                                                   |
| SSL_KEYFILE       | The for the SSL keyring: A keyfile is only if your LDAP server is certificate that is not automatically trusted by your GSKit installation: For example:SSL_KEYFILE /home/dbzinstl/IBMLDAPSecurity.kdb path required using                |
| SSL_PW            | The SSL keyring password. For example: SSL_PW keyfile-password                                                                                                                                                                            |
| SECURITY_PROTOCOL | To enable TLS 1.2 support, set SECURITY_PROTOCOL to TLSV12. To enable TLS 1.0, 1.1, and 1.2 support, set SECURITY_PROTOCOL to ALL By default, SECURITY_PROTOCOL is not set_                                                               |

| Parameter         | Description                                                                                                                                                                                                                                                                                                                                                                                                                     |
|-------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| OBJECTCLASS       | The LDAP object class for users. Generally; set USER OBJECTCLASS to inetOrgPerson (the user for Microsoft Active Directory) For example: USEROBJECTCLASS inetOrgPerson used                                                                                                                                                                                                                                                     |
| USER_BASEDN       | The LDAP base DN to use when searching  for users. If not specified, user searches start at the root of the LDAP directory  Some LDAP servers require that you specify value for this parameter: For example: USER_BASEDN 0=ibm                                                                                                                                                                                                 |
| USERID_ ATTRIBUTE | The LDAP user attribute that represents the user ID_ The USERID_ATTRIBUTE attribute is combined with the USER_OBJECTCLASS and USER_BASEDN (if specified) to construct an LDAP search filter when user issues Db2 CONNECT statement with an unqualified user ID. For example, if USERID_ATTRIBUTE uid; then this statement: db2 connect to MYDB user bob using bobpass results in &(objectClass-inetOrgPerson) (uid-bob) issuing |
| AUTHID_ ATTRIBUTE | The LDAP user attribute that represents Usually this is the same as the USERID_ATTRIBUTE. For example:_AUTHID_ATTRIBUTE uid                                                                                                                                                                                                                                                                                                     |

| Parameter          | Description                                                                                                                                                                          |
|--------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| GROUP_ OBJECTCLASS | The LDAP object class used for groups: Generally this is groupOfNames or groupofUniqueNames (for Microsoft Active Directory it is group) For example: GROUP_OBJECTCLASS groupofNames |

Table 35. Group-related values (continued)

| Parameter               | Description|
|-------------------------||
| GROUP_BASEDN            | The LDAP base DN to use when searching for groups If not specified, group searches start at the root of the LDAP directory: Some LDAP servers require that you specify value for this parameter: For example: GROUPBASEDN 0=ibm                                                                                                                                                                                                                                                                                                                                                                                                              |
| GROUPNAME_ ATTRIBUTE    | The LDAP group attribute that represents the name of the group. For example: GROUPNAME_ATTRIBUTE cn|
| GROUP_LOOKUP_ METHOD    | Determines the method used to find the group memberships for user Possible values are: SEARCH_BY_DN Indicates to search for groups that list the user as member: Membership is indicated by the group attribute defined as GROUP_LOOKUP_ATTRIBUTE (typically, member Or uniqueMember): USER_ATTRIBUTE In this case, user's groups are listed as attributes of the user object itself This setting indicates to search for the user attribute defined as GROUP_LOOKUP_ATTRIBUTE to get the user's groups (typically memberOf for Microsoft Active Directory or For example:GROUP LOOKUPMETHOD SEARCH_BY_DN GROUP_LOOKUP_METHOD USER_ATTRIBUTE |
| GROUP_LOOKUP_ ATTRIBUTE | Name of the attribute used to determine group membership, as described for GROUP_LOOKUP_METHOD. For example: GROUP_LOOKUP_ATTRIBUTE member GROUPLOOKUPATTRIBUTE ibm-a]]Groups                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| NESTED_GROUPS           | If NESTED_GROUPS is TRUE, the Db2 database manager recursively searches for group membership by attempting to look up the group memberships for every group that is found. Cycles (such as belongs to B, and B belongs to A) are handled correctly: This parameter is optional, and defaults to FALSE.                                                                                                                                                                                                                                                                                                                                       |

Table 36. Miscellaneous values

| Parameter            | Description                                                                                                                                                                                                                                                                      |
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| SEARCH_DN, SEARCH_PW | If your LDAP server does not support anonymous access, or if anonymous access is not sufficient when searching for users or groups, then can optionally define a DN and password that will be to perform searches For example: SEARCH DN cn-root SEARCH PW rootpassword used you |
| DEBUG                | Set DEBUG to TRUE to write extra information to the db2diag log files to aid in debugging LDAP related issues Most of the additional information is logged at DIAGLEVEL 4 (INFO): DEBUG defaults to false.                                                                       |

## Enabling the LDAP plug-in modules

Compiled binary LDAP plug-in modules are found in your Db2 instance directory

The following tables show where the LDAP plug-in modules are located on your Db2 instance\_

Table 37. For 64-bit UNIX and Linux systems

| Plug-in module type   | Location                              |
|-----------------------|---------------------------------------|
| server                | Isqhlib/securityb4/plugin_ IBM/server |
| client                |                                       |
| group                 |                                       |

Table 38. For 32-bit UNIX and Linux systems

| Plug-in module type   | Location                              |
|-----------------------|---------------------------------------|
| server                | Isqhlib/security3z/plugin_ IBM/server |
| client                | Isqllib/security3z/plugin/IBM/c]ient  |
| group                 | Isqllib/security32/plugin_ IBM/group  |

| Plug-in module type   | Location                                            |
|-----------------------|-----------------------------------------------------|
| server                | %DBZPATH%| securitylplugin IBMlinstance-namelserver |
| client                |                                                     |
| group                 | IBMlinstance-namelgroup                             |

Note: 64-bit Windows plug-in modules include the digits 64 in the file name

Use the Db2 command line processor to update the database manager configuration to enable the plug-in modules that you require:

- For the server plug-in module:
- UPDATE DBM CFG USING SRVCON\_PW\_PLUGIN IBMLDAPauthserver For the client plug-in module: UPDATE DBM CFG USING CLNT PW\_PLUGIN IBMLDAPauthc] ient
- For the group plug-in module: UPDATE DBM CFG USING GROUP\_PLUGIN IBMLDAPgroups

Terminate all running Db2 command line processor backend processes, by the db2 terminate command, and then stop and restart the instance by using the dbzstop and db2start commands. using

## Connecting with an LDAP user ID

After the LDAP security plug-ins have been configured in a Db2 instance, a user can connect to the databases variety of different user strings. using

The location of an object within LDAP directory is defined by its distinguished name (DN): A DN is typically a multi-part name that reflects some sort of hierarchy, for example: an

cn-John Smith, ou-Sales, 0-WidgetCorp

A user's user ID is defined by an attribute associated with the user object (typically the uid attribute): It may be a simple string (such as jsmith), or look like an email address (such as jsmith@sales widgetcorp com) , that reflects part of the organizational hierarchy user's Db2 authorization ID is the name associated with that user within the Db2 database.

In the past, users were typically defined in the server's host operating system, and the user ID and authorization ID were the same (though the authorization ID is usually in uppercase). The Db2 LDAP plug-in modules give you the ability to associate different attributes of the LDAP user object with the user ID and the authorization ID. In most cases, the user ID and authorization ID can be the same string, and you can use the same attribute name for both the USERID\_ATTRIBUTE and the AUTHID\_ATTRIBUTE. However; if in your environment the user ID attribute typically contains extra information that you do not want to carry over to the authorization ID, You can configure different AUTHID ATTRIBUTE in the plug-in initialization file: The value of the AUTHID\_ ATTRIBUTE attribute is retrieved from the server and used as the internal Db2 representation of the user:

For example, if your LDAP user IDs look like email addresses (such as jsmith@sales widgetcorp com) , but you would rather use just the user portion (jsmith) as the Db2 authorization ID, then you can:

- 1\_ Associate a new attribute containing the shorter name with all user objects on your LDAP server
- 2. Configure the AUTHID\_ATTRIBUTE with the name of this new attribute

Users are then able to connect to a Db2 database by specifying their full LDAP user ID and password, example: for db2 connect to MYDB user jsmith@sales.widgetcorp.com using pswd

But internally, the Db2 database manager refers to the user the short name retrieved the AUTHID\_ATTRIBUTE (jsmith in this case). using using

After an LDAP plug-in module has been enabled and configured, a user can connect to Db2 database variety of different using strings:

- A full DN. For example: connect to MYDB user cn-John Smith, ou-Sales, 0-WidgetCorp'
- A partial DN, provided that a search of the LDAP directory using the partial DN and the appropriate search base DN (if defined) results in exactly one match: For example:
- connect to MYDB user cn-John Smith connect to MYDB user uid-jsmith
- A simple string (containing no equals signs). The string is qualified with the USERID\_ATTRIBUTE and treated as a DN. For example: connect to MYDB user jsmith partial

Note: string supplied on CONNECT statement or ATTACH command must be delimited with single quotation marks if it contains spaces Or characters. Any special

You must configure the CLNT\_PW\_PLUGIN and GROUP\_PLUGIN parameters on the Db2 client if you want to use full or partial DNs:

update dbm cfg us ing CLNT PW PLUGIN  IBMLDAPauthclient update dbm cfg using GROUP\_PLUGIN IBMLDAPgroups

You must also the LDAP plug-in configuration IBMLDAPSecurityt.ini. file, update

## Considerations for group lookup

Group membership information is typically represented on an LDAP server either as an attribute of the user object, or as an attribute of the group object:

- As an attribute of the user object

Each user object has an attribute called GROUP\_LOOKUP ATTRIBUTE that you can query to retrieve all of the group membership for that user:

- As an attribute of the group object Each group object has an attribute, also called GROUP\_LOOKUP\_ATTRIBUTE, that you can use to list all the user objects that are members of the group. You can enumerate the groups for a by searching for all groups that

particular user list the user object as member:

Many LDAP servers can be configured in either of these ways, and some support both methods at the same time. Consult with your LDAP administrator to determine how your LDAP server is configured.

When configuring the LDAP plug-in modules, you can use the GROUP\_LOOKUP\_METHOD parameter to specify how group should be performed: lookup

- If you need to use the GROUP\_LOOKUP object to find group membership, set GROUP\_LOOKUP\_METHOD = USER ATTRIBUTE
- If you need to use the GROUP\_LOOKUP ATTRIBUTE attribute of the group object to find group membership, set GROUP\_LOOKUP\_METHOD = SEARCH\_BY\_DN

LDAP servers use the GROUP\_LOOKUP\_ ATTRIBUTE attribute of the group object to determine membership. can be configured as shown in this example: GROUPLOOKUPMETHOD SEARCH BY DN GROUP\_LOOKUP\_ATTRIBUTE groupOfNames Many They

Microsoft Active Directory typically stores group membership as a user attribute, and could be configured as shown in this example:

GROUP\_LOOKUP\_METHOD USER\_ATTRIBUTE GROUP\_LOOKUP\_ATTRIBUTE memberof

The IBM Tivoli Directory Server supports both methods at the same time: To query the group membership for a user you can make use of the user attribute ibm-a]lGroups, as shown in this example: special

GROUP\_LOOKUP\_METHOD USER\_ATTRIBUTE GROUP\_LOOKUP\_ATTRIBUTE bm-al ]Groups

Other LDAP servers may offer similar special attributes to aid in retrieving group membership. In general, retrieving membership through a user attribute is faster than searching for groups that list the user as a member:

## Troubleshooting authenticating LDAP users or retrieving groups

If you encounter problems authenticating LDAP users or retrieving their groups, the db2diag files and administration are a source of information to aid in troubleshooting: log good

The LDAP plug-in modules typically LDAP return codes, search filters, and other useful data when a failure occurs\_ If you enable the DEBUG in the LDAP plug-in configuration file, the plug-in modules will even more information in the db2diag files. While this might be an aid in troubleshooting, it is not recommended for extended use on production systems due to the overhead associated with writing all of the extra data to single file: log option log log

Ensure that the diaglevel configuration parameter in the database manager is set to 4 so that all messages from the LDAP plug-in modules will be captured.

## Writing security plug-ins

## How Db2 loads security plug-ins

So that the Db2 database system has the necessary information to call security plug-in functions, a security plug-in must have a correctly set up initialization function.

Each plug-in library must contain an initialization function with a specific name determined by the plug-in type:

- Server side authentication plug-in: dbzsecServerAuthPluginInit()
- Client side authentication plug-in: db2secC] ientAuthPluginInit()
- Group plug-in: dbzsecGroupPluginInit()

This function is known as the plug-in initialization function. The plug-in initialization function initializes the specified plug-in and provides Db2 with information that it requires to call the plug-in's functions. The plug-in initialization function accepts the following parameters:

- A pointer to a structure containing pointers to all the APIs requiring implementation
- The highest version number of the function pointer structure that the Db2 instance invoking the plug-in can support
- A pointer to a function that adds messages to the dbzdiag files log log
- A pointer to an error message string
- The length of the error message

The following is a function signature for the initialization function of a group retrieval plug-in:

```
SQL_API_RC SQL_API_ FN dbzsecGroupP]uginInit( dbzint32 version, void #group_ fns dbzsecLogMessage *]ogMessage_fn, char **errormsg_ dbzint32 *errormsgIen) ;
```

Note: If the plug-in library is compiled as C++, all functions must be declared with: extern "C"\_ Db2 relies on the underlying operating system dynamic loader to handle the C++ constructors and destructors used inside of a C++ user-written plug-in library:

The initialization function is the only function in the plug-in library that uses a prescribed function name. The other plug-in functions are referenced through function pointers returned from the initialization function. Server plug-ins are loaded when the Db2 server starts\_ Client plug-ins are loaded when required on

the client: Immediately after Db2 loads a plug-in library it will resolve the location of this initialization function and call it: The task of this function is as follows: specific

- Cast the functions pointer to a pointer to an appropriate functions structure
- Specify the version number of the function pointer structure returned being
- Specify the pointers to the other functions in the library

Db2 can potentially call the plug-in initialization function more than once This situation can occur when an application dynamically loads the Db2 client unloads it, and reloads it again, then performs authentication functions from a plug-in both before and after reloading: In this situation, the plug-in library might not be unloaded and then re-loaded; however; this behavior varies depending on the operating system. library,

Another example of Db2 issuing multiple calls to a plug-in initialization function occurs the execution of stored procedures Or federated calls, where the database server can itself act as a client: If the client and server plug-ins on the database server are in the same file, Db2 could the plug-in initialization function twice. during system call

If the plug-in detects that db2secGroupPluginInit is called more than once, it should handle this event as if it was directed to terminate and reinitialize the plug-in library: such, the plug-in initialization function should do the entire cleanup tasks that a call to dbzsecPluginTerm would do before returning the set of function pointers again: As

On a Db2 server running on UNIX or Linux-based operating system, Db2 can potentially load and initialize plug-in libraries more than once in different processes\_

## Restrictions for developing security plug-in libraries

There are certain restrictions that affect how develop plug-in libraries. you

The following list outlines the restrictions for developing plug-in libraries.

## C-linkage

Plug-in libraries must be linked with C-linkage. Header files providing the prototypes, data structures needed to implement the plug-ins, and error code definitions are provided for C/C++ only: Functions that Db2 will resolve at load time must be declared with extern "C" if the plug-in library is compiled as C++

## NET common language runtime is not supported

The .NET common language runtime (CLR) is not supported for compiling and source code for plug-in libraries. linking

## Signal handlers

Plug-in libraries must not install signal handlers or change the signal mask, because this will interfere with the Db2 signal handlers Interfering with the Db2 signal handlers could seriously interfere with the ability for Db2 to report and recover from errors, including traps in the plug-in code itself: Plug-in libraries should also never throw C++ exceptions, as this can also interfere with the error handling used in Db2.

## Thread-safe

Plug-in libraries must be thread-safe and re-entrant The plug-in initialization function is the only API that is not required to be re-entrant:

The plug-in initialization function could potentially be called multiple times from different processes; in which case, the plug-in will cleanup all used resources and reinitialize itself.

## Exit handlers and overriding standard C library and operating system calls

Plug-in libraries should not override standard C library or operating system calls. Plug-in libraries should also not install exit handlers or pthread\_atfork handlers. The use of exit handlers is not recommended because could be unloaded before the program exits. they

## Library dependencies

On Linux or UNIX, the processes that load the plug-in libraries can be setuid or setgid, which means that will not be able to rely on the SLD\_LIBRARY\_PATH, SSHLIB\_PATH, or SLIBPATH environment variables to find dependent libraries. Therefore, plug-in libraries should not depend on additional libraries, unless any dependent libraries are accessible through other methods, such as the following situations: they

- By being in /1ib or /usr/lib
- By having the directories reside in specified OS-wide (such as in the Id.so.conf file on Linux) they being
- By being specified in the RPATH in the plug-in library itself

This restriction is not applicable to Windows operating systems.

## Symbol collisions

When possible, plug-in libraries should be compiled and linked with any available options that reduce the likelihood of collisions, such as those that reduce unbound external symbolic references: example, use of the "~Bsymbolic" linker option on HP; Solaris, and Linux can help prevent problems related to symbol collisions However; for plug-ins written on AIX, do not use the "-brt] linker explicitly or implicitly: symbol For option

## 32-bit and 64-bit applications

32-bit applications must use 32-bit plug-ins: 64-bit applications must use 64-bit plug-ins. Refer to the topic about 32-bit and 64-bit considerations for more details.

## Text strings

Input text strings are not guaranteed to be null-terminated, and output strings are not required to be null-terminated: Instead, integer lengths are given for all input strings, and pointers to integers are given for lengths to be returned.

## Passing authorization ID parameters

An authorization ID (authid) parameter that Db2 passes into a plug-in (an input authid parameter) will contain an upper-case authid, with padded blanks removed An authid parameter that a plug-in returns to Db2 (an output authid parameter) does not require any special treatment, but Db2 will fold the authid to upper-case and it with blanks according to the internal Db2 standard. pad

## Size limits for parameters

The plug-in APIs use the following as length limits for parameters:

#define DBZSEC\_MAX\_AUTHID\_LENGTH 255

#define DBZSEC\_MAX\_USERID\_LENGTH 255

#define DBZSEC\_MAX\_USERNAMESPACELENGTH 255

#define DBZSEC\_MAX\_PASSWORD\_LENGTH 255

#define DBZSEC\_MAX\_DBNAMELENGTH 128

A particular plug-in implementation may require Or enforce smaller maximum lengths for the authorization IDs, user IDs, and passwords. In particular; the operating system authentication plug-ins supplied with Db2 database systems are restricted to the maximum user; group and namespace length limits enforced by the operating system for cases where the operating system limits are lower than those stated previously:

## Security plug-in library extensions in AIX

On AIX systems, security plug-in libraries can have a file name extension of a or .SO\_ The mechanism used to load the plug-in library depends on which extension is used:

- Plug-in libraries with a file name extension of a are assumed to be archives containing shared object members. These members must be named shr.o (32-bit) or shr64.0 (64-bit). A single archive can contain both the 32-bit and 64-bit members, allowing it to be deployed on both types of platforms.

For example, to build a 32-bit archive style plug-in library:

xlc\_r -qmkshrobj ~0 shr.0 MyPlugin.c ~bE:MyPlugin.exp ar rv MyPlugin.a shr.0

- Plug-in libraries with a file name extension of so are assumed to be dynamically loadable shared objects. Such an object is either 32-bit or 64-bit,\_depending on the compiler and linker options used when it was built: For example, to build a 32-bit plug-in library:

xlc\_r -qmkshrobj ~0 MyPlugin.so MyPlugin.c ~bE:MyPlugin.exp

On all platforms other than AIX, security plug-in libraries are always assumed to be dynamically loadable shared objects.

Fork

Plug-in libraries should not fork because file descriptors and sockets will be duplicated in the child process, and this can cause hangs or incorrect behavior: In particular; it can cause false file lock conflicts if child was forked when we had an open file descriptor on that file: There is also the possibility that the fork will inherit many other resources like semaphores.

## Restrictions on security plug-ins

There are certain restrictions on the use of security plug-ins.

## Db2 database family support restrictions

You cannot use GSS-API plug-in to authenticate connections between Db2 clients on Linux, UNIX, and Windows and another Db2 family servers such as Db2 for z/0S.

You also cannot authenticate connections from another Db2 database family product, as a client; to Db2 server on acting

If you use Db2 client on Linux, UNIX , or Windows to connect to other Db2 database family servers, you can use client-side user ID / password plug-ins (such as the IBM shipped operating authentication plug-in), Or YOu can write your own user ID / password plug-in. You can also use the built-in Kerberos plug-ins, or implement your own\_ system

With a Db2 client on Linux, UNIX, or Windows, you should not catalog database using the GSSPLUGIN authentication type:

Restrictions 0n the authorization ID: In Db2 Version 9.5 and later; you can have a 128-byte authorization ID. However; when the authorization ID is interpreted as an operating system user ID O group name, Db2 imposed naming restrictions apply For example, the Linux and UNIX operating systems can contain up to 8 characters and the Windows operating systems can contain up to 30 characters for user IDs and group names. Therefore, if you want to connect as user that has a 128-byte authorization ID, YOU need to write your own security plug-in. In the plug-in, you can use the extended sizes for the authorization ID. For example, YOU can give your security plug-in 30-byte user ID and, authentication, it returns 128-byte authorization ID that you can connect to. during

## InfoSphere Federation Server support restrictions

Db2 II does not support the use of delegated credentials from a GSS API plug-in to establish outbound connections to data sources\_ Connections to data sources must continue to use the CREATE USER MAPPING command\_

## Database Administration Server support restrictions

The Db2 Administration Server (DAS) does not support security plug-ins. The DAS only supports the operating system authentication mechanism:

## Security plug-in problem and restriction for Db2 clients (Windows)

When developing security plug-ins that will be deployed in Db2 clients on Windows operating systems, do not unload any auxiliary libraries in the plug-in termination function. This restriction to all types of client security plug-ins, including group, user ID and password, Kerberos, and GSS-API plug-ins. Since these termination APIs such as db2secPluginTerm, db2secClientAuthPluginTerm and db2secServerAuthPluginTerm are not called on any Windows platform, you need to do the appropriate resource cleanup: applies

This restriction is related to cleanup issues associated with the unloading of DLLs on Windows.

## Loading plug-in libraries on AIX with extension Of .a Or .SO

On AIX, security plug-in libraries can have a file name extension of a or So\_ The mechanism used to load the plug-in depends on which extension is used: library

- Plug-in libraries with a file name extension of Plug-in libraries with file name extensions of a are assumed to be archives

For example, to build a 32-bit archive style plug-in library:

- containing shared object members These members must be named shr.0 (32-bit) or shr64.0 (64-bit): A single archive can contain both the 32-bit and 64-bit members, allowing it to be deployed on both types of platforms
- ~qmkshrobj -0 shr.0 MyPlugin.€ ~bE:MyPlugin.exp ar rv MyPlugin.a shr.0 xlc\_r
- Plug-in libraries with a file name extension of So Plug-in libraries with file name extensions of so are assumed to be dynamically loadable shared objects. Such an object is either 32-bit or 64-bit, depending on the compiler and linker options used when it was built: For example, to build 32-bit plug-in library:

xlc\_r -qmkshrobj -0

On all platforms other than AIX, security plug-in libraries are always assumed to be dynamically loadable shared objects.

## GSS-API security plug-ins do not support message encryption and signing

Message encryption and signing is not available in GSS-API security plug-ins:

## Return codes for security plug-ins

All security plug-in APIs must return an integer value to indicate the success or failure of the execution of the API A return code value of 0 indicates that the API ran successfully All negative return codes, with the exception of -3, -4, and -5, indicate that the API encountered error an

All negative return codes returned from the security-plug-in APIs are mapped to SQLCODE -1365, SQLCODE -1366, or SQLCODE -30082, with the exception of return codes with the -3, -4, or -5. The values -3, -4, and -5 are to indicate whether or not an authorization ID represents a valid user or group. used

All the security plug-in API return codes are defined in db2secPlugin.h, which can be found in the Db2 include directory: SQLLIB/include:

Details regarding all of the security plug-in return codes are presented in the following table:

Table 40. Security plug-in return codes

| Return code   | Define value                      | Meaning                                                                                                                                                               | Applicable APIs                                                                           |
|---------------|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|
|               |                                   | The plug-in API executed successfully:                                                                                                                                |                                                                                           |
| -1            | DBZSEC PLUGINUNKNOWNERROR         | The plug-in API encountered an unexpected error:                                                                                                                      | All                                                                                       |
| -2            | DBZSEC_PLUGIN_BADUSER             | The user ID passed in as input is not defined:                                                                                                                        | db2secGenerateInitialCred db2secValidatePassword db2secRemapUserid dbzsecGetGroupsForUser |
| 3             | DBZSEC_PLUGIN INVALIDUSERORGROUP  | No such user or group.                                                                                                                                                | db2secDoesAuthIDExist db2secDoesGroupExist                                                |
| -4            | DBZSEC_PLUGIN USERSTATUSNOTKNOWN  | Unknown user status. This is not treated as an error by Db2; it is used by GRANT statement to determine if an authid represents a user or an operating group. system  | db2secDoesAuthIDExist                                                                     |
| -5            | DBZSEC_PLUGIN GROUPSTATUSNOTKNOWN | Unknown group status: This is not treated as an error by Db2; it is used by GRANT statement to determine if an authid represents a user or an operating group. system | db2secDoesGroupExist                                                                      |

Table 40. Security plug-in return codes (continued)

| Return code   | Define value                              | Meaning                                                                                                       | Applicable APIs                                                             |
|---------------|-------------------------------------------|---------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| 6             | DBZSEC_PLUGIN_UID_EXPIRED                 | User ID expired:                                                                                              | db2secValidatePassword db2GetGroupsForUser db2secGenerateInitialCred        |
|               | DBZSEC_PLUGIN_PWD_EXPIRED                 | Password expired.                                                                                             | db2secValidatePassword db2GetGroupsForUser db2secGenerateInitialCred        |
| -8            | DBZSEC_PLUGIN_USER_REVOKED                | User revoked                                                                                                  | db2secValidatePassword db2GetGroupsForUser                                  |
| -9            | DBZSEC_PLUGIN USER_SUSPENDED              | User suspended.                                                                                               | db2secValidatePassword db2GetGroupsForUser                                  |
| -10           | DBZSEC  PLUGIN BADPWD                     | Bad password_                                                                                                 | db2secValidatePassword db2secRemapUserid dbzsecGenerateInitialCred          |
| -11           | DBZSEC_PLUGIN BAD_NEWPASSWORD             | Bad new password:                                                                                             | db2secValidatePassword dbzsecRemapUserid                                    |
| -12           | DBZSEC_PLUGIN CHANGEPASSWORD NOTSUPPORTED | Change password not supported.                                                                                | db2secValidatePassword dbzsecRemapUserid db2secGenerateInitialCred          |
| -13           | DBZSEC PLUGINNOMEM                        | Plug-in attempt to allocate memory failed due to insufficient memory:                                         | All                                                                         |
| 14            | DBZSECPLUGIN DISKERROR                    | Plug-in encountered disk error                                                                                | All                                                                         |
| -15           | DBZSEC PLUGIN NOPERM                      | Plug-in attempt to access file failed because of wrong permissions on the file:                               | All                                                                         |
| -16           | DBZSEC_PLUGIN_NETWORKERROR                | Plug-in encountered a network error                                                                           |                                                                             |
| -17           | DBZSEC PLUGIN CANTLOADLIBRARY             | Plug-in is unable to load required library:                                                                   | db2secGroupPluginInit db2secClientAuthPluginInit db2secServerAuthPluginInit |
| -18           | DBZSEC  PLUGIN CANT OPEN_FILE             | Plug-in is unable to open and read a file for a reason other than missing file or inadequate file permissions | All                                                                         |
| -19           | DBZSEC_PLUGIN_FILENOTFOUND                | Plug-in is unable to open and read file, because the file is missing from the file system.                    | All                                                                         |

Table 40. Security plug-in return codes (continued)

|   Return code | Define value                          | Meaning                                                                                                                                                                           | Applicable APIs                                                             |
|---------------|---------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
|           -20 | DBZSEC_PLUGIN CONNECTION_DISALLOWED   | The plug-in is refusing the connection because of the restriction on which database is allowed to connect; or the TCP /IP address cannot connect to specific database:            | All server-side plug-in APIs.                                               |
|           -21 | DBZSECPLUGIN NOCRED                   | GSS API plug-in only: initial client credential is missing:                                                                                                                       | db2secGetDefaultLoginContext db2secServerAuthPluginInit                     |
|           -22 | DBZSEC_PLUGIN_CRED_EXPIRED            | GSS API plug-in only: client credential has expired:                                                                                                                              | db2secGetDefaultLoginContext db2secServerAuthPluginInit                     |
|           -23 | DBZSEC_PLUGIN BADPRINCIPALNAME        | GSS API plug-in only: the principal name is invalid.                                                                                                                              | db2secProcessServer PrincipalName                                           |
|           -24 | DBZSEC PLUGIN NO_CON_DETAILS          | This return code is returned by the dbzsecGetConDetails callback (for example, from Db2 to the plug-in) to indicate that Db2 is unable to determine the client's TCP /IP address_ | db2secGetConDetails                                                         |
|           -25 | DBZSEC_PLUGIN BAD_INPUT_PARAMETERS    | Some parameters are not valid or are missing when plug-in API is called:                                                                                                          | All                                                                         |
|           -26 | DBZSEC_PLUGIN INCOMPATIBLE VER        | The version of the APIs reported by the plug-in is not compatible with Db2                                                                                                        | db2secGroupPluginInit db2secClientAuthPluginInit db2secServerAuthPluginInit |
|           -27 | DBZSEC_PLUGIN_PROCESS_LIMIT           | Insufficient resources are available for the plug-in to create a new process:                                                                                                     | All                                                                         |
|           -28 | DBZSEC_PLUGIN_NO_LICENSES             | The plug-in encountered a user license problem. A possibility exists that the underlying mechanism license has reached the limit_                                                 | All                                                                         |
|           -29 | DBZSEC PLUGIN ROOT NEEDED             | The plug-in is trying to run an application that requires root privileges.                                                                                                        | All                                                                         |
|           -30 | DBZSEC PLUGIN UNEXPECTED SYSTEM_ERROR | The plug-in encountered an unexpected system error: A possibility exists that the current system configuration is not supported                                                   | All                                                                         |

## Error message handling for security plug-ins

When an error occurs in a security plug-in API, the API can return ASCII text string in the errormsg field to provide a more specific description of the problem than the return code: an

For example, the errormsg string can contain "File /home/dbzinstl/mypasswd.txt does not exist Db2 will write this entire into the Db2 administration notification and will also include a truncated version as token in some SQL messages. Because tokens in SQL messages can only be of limited length, these messages should be kept short, and important variable portions of these messages should appear at the front of the string: To aid in debugging, consider the name of the security plug-in to the error message: string adding

For non-urgent errors, such as password expired errors, the errormsg will only be dumped when the DIAGLEVEL database manager configuration parameter is set at 4 string

The memory for these error messages must be allocated by the security plug-in: Therefore, the plug-ins must also provide an API to free this memory: dbzsecFreeErrormsg:

The errormsg field will only be checked by Db2 if an API returns a non-zero value: Therefore, the plug-in should not allocate memory for this returned error message if there is no error:

At initialization time a message logging function pointer; ]ogMessage\_fn, is passed to the group, client, and server plug-ins. The plug-ins can use the function to log any debugging information to the dbzdiag files. For example: log

Log an message indicate init successfu] (IogMessage\_fn) ) (DBZSEC\_LOG\_CRITICAL\_ "dbzsecGroupPluginInit successfu]

For more details about each parameter for the dbzsecLogMessage function, refer to the initialization API for each of the plug-in types.

## Calling sequences for the security plug-in APIs

The sequence with which the Db2 database manager calls the security plug-in APIs varies according to the scenario in which the security plug-in API is called.

These are the main scenarios in which the Db2 database manager calls security plug-in APIs:

- On a client for a database connection (implicit and explicit)
- CLIENT
- Server-based (SERVER, SERVER\_ENCRYPT, DATA\_ENCRYPT)
- GSSAPI and Kerberos
- On a client, server; or gateway for local authorization
- On a server for a database connection
- On server for a grant statement
- On a server to list of groups to which an authorization ID belongs get

Note: The Db2 database servers treat database actions requiring local authorizations, such as db2start, db2stop, and dbztrc like client applications.

For each of these operations, the sequence with which the Db2 database manager calls the security plug-in APIs is different: Following are the sequences of APIs called by the Db2 database manager for each of these scenarios.

## CLIENT implicit

application calls the following security plug-in APIs:

- dbzsecGetDefaultLoginContext();
- dbzsecValidatePassword();
- db2secFreetoken();

For an implicit authentication, that is, when you connect without specifying a particular user ID or password, the db2secValidatePassword API is called if you are user ID / password plug-in. This API permits plug-in developers to prohibit implicit authentication if necessary using

## CLIENT explicit

On an authentication, that is, when you connect to a database in which both the user ID and password are specified, if the authentication database manager configuration parameter is set to CLIENT, the Db2 client application calls the following security plug-in APIs multiple times if the implementation requires it: explicit

- db2secRemapUserid();
- dbzsecValidatePassword();
- dbzsecFreeToken();

## Server-based (SERVER, SERVER ENCRYPT, DATA ENCRYPT) implicit

On an implicit authentication, when the client and server negotiate user ID / password authentication (for example, when the srvcon auth parameter at the server is set to SERVER; SERVER\_ENCRYPT, DATA ENCRYPT, or DATA\_ENCRYPT\_CMP), the client application calls the following security plug-in APIs:

- db2secGetDefaultLoginContext();
- dbzsecFreeToken();

## Server-based (SERVER, SERVER\_ENCRYPT; DATA ENCRYPT) explicit

On an explicit authentication, when the client and server negotiate userid / password authentication (for example, when the srvcon auth parameter at the server is set to SERVER; SERVER\_ENCRYPT, DATA\_ENCRYPT, or DATA ENCRYPT\_CMP), the client application calls the following security plug-in APIs:

- db2secRemapUserid();

## GSSAPI and Kerberos implicit

On an implicit authentication, when the client and server negotiate GSS-API or Kerberos authentication (for example, when the srvcon\_auth parameter at the server is set to KERBEROS; KRB\_SERVER\_ENCRYPT, GSSPLUGIN, or GSS\_SERVER\_ENCRYPT), the client application calls the following security plug-in APIs. (The call to gss\_init sec context() uses GSS\_C\_NO\_CREDENTIAL as the input credential.)

- dbzsecGetDefaultLoginContext();
- db2secProcessServerPrincipalName();
- gss\_init\_sec\_context();
- gss\_release\_buffer();
- gss\_release\_name();
- gss\_delete\_sec\_context();
- dbzsecFreeToken();

With multi-flow GSS-API support, gss\_init\_sec\_context() can be called multiple times if the implementation requires it

## GSSAPI and Kerberos explicit

If the negotiated authentication type is GSS-API or Kerberos, the client application calls the following security plug-in APIs for GSS-API plug-ins in the following sequence: These APIs are used for both implicit and explicit authentication unless otherwise stated:

- dbzsecProcessServerPrincipalName();
- db2secGenerateInitialCred(); (For explicit authentication only)
- gss\_init\_sec\_context();
- gss\_release\_buffer ();
- gss\_release\_name();
- gss\_release\_cred();
- dbzsecFreeInitInfo();
- gss\_delete\_sec\_context();
- dbzsecFreeToken();

The API gss\_init\_sec\_context() might be called multiple times if a mutual authentication token is returned from the server and the implementation requires it:

## On client, server; or gateway for local authorization

For a local authorization, the Db2 command used calls the following security plug-in APIs: being

- dbzsecGetDefaultLoginContext();
- dbzsecGetGroupsForUser();
- db2secFreeToken();
- db2secFreeGroupList();

These APIs are called for both user ID / password and GSS-API authentication mechanisms.

## On server for a database connection

For a database connection on the database server; the Db2 agent process or thread calls the following security plug-in APIs for the user ID / password authentication mechanism:

- dbzsecValidatePassword(); Only if the authentication database configuration parameter is not CLIENT
- db2secGetAuthIDs();
- dbzsecGetGroupsForUser();
- dbzsecFreeToken();
- dbzsecFreeGroupList();

For a CONNECT to database, the Db2 agent process thread calls the following security plug-in APIs for the GSS-API authentication mechanism:

- gss\_accept\_sec\_context();
- gss\_release\_buffer(;
- dbzsecGetAuthIDs();
- db2secGetGroupsForUser();
- gss\_delete\_sec\_context();
- db2secFreeGroupListMemory();

## On a server for a GRANT statement

For a GRANT statement that does not specify the USER or GROUP agent process or thread must be able to determine if userl is a user; a group, or both. Therefore, the Db2 agent process or thread calls the following security plug-in APIs:

- dbzsecDoesGroupExist();
- db2secDoesAuthIDExist);

## On a server to a list of groups to which an authid belongs get

From your database server; when you need to a list of groups to which an authorization ID belongs, the Db2 agent process or thread calls the following security plug-in API with only the authorization ID as input: get

- db2secGetGroupsForUser();

There will be no token from other security plug-ins.

## Chapter 9. Security plug-in APIs

To enable you to customize the Db2 database system authentication and group membership lookup behavior; the Db2 database system provides APIs that you can use to modify existing plug-in modules or build new security plug-in modules.

When you develop a security plug-in module, you need to implement the standard authentication or group membership lookup functions that the Db2 database manager will invoke. For the three available types of plug-in modules, the functionality you need to implement is as follows:

## Group retrieval

Retrieves group membership information for a given user and determines if a given string represents a valid group name

## User IDlpassword authentication

Authentication that identifies the default security context (client only), validates and optionally changes a password, determines if a given represents valid user (server only) , modifies the user ID or password provided on the client before it is sent to the server (client only), returns the Db2 authorization ID associated with a given user: string

## GSS-API authentication

Authentication that implements the required GSS-API functions, identifies the default security context (client side only) , generates initial credentials based on user ID and password, and optionally changes password (client side only), creates and accepts security tickets, and returns the Db2 authorization ID associated with a given GSS-API security context:

The following list shows the definitions for terminology used in the descriptions of the plug-in APIs:

## Plug-in

dynamically loadable library that Db2 will load to access user-written authentication or group membership lookup functions.

## Implicit authentication

A connection to database without specifying user ID or password.

## Explicit authentication

A connection to database in which both the user ID and password are specified.

## Authid

An internal ID representing an individual or group to which authorities and privileges within the database are granted. Internally, a Db2 authid is folded to upper-case and is a minimum of 8 characters (blank padded to 8 characters). Currently, Db2 requires authids, user IDs, passwords, group names, namespaces, and domain names that can be represented in 7-bit ASCII:

## Local authorization

Authorization that is local to the server or client that implements it, that checks if a user is authorized to perform an action (other than connecting to the database), such as starting and stopping the database manager turning Db2 trace on and off, or updating the database manager configuration.

## Namespace

A collection or grouping of users within which individual user identifiers must be unique. Common examples include Windows domains and Kerberos Realms. For example, within the Windows domain all user names must be unique: For example, "userl@usa.company.com' The same user ID in another domain, as in the case of userl @canada company com' however refers to a different person. A qualified user identifier includes a user ID and namespace for example, user@domain name" or "domain user fully pair;

Input

Indicates that Db2 will enter in the value for the security plug-in API parameter:

Output

Indicates that the security plug-in API will specify the value for the API parameter:

## APIs for group retrieval plug-ins

For the group retrieval plug-in module, you need to implement the following APIs: dbzsecGroupPluginInit

Note: The db2secGroupPluginInit API takes as input a pointer; *]ogMessage\_fn, to an API with the following prototype: SQL\_API\_RC (SQL\_API\_FN dbzsecLogMessage) void *data\_ dbzint32 Iength ) ;

The dbzsecLogMessage API allows the plug-in to messages to the db2diag files for debugging or informational purposes. This API is provided by the Db2 database system, so you need not implement it: log log

- dbzsecP]uginTerm
- dbzsecGetGroupsForUser
- dbzsecDoesGroupExist
- dbzsecFreeGroupListMemory
- dbzsecFreeErrormsg
- The only API that must be resolvable externally is dbzsecGroupPluginInit. This API will take void parameter; which should be cast to the type:

```
typedef struct dbzsecGroupFunctions 1 dbzint32 version; dbzint32 plugintype; SQL_API_RC (SQL_API_FN dbzsecGetGroupsForUser) const char *authid, dbzint3z authidlen, const char *userid, db2int32 useridlen, const char *usernamespace dbzint3z usernamespacelen, dbzint3z usernamespacetype, const char #dbname dbzint32 dbnamelen, const void *token. dbzint32 tokentype,
```

```
dbzint32 location, const char *authpluginname dbzint32 authpluginnamelen, void dbzint32 *numgroups char #*errormsg dbzint32 *errormsglen ) ; SQL_API_RC (SQL_API_FN dbzsecDoesGroupExist) const char *groupname dbzint3z groupnamelen char **errormsg, dbzint3z *errormsg]en ) ; SQL_API_RC (SQL_API_FN dbzsecFreeGroupListMemory) void #ptr, char **errormsg dbzint32 *errormsg]en ) ; SQL_API_RC (SQL_API_ FN dbzsecFreeErrormsg) char *msgtobefree ) SQL_API_RC (SQL_API FN dbzsecPluginTerm) char **errormsg, dbzint32 *errormsg]en dbzsecGroupFunctions_l;
```

The db2secGroupPluginInit API assigns the addresses for the rest of the externally available functions.

Note: The \_1 indicates that this is the structure corresponding to version 1 of the on.

## dbzsecDoesGroupExist API Check if group exists

Determines whether an authid represents a group.

If the groupname exists, the API must be able to return the value DBZSEC\_PLUGIN\_OK, to indicate success. It must also be able to return the value DBZSEC\_PLUGIN\_INVALIDUSERORGROUP if the group name is not valid. It is permissible for the API to return the value DBZSEC\_PLUGIN\_GROUPSTATUSNOTKNOWN if it is impossible to determine if the input is a valid group. If an invalid group (DBZSEC\_PLUGIN\_INVALIDUSERORGROUP) or group not known (DBZSEC\_PLUGIN\_GROUPSTATUSNOTKNOWN) value is returned, Db2 might not be able to determine whether the authid is a group or user when issuing the GRANT statement without the keywords USER and GROUUP; which would result in the error SQLCODE -569, SQLSTATE 56092 returned to the user: being

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN  *dbzsecDoesGroupExist) const char *groupname dbzint32 groupnamelen, char **errormsg, dbzint3z *errormsg]en
```

## dbzsecDoesGroupExist API parameters

## groupname

Input: An authid, upper-cased, with no trailing blanks.

## groupnamelen

Input: Length in bytes of the groupname parameter value

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secDoesGroupExist API execution is not successful.

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecFreeErrormsg API Free error message memory

Frees the memory used to hold an error message from a previous API call. This is the only API that does not return an error message. If this API returns an error; Db2 will it and continue: log

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN  *dbzsecFreeErrormsg) char *errormsg ) ;

## dbzsecFreeErrormsg API parameters

errormsg

Input: A pointer to the error message allocated from previous API call.

## dbzsecFreeGroupListMemory API Free group list memory

Frees the memory used to hold the list of groups from a previous call to db2secGetGroupsForUser API:

## API and data structure syntax

SQL\_API\_ RC SQL\_API\_ FN *dbzsecFreeGroupListMemory) void *ptr, char **errormsg, dbzint32 *errormsg]en )

## dbzsecFreeGroupListMemory API parameters

ptr Input: Pointer to the memory to be freed:

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secFreeGroupListMemory API execution is not successful:

## errormsglen

Output: A\_ pointer to an integer that indicates the length in bytes of the error message in the errormsg parameter: string

## dbzsecGetGroupsForUser API Get list of groups for user

Returns the list of groups to which a user

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN #dbzsecGetGroupsForUser) const char *authid, dbzint32 authidlen, const char *userid, dbzint32 useridlen, const char *usernamespace dbzint32 usernamespacelen, dbzint32 usernamespacetype\_ const char #dbname db2int32 dbnamelen, void *token dbzint32 tokentype, db2int32 location, const char *authpluginname db2int32 authpluginnamelen\_ void **grouplist, dbzint32 *numgroups char **errormsg dbzint32 *errormsg]en ) ;

## dbzsecGetGroupsForUser API parameters

authid  Input: This parameter value is an SQL authid, which means that Db2 converts it to an uppercase character string with no trailing blanks. Db2 always provides a non-null value for the authid parameter: The API must be able to return list of groups to which the authid belongs without depending on the other input parameters. It is permissible to return shortened or empty list if this cannot be determined.

If a user does not exist, the API must return the return code DBZSEC\_PLUGIN\_BADUSER Db2 does not treat the case of a user not existing as an error; since it is permissible for an authid to not have any groups associated with it: For example, the db2secGetAuthids API can return an authid that does not exist on the operating system. The authid is not associated with any groups, however; it can still be assigned privileges directly:

If the API cannot return complete list of groups only the authid, then there will be some restrictions on certain SQL functions related to group support: For a list of possible problem scenarios, see the Usage notes section in this topic using

## authidlen

Input Length in bytes of the authid parameter value. The Db2 database manager always provides non-zero value for the authidlen parameter:

userid

Input: This is the user ID corresponding to the authid When this API is called on the server in a non-connect scenario, this parameter will not be filled by Dbz.

## useridlen

Input: Length in bytes of the userid parameter value:

## usernamespace

Input: The namespace from which the user ID was obtained. When the user ID is not available, this parameter will not be filled by the Db2 database manager:

## usernamespacelen

Input: Length in bytes of the usernamespace parameter value

## usernamespacetype

Input: The type of namespace. Valid values for the usernamespacetype parameter (defined in dbzsecPlugin.h) are:

- DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE Corresponds to a username style like domain | myname
- DBZSEC\_NAMESPACE\_USER\_PRINCIPAL Corresponds to a username like myname@domain ibm.com style

Currently, the Db2 database only supports the value DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE: When the user ID is not available, the usernamespacetype parameter is set to the value DBZSEC\_USER\_NAMESPACE\_UNDEFINED (defined in dbzsecPlugin.h): system

## dbname

Input Name of the database connected to. This parameter can be NULL in non-connect scenario being

## dbnamelen

Input: Length in bytes of the dbname parameter value. This parameter is set to 0 if dbname parameter is NULL in a non-connect scenario.

token

Input: A pointer to data provided by the authentication plug-in. It is not used by Db2. It provides the plug-in writer with the ability to coordinate user and group information: This parameter might not be provided in all cases (for example, in a non-connect scenario) , in which case it will be NULL. If the authentication plug-in used is GSS-API based, the token will be set to the GSS-API context handle (gss\_ctx\_id\_t).

## tokentype

Input: Indicates the type of data provided by the authentication plug-in. If the authentication plug-in used is GSS-API based, the token will be set to the GSS-API context handle (gss\_ctx\_id\_t) If the authentication plug-in used is user ID / password based, it will be a generic type. Valid values for the tokentype parameter (defined in dbzsecP]ugin.h) are:

- DBZSEC\_GENERIC: Indicates that the token is from a user ID /password based plug-in:
- DBZSEC\_GSSAPI\_CTX\_HANDLE: Indicates that the token is from GSS-API (including Kerberos) based plug-in.

## location

Input: Indicates whether Db2 is calling this API on the client side Or server side. Valid values for the location parameter (defined in db2secPlugin.h) are:

- DBZSECSERVER\_SIDE: The API is to be called on the database server:
- DBZSEC\_CLIENT\_SIDE: The API is to be called on a client:

## authpluginname

Input: Name of the authentication plug-in that provided the data in the token: The dbzsecGetGroupsForUser API might use this information in determining the correct group memberships  This parameter might not be filled by Db2 if the authid is not authenticated (for example, if the authid does not match the current connected user)

## authpluginnamelen

Input: Length in bytes of the authpluginname parameter value:

## grouplist

db2secFreeGroupListMemory API that Db2 will call to free the memory

Output: List of groups to which the user belongs The list of groups must be returned as a pointer to a section of memory allocated by the plug-in containing concatenated varchars (a varchar is a character array in which the first byte indicates the number of bytes following the first byte). The length is an unsigned char (1 byte) and that limits the maximum length of groupname to 255 characters For example, IOO6GROUP1 OOZMYGROUP | OO8MYGROUP3" . Each group name should be a valid Db2 authid The memory for this array must be allocated by the plug-in. The plug-in must therefore provide an API, such as the

## numgroups

Output: The number of groups contained in the groupl ist parameter

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secGetGroupsForUser API execution is not successful.

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## Usage notes

The following list describes the scenarios that which problems can occur if an incomplete group list is returned by this API to Dbz:

- Alternate authorization is provided in CREATE SCHEMA statement: Group lookup will be performed against the AUTHORIZATION NAME parameter if there are nested CREATE statements in the CREATE SCHEMA statement:
- Processing a jar file in an MPP environment: In an MPP environment, the jar processing request is sent from the coordinator node with the session authid: The node received the requests and process the jar files based on the privilege of the session authid (the user executing the jar processing requests). catalog
- Remove jar file: The session authid needs to have one of the following rights: DBADM, or DROPIN (implicit or explicit on the jar schema), or is the definer of the jar file: The operation will fail if the rights stated previously are granted to group containing the session authid, but not explicitly to the session authid, and if the session authid is not the definer of the jar file:
- Install jar file: The session authid needs to have one of the following rights: DBADM, or CREATEIN (implicit or explicit on the jar schema) The operation will fail if the rights stated previously are granted to group containing the session authid, but not explicitly to the session authid.
- Replace jar file: This is same as removing the jar file, followed by installing the jar file. Both of the scenarios described previously apply:
- When SET SESSION\_USER statement is issued. Subsequent Db2 operations are run under the context of the authid specified by this statement These operations will fail if the privileges required are owned by one of the SESSION\_USER's group is not explicitly granted to the SESSION\_USER authid.

## dbzsecGroupPluginlnit API Initialize group plug-in

Initialization API, for the group-retrieval plug-in, that the Db2 database manager calls immediately after loading the plug-in:

## API and data structure syntax

SQL\_API\_RC SQL\_API\_FN dbzsecGroupPluginInit

db2int32 version, void *group\_fns . dbzsecLogMessage *]ogMessage char **errormsg, fn,

## dbzsecGroupPluginlnit API parameters

## version

Input: The highest version of the API supported by the instance loading that plugin. The value DBZSEC\_API\_ VERSION (in dbzsecPlugin.h) contains the latest version number of the API that the Db2 database manager currently supports.

## group\_fns

Output: A pointer to the db2secGroupFunctions &lt;version\_number&gt; (also known as group\_functions\_&lt;version\_numberz) structure. The db2secGroupFunctions\_ &lt;version number&gt; structure contains pointers to the APIs implemented for the group-retrieval plug-in: In future, there might be different versions of the APIs (for example, dbzsecGroupFunctions\_ &lt;version\_number&gt;) , s0 the group\_fns parameter is cast as pointer to the db2secGroupFunctions\_&lt;version\_number&gt; structure corresponding to the version the plug-in has implemented. The first parameter of the group\_functions\_&lt;version\_number&gt; structure tells Db2 casting is done only if the Db2 version is higher or equal to the version of the APIs that the plug-in has implemented: The version number represents the version of the APIs implemented by the plugin, and the pluginType

## logMessage\_fn

Input: A pointer to the db2secLogMessage API, which is implemented by the Db2 database system. The dbzsecGroupPluginInit API can call the db2secLogMessage API to messages to the dbzdiag files for debugging or informational purposes. The first parameter (Ievel) of db2secLogMessage API specifies the type of diagnostic errors that will be recorded in the dbzdiag files and the last two parameters are the message string and its length: The valid values for the first parameter of dbzsecLogMessage API (defined in dbzsecPlugin.h) are: log log

- DBZSEC\_LOG\_NONE: (0) No logging
- DBZSEC\_LOG\_CRITICAL: (1) Severe Error encountered
- DBZSEC\_LOG\_ERROR: (2) Error encountered
- DBZSEC\_LOG\_WARNING: (3) Warning
- DBZSEC LOG INFO: (4) Informational

The message text shows up in the db2diag log files only if the value of the Ievel parameter of the db2secLogMessage API is less than or equal to the diaglevel database manager configuration parameter: So for example, if you use the DBZSEC\_LOG INFO value, the message text shows up in the db2diag files only if the diaglevel database manager configuration parameter is set to 4. log

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secGroupPluginInit API execution is not successful.

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message in errormsg parameter: string

## dbzsecPluginTerm Clean up group plug-in resources

Frees resources used by the group-retrieval plug-in.

This API is called by the Db2 database manager just before it unloads the group-retrieval plug-in. It should be implemented in a manner that it does a proper cleanup of any resources the plug-in library holds, for example, free any memory allocated by the plug-in, close files that are still open, and close network connections\_ The plug-in is responsible for keeping track of these resources in order to free them. This API is not called on any Windows operating systems.

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN *dbzsecPluginTerm) char #*errormsg, dbzint32 *errormsg]en );
```

## dbzsecPlugin Term API parameters

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secPluginTerm API execution is not successful.

## errormsglen

Output: pointer to an integer that indicates the length in bytes of the error message in errormsg parameter string

## APIs for user IDlpassword authentication plug-ins

For the user ID / password plug-in module, you need to implement the following client-side APIs:

- db2secClientAuthPluginInit

Note: The db2secClientAuthPluginInit API takes as input a pointer, logMessage\_fn, to an API with the following prototype:

SQL\_API\_RC (SQL\_API\_FN dbzsecLogMessage)

void

*data dbzint32 Tength

) ;

The dbzsecLogMessage API allows the plug-in to messages to the dbzdiag files for debugging or informational purposes This API is provided by the Db2 database system, so you do not need to implement it: log log

- dbzsecClientAuthPluginTerm
- db2secRemapUserid (Optional)
- dbzsecGenerateInitialCred (Only used for gssapi)
- dbzsecGetDefaultLoginContext
- db2secValidatePassword
- dbzsecProcessServerPrincipalName (This is only for GSS-API)
- dbzsecFreeToken (Functions to free memory held by the DLL)

- db2secFreeErrormsg
- db2secFreeInitInfo
- The only API that must be resolvable externally is db2secClientAuthPluginInit: This API will take a void parameter; which should be cast to either:

typedef struct dbzsecUseridPasswordC] ientAuthFunctions\_1

dbzint32 version;

dbzint32 plugintype;

SQL\_API\_RC (SQL\_API\_ FN dbzsecGetDefaultLoginContext)

char dbzint32

authid[DBZSEC\_MAX\_AUTHID\_LENGTH]

*authidlen, char

dbzint32 *useridlen, userid[DBZSEC\_MAX\_USERID\_LENGTH]

dbzint32

char useridtype,

dbzint32

MAX\_USERNAMESPACE\_LENGTH] .

dbzint32 *usernamespacetype,

*usernamespacelen, const char *dbname

dbzint32

dbnamelen, void

** token, char

dbzint3z

**errormsg,

*errormsglen

Optiona]

SQL\_API\_RC (SQL\_API\_FN dbzsecRemapUserid)

char dbzint3z

userid[DBZSEC\_MAX\_USERID\_LENGTH]

char dbzint3z

*useridlen,

*usernamespacelen\_

usernamespace[DBZSEC\_ MAX\_USERNAMESPACE\_LENGTH]

dbzint32 *usernamespacetype char

dbzint32

password [DBZSEC\_MAX\_PASSWORD\_LENGTH]

char

#passwordlen dbzint32 #newpassword]e

newpassword [DBZSEC\_MAX PASSWORD\_LENGTH]

const char *dbname en,

dbzint3z dbnamelen,

char dbzint32

#*errormsg,

*errormsg]en

) ;

FN

dbzsecVal idatePassword)

const char *userid

dbzint32 useridlen,

const char *usernamespace

dbzint32

usernamespacelen,

dbzint32

usernamespacetype,

const char *password

dbzint32

passwordlen \_

const char *newpassword

dbzint3z newpasswordlen,

const char #dbname

dbzint3z

dbnamelen,

connection\_details,

void

#*token\_

char **errormsg

dbzint3z

*errormsg]en

);

SQL\_API\_RC (SQL\_API\_

FN

dbzsecFreeToken)

void **token,

```
char **errormsg dbzint32 *errormsg]en SQL_API_RC (SQL_API_FN dbzsecFreeErrormsg) char *errormsg ) SQL_API_RC (SQL_API_FN dbzsecC] ientAuthPluginTerm) char **errormsg dbzint3z *errormsg]en or typedef struct dbzsecGssapiC] ientAuthFunctions_ 1 dbzint32 version; dbzint32 plugintype; SQL_API_RC (SQL_API_ FN dbzsecGetDefaultLoginContext) char authid[DBZSEC_MAX_AUTHID_LENGTH] dbzint32 *authidl char userid[DBZSEC_MAX_USERID_LENGTH] dbzint32 dbzint32 useridtype, char usernames pace[DBZSEC_MAX_USERNAMESPACE_LENGTH]_ dbzint32 *usernames dbzint32 *usernamespacetype const char *dbname dbzint32 dbnamelen, void #*token, char #*errormsg dbzint32 *errormsg]en ) ; SQL_API_RC (SQL_API_FN dbzsecProcessServerPrincipa] Name) const void *data_ gss_ name t *gssName char **errormsg dbzint3z *errormsg]en ) ; SQL_API_RC (SQL_API_FN dbzsecGenerateInitialCred) const char *userid_ dbzint32 useridlen, const char *usernamespace dbzint32 usernamesp pacelen, dbzint32 usernamespacetype, const char #password dbzint32 password]en, const char dbzint32 newpassword]en, const char #dbname dbzint32 dbnamelen_ gss_cred_id_t *pGSSCredHandle, void ** initInfo, char #*errormsg, dbzint32 *errormsg]en ) ; en, en,
```

```
SQL_API_RC (SQL_API_ FN dbzsecFreeToken) void *token char **errormsg, dbzint32 *errormsg]en ); FN dbzsecFreeErrormsg) char *errormsg ) ; SQL_API_RC (SQL_API_FN db2secFreeInitInfo) void *initInfo char **errormsg db2int32 *errormsg]en ) SQL_API_RC (SQL_API_ FN dbzsecC] ientAuthPluginTerm) char **errormsg dbzint32 *errormsg]en GSS-API specific functions refer to dbzsecPlugin.h for parameter Tist*/ OM_uint32 (SQL_API FN gss_init_ sec_context ) (<parameter Tist>); OM_uint32 (SQL_API_FN gss_delete_sec context (<parameter Tist>); OM_uint32 (SQL_API_FN gss_display_status ) <parameter Tist>) OM_uint32 (SQL_API_ FN gss_release_buffer (<parameter Tistz); OM_uint32 (SQL_API_FN gss_release_cred (<parameter ist>); OM_uint32 (SQL_API_FN gss_release_ name <parameter Tistz) ;
```

You should use the dbzsecUseridPasswordClientAuthFunctions\_1 structure if you are writing a user ID /password plug-in. If you are writing a GSS-API (including Kerberos) plug-in, you should use the db2secGssapiClientAuthFunctions\_1 structure:

For the user ID /password plug-in you will need to implement the following server-side APIs: library,

The db2secServerAuthPluginInit API takes as input a pointer; *]ogMessage\_fn, to the db2secLogMessage API, and pointer; *getConDetails\_fn, to the db2secGetConDetails API with the following prototypes:

- db2secServerAuthPluginlnit

```
SQL_API_RC (SQL_API_ FN dbzsecLogMessage) void *data_ dbzint3z ) ; SQL_API_RC (SQL_API_FN dbzsecGetConDetails) db2int32 conDetailsVersion, const void *pConDetails )
```

The db2secLogMessage API allows the plug-in to messages to the db2diag files for debugging or informational purposes. The dbzsecGetConDetails API allows the plug-in to obtain details about the client that is trying to attempt to have a database connection. Both the db2secLogMessage API and log log

dbzsecGetConDetails API are provided by the Db2 database system, so you do not need to implement them: The dbzsecGetConDetails API in turn, takes as its second parameter,pConDetails, a pointer to one of the following structures:

db2sec\_con\_details\_l:

```
typedef struct dbzsec_con_details_l dbzint32 clientProtocol ; dbzUint32 clientIPAddress; dbZUint32 connect_info_bitmap; dbzint3z dbnameLen; char dbname[DBZSEC_MAX_DBNAME_LENGTH 1]; dbzsec_con_details_l; db2sec_con_details_2: typedef struct dbzsec_con_details_2 dbzint32 clientProtocol ; See SQL_PROTOCOL in sqlenv.h dbzUint32 clientIPAddress; I* Set if protoco] is TCPIP4 dbzUint32 connect_info_bitmap; dbzint32 dbnameLen; char dbname[DBZSEC_MAX_DBNAME_LENGTH 1]; if protoco] is TCPIP6 dbzsec_con_details_2; db2sec_con_details_3: typedef struct dbzsec_con_details_3 See SQL_PROTOCOL in sqlenv.h */ dbzUint32 clientIPAddress; I* Set if protocol is TCPIP4 */ dbzUint32 connect_info_bitmap; db2int32 dbnameLen; char dbname[DBZSEC_MAX_DBNAME_LENGTH 1]; dbzUint32 clientiP6Address[4];/* Set if protoco] is TCPIP6 dbZUint32 clientPlatform; SQLM_PLATFORM_ from sqlmon.h */ dbZUint32 reserved[16] ; dbzsec_con_details_3;
```

The possible values for conDetailsVersion are DBZSEC\_CON\_DETAILS\_VERSION 1, DBZSEC\_CON\_DETAILS\_VERSION\_2, and DBZSEC\_CON\_DETAILS\_VERSION 3 representing the version of the API:

Note: While db2sec\_con\_details\_1, dbzsec\_con details\_2, or db2sec\_con\_details\_3, consider the following: using

- Existing plugins that are using the db2sec\_con\_details\_L structure and the DBZSEC\_CON\_DETAILS VERSION 1 value will continue to work as Version 8.2 when calling the db2GetConDetails API: If this API is called on an IPv4 platform, the client IP address is returned in the clientIPAddress field of the structure: If this API is called on an IPv6 platform, a value of 0 is returned in the clientIPAddress field: To retrieve the client IP address on an IPv6 platform, the security plug-in code should be changed to use either the db2sec\_con\_details\_2 structure and the DBZSEC\_CON\_DETAILS\_ VERSION 2 value, or the db2sec\_con\_details\_3 structure and the DBZSEC\_CON\_DETAILS\_VERSION 3 value. they
- New plugins should use the db2sec\_con\_details\_3 structure and the DBZSEC\_CON\_DETAILS VERSION called on an IPv4 platform, the client IP address is returned in the clientIPAddress field of the db2sec\_con\_details\_3 structure and if the API is called on an IPv6 platform the client IP address is returned in the clientIP6Address field of the db2sec\_con\_details\_3 structure The clientProtocol field of the connection details structure will be set to one of

SQL\_PROTOCOL\_TCPIP (IPv4, with vl of the structure), SQL\_PROTOCOL\_TCPIP4 (IPv4, with v2 of the structure) or SQL\_PROTOCOL\_TCPIP6 (IPv6, with v2 or v3 of the structure):

- The structure db2sec\_con\_details\_3 is identical to the structure dbzsec\_con details\_2 except that it contains an additional field (clientPlatform) that identifies the client platform type (as reported by the communication layer) using platform type constants defined in sqlmon.h, such as SQLM\_PLATFORM\_AIX:
- db2secServerAuthPluginTerm
- db2secValidatePassword
- db2secGetAuthIDs
- db2secDoesAuthIDExist
- db2secFreeToken
- db2secFreeErrormsg
- The only API that must be resolvable externally is db2secServerAuthPluginInit: This API will take a void parameter; which should be cast to either:

```
typedef struct dbzsecUseridPasswordServerAuthFunctions_1 db2int32 version; dbzint32 plugintype;
```

```
parameter Tists Ieft blank for readability see above for parameters */ SQL_API_RC (SQL_API_FN SQL_API_RC (SQL_API_ FN dbzsecGetAuthIDs) (<parameter Tist) = SQL_API_RC (SQL_API_FN dbzsecDoesAuthIDExist) ( <parameter Tistz) ; SQL_API_ RC (SQL_API_FN SQL_API_RC (SQL_API_FN dbzsecFreeErrormsg) (<parameter Tist>) ; SQL_API_RC (SQL_API_ FN dbzsecServerAuthPluginTerm) () ; userid_password_server_ auth functions;
```

or

```
typedef struct dbzsecGssapiServerAuthFunctions_1 dbzint32 version; dbzint32 plugintype; gss_buffer_desc serverPrincipa] Name; gss_ cred_id t SQL_API_Rc (SQL_API_ FN dbzsecGetAuthIDs) (<parameter Tist) SQL_API_RC (SQL_API_ FN dbzsecDoesAuthIDExist) ( <parameter Tistz) ; SQL_API_RC (SQL_API_ FN dbzsecFreeErrormsg) (<parameter Tistz) ; SQL_API_RC (SQL_API_FN
```

```
I * GSS-API fic functions refer to dbzsecPlugin.h for parameter Tist*/ OM_uint32 gss_accept_ sec context ) (<parameter Tistz) ; OM_uint32 gss_display_ name ) (<parameter Tist>) OM_uint32 (SQL_API FN gss_delete sec context ) (<parameter Tist>) ; OM_uint32 (SQL_API_FN gss_display_status ) (<parameter Tist>) ; OM_uint32 (SQL_API_FN gss_ release_buffer (<parameter Tist>); OM_uint32 (SQL_API_FN gss_ release cred <parameter Tistz) OM_uint32 (SQL_API_FN gss_release_ name <parameter Tist>) speci
```

gssapi\_server\_auth\_functions;

You should use the db2secUseridPasswordServerAuthFunctions\_1 structure if you are writing a user ID/'password plug-in If you are writing a GSS-API (including Kerberos) plug-in, you should use the db2secGssapiServerAuthFunctions\_1 structure\_

## dbzsecClientAuthPluginlnit API Initialize client authentication plug-in

Initialization API, for the client authentication plug-in, that the Db2 database manager calls immediately after loading the plug-in:

## API and data structure syntax

```
SQL_API_RC SQL_API_FN dbzsecCI ientAuthPluginInit dbzint32 version, void dbzsecLogMessage *]ogMessage char #*errormsg dbzint32 *errormsg]en ); fn,
```

## db2secClientAuthPluginlnit API parameters

## version

Input: The highest version number of the API that the Db2 database manager currently supports. The DBZSEC\_API\_VERSION value (in dbzsecP]ugin.h) contains the latest version number of the API that Db2 currently supports.

## client fns

corresponding to the version the plug-in has implemented.

Output: A pointer to memory provided by the Db2 database manager for a db2secGssapiClientAuthFunctions\_&lt;version number&gt; structure (also known as gssapi\_client\_auth\_functions\_ &lt;version\_number&gt;) , if GSS-API authentication is used, or a db2secUseridPasswordClientAuthFunctions\_ &lt;version number&gt; structure (also known as userid\_password\_client\_auth\_functions\_&lt;version\_number&gt;), if userid / password authentication is used. The db2secGssapiClientAuthFunctions\_ &lt;version\_number&gt; structure and db2secUseridPasswordClientAuthFunctions\_ &lt;version\_number&gt; structure contain pointers to the APIs implemented for the GSS-API authentication plug-in and userid / password authentication plug-in. In future versions of Db2, there might be different versions of the APIs, so the cl ient\_fns parameter is cast as a pointer to the gssapi\_client\_auth\_functions\_ &lt;version\_number&gt; structure

The first parameter of the gssapi\_client\_auth\_functions\_&lt;version\_numberz structure or the userid\_password\_client\_auth\_functions\_ &lt;version\_number&gt; structure tells the Db2 database manager the version of the APIs that the plug-in has implemented.

Note: The casting is done only if the Db2 version is higher or to the version of the APIs that the plug-in has implemented. equal

Inside the gssapi\_server\_auth\_functions\_&lt;version\_numberz or userid\_password server\_ auth\_functions\_&lt;version\_number&gt; structure, the plugintype parameter should be set to one of DBZSEC\_PLUGIN\_ TYPE\_USERID\_PASSWORD, DBZSEC\_PLUGIN\_TYPE\_GSSAPI, or DBZSECPLUGINTYPE KERBEROS. Other values can be defined in future versions

## logMessage\_fn

Input: A pointer to the db2secLogMessage API, which is implemented by the Db2 database manager: The dbzsecClientAuthPluginInit API can call the db2secLogMessage API to messages to the dbzdiag files for debugging or informational purposes. API specifies the type of diagnostic errors that will be recorded in the db2diag log log

files and the last two parameters are the message and its length: The valid values for the first parameter of db2secLogMessage API (defined in dbzsecPlugin.h) are: log string

- DBZSEC\_LOG\_NONE (0) No logging
- DBZSEC\_LOG\_CRITICAL (1) Severe Error encountered
- DBZSEC\_LOG\_ERROR (2) Error encountered
- DBZSEC\_LOG\_WARNING (3) Warning
- DBZSEC\_LOG\_INFO (4) Informational

The message text will show up in the dbzdiag files only if the value of the 'level' parameter of the db2secLogMessage API is less than or equal to the diaglevel database manager configuration parameter: For example, if you use the DBZSEC\_LOG\_ INFO value, the message text will appear in the db2diag files only if the diaglevel database manager configuration parameter is set to 4\_ 1og

## errormsg

Output: A pointer to the address of an ASCII error message allocated by the plug-in that can be returned in this parameter if the db2secClientAuthPluginInit API execution is not successful: string

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## db2secClientAuthPluginTerm API Clean up client authentication plug-in resources

Frees resources used by the client authentication plug-in.

This API is called by the Db2 database manager just before it unloads the client authentication plug-in. It should be implemented in a manner that it does a proper cleanup of any resources the plug-in library holds, for example, free any memory allocated by the plug-in, close files that are still open, and close network connections\_ The plug-in is responsible for keeping track of these resources in order to free them. This API is not called on any Windows operating systems

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN  *dbzsecCl ientAuthPluginTerm) char **errormsg, dbzint32 *errormsg]en) ;
```

## dbzsecClientAuthPluginTerm API parameters

## errormsg

Output: A pointer to the address of an ASCII error message allocated by the plug-in that can be returned in this parameter if the db2secClientAuthPluginTerm API execution is not successful. string

## errormsglen

Output: pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecDoesAuthIDExist Check if authentication ID exists

Determines if the authid represents individual user (for example, whether the API can map the authid to an external user ID) an

The API should return the value DBZSEC  PLUGIN OK if it is successful the authid is valid, DBZSEC\_PLUGIN INVALID\_USERORGROUP if it is not valid, Or DBZSEC \_ PLUGIN\_USERSTATUSNOTKNOWN if the authid existence cannot be determined:

## API and data structure syntax

```
SQL_API_ RC SQL_API_ FN *dbzsecDoesAuthIDExist) const char *authid, dbzint32 authidlen, char **errormsg, dbzint3z *errormsg]en )
```

## dbzsecDoesAuthIDExist API parameters

## authid

Input: The authid to validate: This is upper-cased, with no trailing blanks.

## authidlen

Input: Length in bytes of the authid parameter value:

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secDoesAuthIDExist API execution is not successful.

## errormsg]en

Output: A pointer to an integer that indicates the length of the error message in errormsg parameter: string

## dbzsecFreelnitlnfo API Clean up resources held by the dbzsecGeneratelnitialCred

Frees any resources allocated by the db2secGenerateInitialCred API. This can include, for example, handles to underlying mechanism contexts or a credential cache created for the GSS-API credential cache:

## API and data structure syntax

```
SQL_API_ RC SQL_API_ FN *dbzsecFreeInitInfo) void *initinfo_ char #*errormsg dbzint32 *errormsg]en) =
```

## dbzsecFreelnitlnfo API parameters

## initinfo

Input: A pointer to data that is not known to the Db2 database manager: The plug-in can use this memory to maintain a list of resources that are allocated in the process of generating the credential handle. These resources are freed by this API calling

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secFreeInitInfo API execution is not successful.

## errormsg]en

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecFree Token API Free memory held by token

Frees the memory held by a token: This API is called by the Db2 database manager when it no longer needs the memory held by the token parameter

## API and data structure syntax

```
SQL_API_ RC SQL_API_ FN *dbzsecFreeToken) void #token, char **errormsg dbzint3z *errormsg]en
```

)

## db2secFreeToken API parameters

## token

Input: Pointer to the memory to be freed:

## errormsg

Output: pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secFreeToken API execution is not successful:

## errormsg]en

Output: pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## db2secGeneratelnitialCred API Generate initial credentials

The db2secGenerateInitialCred API obtains the initial GSS-API credentials based on the user ID and password that are passed in.

For Kerberos, this is the ticket-granting ticket (TGT) The credential handle that is returned in pGSSCredHandle parameter is the handle that is used with the gss\_init\_sec\_context API and must be either an INITIATE or BOTH credential. The db2secGenerateInitialCred API is only called when a user ID, and possibly a password are supplied. Otherwise, the Db2 database manager specifies the value GSS C NO\_CREDENTIAL when the gss\_init\_sec\_context API to signify that the default credential obtained from the current login context is to be used calling

## API and data structure syntax

```
SQL_API_ RC SQL_ FN *dbzsecGenerateInitialCred) const char *userid, db2int32 useridlen, const char *usernamespace, db2int32 usernamespacelen, db2int32 usernamespacetype, const char *password db2int32 password]en, const char *newpassword_ db2int32 newpasswordlen, const char *dbname_ gss_ cred_id_t *pGSSCredHandle, void ** InitInfo. char #*errormsg ) ; ~API
```

## dbzsecGeneratelnitialCred API parameters

## userid

## useridlen

Input: Length in bytes of the userid parameter value

## usernamespace

Input: The namespace from which the user ID was obtained:

## usernamespacelen

Input: Length in bytes of the usernamespace parameter value:

## usernamespacetype

Input: The type of namespace.

## password

Input: The password to be verified:

## passwordlen

Input: Length in bytes of the password parameter value.

## newpassword

Input: A new password if the password is to be changed. If no change is requested, the newpassword parameter is set to NULL. If it is not NULL, the API should validate the old password before setting the password to its new value: The API does not have to honor a request to change the password, but if it does not, it should immediately return with the return value DBZSEC\_PLUGIN\_CHANGEPASSWORD\_NOTSUPPORTED without validating the old password.

## newpasswordlen

Input: Length in bytes of the newpassword parameter value:

## dbname

Input: The name of the database connected to\_ The API is free to ignore this parameter; or the API can return the value DBZSEC\_PLUGIN\_CONNECTION\_DISALLOWED if it has a policy of restricting access to certain databases to users who otherwise have valid passwords. being

## dbnamelen

Input: Length in bytes of the dbname parameter value:

## pGSSCredHandle

Output: Pointer to the GSS-API credential handle:

## InitInfo

Output: A pointer to data that is not known to Db2. The plug-in can use this memory to maintain a list of resources that are allocated in the process of generating the credential handle: The Db2 database manager calls the dbzsecFreeInitInfo API at the end of the authentication process, at which these resources are freed: If the db2secGenerateInitialCred API does not to maintain such list, then it should return NULL. point need

## errormsg

Output: A pointer to the address of an ASCII error message allocated by the plug-in that can be returned in this parameter if the db2secGenerateInitialCred API execution is not successful: string

Note: For this API, error messages should not be created if the return value indicates bad user ID or password: An error message should be returned only if there is an internal error in the API that prevented it from completing properly

## errormsg]en

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## Get authentication IDs

Returns an SQL authid for an authenticated user: This API is called database connections for both user ID / password and GSS-API authentication methods. during

## API and data structure syntax

```
SQL_API_ RC SQL_API_FN *dbzsecGetAuthIDs) const char *userid db2int32 useridlen const char *usernamespace, dbzint32 usernamespacelen, db2int32 usernamespacetype, const char #dbname db2int32 dbnamelen_ void **token, char SystemAuthID[DBZSEC_MAX_AUTHID_LENGTH] dbzint32 *SystemAuthID]en char InitialSessionAuthID[DBZSEC_MAX_AUTHID_LENGTH] dbzint32 InitialSessionAuthID]en, char username[DBZSEC_MAX_USERID_LENGTH] _ dbzint32 *usernamelen dbzint32 *initsessionidtype, char **errormsg, dbzint32 *errormsg]en ) ;
```

## db2secGetAuthlDs API parameters

## userid

authentication unless trusted context is defined to permit switch user operations without authentication. In those situations, the user name provided for the switch user request is passed in this parameter:

## useridlen

Input: Length in bytes of the userid parameter value

## usernamespace

Input: The namespace from which the user ID was obtained.

## usernamespacelen

Input: Length in bytes of the usernamespace parameter value.

## usernamespacetype

Input: Namespace type value. Currently; the only supported namespace type value is DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE (corresponds to a username style like domain |myname):

## dbname

Input: The name of the database being connected to. The API can ignore this, or it can return differing authids when the same user connects to different databases. This parameter can be NULL.

## dbname]en

Input: Length in bytes of the dbname parameter value. This parameter is set to 0 if dbname parameter is NULL.

## token

dbzsecGetGroupsForUser API. For GSS-API, this is a context handle (gss\_ctx\_id\_t) Ordinarily token is an input-only parameter and its value is taken from the db2secValidatePassword API. It can also be an output parameter when authentication is done on the client and therefore db2secValidatePassword API is not called. In environments where a trusted context is defined that allows switch user operations without authentication, the db2secGetAuthIDs API must be able to accommodate receiving a NULL value for this token parameter and be able to derive a system authorization ID based on the userid and useridlen input parameters mentioned previously:

## SystemAuthID

Output: The system authorization ID that corresponds to the ID of the authenticated user The size is 255 bytes, but the Db2 database manager currently uses only up to (and including) 30 bytes.

## SystemAuthID]en

Output: Length in bytes of the SystemAuthID parameter value:

## InitialSessionAuthID

Output: Authid for this connection session. This is usually the same as the SystemAuthID parameter but can be different in some situations, for example, when issuing SET SESSION AUTHORIZATION statement: The size is 255 bytes, but the Db2 database manager currently uses only up to (and including) 30 bytes: used

## InitialSessionAuthID en

Output: Length in bytes of the InitialSessionAuthID parameter value:

## username

Output: A username corresponding to the authenticated user and authid. This will be used only for auditing and will be logged in the "User ID" field in the audit record for CONNECT statement: If the API does specify the username parameter; the Db2 database manager copies it from the userid:

## usernamelen

Output: Length in bytes of the username parameter value:

## initsessionidtype

Output: Session authid type indicating whether the InitialSessionAuthid parameter is a role or an authid. The API should return one of the following values (defined in dbzsecPlugin.h):

- DBZSEC\_ID\_TYPE\_AUTHID (0)
- DBZSEC\_ID\_TYPE\_ROLE (1)

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secGetAuthIDs API execution is not successful

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecGetDefaultLoginContext API Get default login context

Determines the user associated with the default login context, that is, determines the Db2 authid of the user invoking a Db2 command without explicitly specifying user ID (either an implicit authentication to a database, Or local authorization): This API must return both an authid and a user ID.

## API and data structure syntax

```
SQL_API_RC SQL_API_FN *dbzsecGetDefaultLoginContext) char authid[DBZSEC_MAX_AUTHID_LENGTH] _ dbzint32 *authidlen, char userid[DBZSEC_MAX_USERID_LENGTH] dbzint32 *useridlen. db2int32 useridtype_ char usernamespace[DBZSEC_ MAX_USERNAMESPACE_LENGTH] dbzint32 *usernamespacelen dbzint32 *usernamespacetype const char *dbname dbzint32 dbnamelen, void #*token, char #*errormsg, dbzint32 *errormsg]en
```

## dbzsecGetDefaultLoginContext API parameters

## authid

Output: The parameter in which the authid should be returned. The returned value must conform to Db2 authid naming rules, or the user will not be authorized to perform the requested action.

## authidlen

Output: Length in bytes of the authid parameter value:

## userid

Output: The parameter in which the user ID associated with the default login context should be returned:

## useridlen

Output: Length in bytes of the userid parameter value:

## useridtype

Input: Indicates if the real or effective user ID of the process is being specified. On Windows, only the real user ID exists. On UNIX and Linux, the real user ID and effective user ID can be different if the uid user ID for the application is different than the ID of the user executing the process. Valid values for the userid parameter (defined in db2secP]ugin.h) are:

## DBZSEC PLUGIN\_REALUSER\_NAME

Indicates that the real user ID is specified. being

## DBZSEC PLUGIN\_EFFECTIVE\_USER NAME

Indicates that the effective user ID is specified. being

Note: Some plug-in implementations might not distinguish between the real and effective user ID. In particular; a plug-in that does not use the UNIX or Linux identity of the user to establish the Db2 authorization ID can safely ignore this distinction.

## usernamespace

Output: The namespace of the user ID.

## usernamespacelen

Output: Length in bytes of the usernamespace parameter value. Under the limitation that the usernamespacetype parameter must be set to the value DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE (defined in db2secPlugin.h), the maximum length currently supported is 15 bytes.

## usernamespacetype

Output: Namespace type value:Currently, the only supported namespace type is DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE (corresponds to a username style like domain Imyname):

## dbname

Input: Contains the name of the database connected to, if this call is being used in the context of a database connection. For local authorization actions or instance attachments, this parameter is set to NULL. being

## dbnamelen

Input: Length in bytes of the dbname parameter value

## token

Output: This is a pointer to data allocated by the plug-in that it might pass to subsequent authentication calls in the plug-in, or possibly to the group retrieval plug-in. The structure of this data is determined by the plug-in writer

## errormsg

Output: A pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secGetDefaultLoginContext API execution is not successful.

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecProcessServerPrincipalName API Process service principal name returned from server

The dbzsecProcessServerPrincipalName API processes the service principal name returned from the server and returns the principal name in the gss\_name\_t internal format to be used with the gss\_init\_sec\_context API

The db2secProcessServerPrincipalName API also processes the service principal name cataloged with the database directory when Kerberos authentication is used. established, the gss\_name\_t object is freed through the call to gss\_release\_name API. The db2secProcessServerPrincipalName API returns the value DBZSEC\_PLUGIN\_OK if the gsSName parameter points to valid GSS name; a DBZSEC\_PLUGIN\_BAD\_PRINCIPAL\_NAME error code is returned if the principal name is invalid.

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN *dbzsecProcessServerPrincipa] Name) const char *name dbzint32 namelen, gss_ name t *gssName char #*errormsg, dbzint32 *errormsg]en
```

## dbzsecProcessServerPrincipalName API parameters

## name

Input: Text name of the service principal in GSS\_C\_NT\_USER\_NAME format; for example, service /host@REALM

## namelen

Input: Length in bytes of the name parameter value:

## gssName

Output: Pointer to the output service principal name in the GSS-API internal format:

## errormsg

Output: A pointer to the address of an ASCII error message allocated by the plug-in that can be returned in this parameter if the db2secProcessServerPrincipalName API execution is not successful. string

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## dbzsecRemapUserid API Remap user ID and password

This API is called by the Db2 database manager on the client side to remap given user ID and password (and possibly new password and usernamespace) to values different from those given at connect time:

The Db2 database manager only calls this API if a user ID and a password are supplied at connect time: This prevents a plug-in from remapping user ID by itself to user ID /password This API is and is not called if it is not provided or implemented by the security plug-in: pair: optional

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN  *dbzsecRemapUserid) char userid[DBZSEC_MAX_USERID_LENGTH] db2int32 *useridlen, char usernamespace[DBZSEC_ MAX_USERNAMESPACE_LENGTH] dbzint32 *usernamespacelen dbzint32 *usernamespacetype char password [DBZSEC_MAX_PASSWORD_LENGTH] char newpasswd [DBZSEC_MAX PASSWORD_LENGTH] dbzint32 #newpasswd] const char *dbname dbzint32 dbnamelen char **errormsg, dbzint3z *errormsg]en) ; en,
```

## dbzsecRemapUserid API parameters

## userid

Input or output: The user ID to be remapped: If there is an input user ID value, then the API must provide an output user ID value that can be the same or different from the input user ID value. If there is no input user ID value, then the API should not return an output user ID value:

## useridlen

Input or output: Length in bytes of the userid parameter value:

## usernamespace

Input o output: The namespace of the user ID. This value can optionally be remapped: If no input parameter value is specified, but an output value is returned, then the usernamespace will be used by the Db2 database manager only for CLIENT type authentication and is disregarded for other authentication types.

## usernamespacelen

Input or output: Length in bytes of the usernamespace parameter value. Under

the limitation that the usernamespacetype parameter must be set to the value DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE (defined in dbzsecPlugin.h), the maximum length currently supported is 15 bytes.

## usernamespacetype

Input or output: Old and new namespace type value. Currently, the only supported namespace type value is DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE (corresponds to a username style like domain myname)

## password

Input or output: As an input, it is the\_password that is to be remapped: As an output it is the remapped password. If an input value is specified for this parameter; the API must be able to return an output value that differs from the input value. If no input value is specified, the API must not return an output password value:

## passwordlen

Input or output: Length in bytes of the password parameter value:

## newpasswd

Input or output: As an input, it is the new password that is to be set: As an output it is the confirmed new password.

Note: This is the new password that is passed by the Db2 database manager into the newpassword parameter of the dbzsecValidatePassword API on the client or the server (depending on the value of the authentication database manager configuration parameter). If a new password was as input, then the API must be able to return an output value and it can be a different new password: If there is no new password in as input, then the API should not return an output new password. passed passed

## newpasswdlen

Input or output: Length in bytes of the newpasswd parameter value:

## dbname

Input: Name of the database to which the client is connecting:

## dbnamelen

Input: Length in bytes of the dbname parameter value:

## errormsg

Output: pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secRemapUserid API execution is not successful.

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecServerAuthPluginlnit Initialize server authentication plug-in

The db2secServerAuthPluginInit API is the initialization API for the server authentication plug-in that the Db2 database manager calls immediately after loading the plug-in.

In the case of GSS-API, the plug-in is responsible for in the server's principal name in the serverPrincipa] Name parameter inside the gssapi\_server\_ auth\_functions structure at initialization time and providing the server's credential handle in the serverCredHandle parameter inside the gssapi\_server\_auth\_functions structure. The of the memory allocated to filling freeing

hold the principal name and the credential handle must be done by the dbzsecServerAuthPluginTerm API by calling the gss\_release\_name and gss\_release\_cred APIs.

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN db2secServerAuthPluginInit dbzint32 version, void *server dbzsecGetConDetails *getConDetails\_ dbzsecLogMessage *]ogMessage\_ char **errormsg, dbzint32 *errormsg]en ) fn, fn,

## dbzsecServerAuthPluginlnit API parameters

## version

Input: The highest version number of the API that the Db2 database manager currently supports. The DBZSEC\_API VERSION value (in dbzsecPlugin.h) contains the latest version number of the API that the Db2 database manager currently supports.

## server fns

Output: A pointer to memory provided by the Db2 database manager for a db2secGssapiServerAuthFunctions &lt;version\_number&gt; structure (also known as gssapi\_server auth\_functions\_&lt;version\_numberz) , if GSS-API authentication is used, or a db2secUseridPasswordServerAuthFunctions\_ &lt;version number&gt; structure (also known as userid\_password server\_auth\_functions\_&lt;version\_numberz) , if userid / password authentication is used: The db2secGssapiServerAuthFunctions\_&lt;version\_number&gt; structure and db2secUseridPasswordServerAuthFunctions\_ &lt;version\_number&gt; structure contain pointers to the APIs implemented for the GSS-API authentication plug-in and userid /password authentication plug-in.

The server fns parameter is cast as pointer to the gssapi\_ server\_auth\_functions\_&lt;version\_number&gt; structure corresponding to the version the plug-in has implemented: The first parameter of the gssapi server\_auth\_functions\_&lt;version\_number&gt; structure or the userid\_password server\_auth\_functions\_ &lt;version\_number&gt; structure tells implemented.

Note: The casting is done only if the Db2 version is higher o to the version of the APIs that the plug-in has implemented. equal

Inside the gssapi\_server\_auth\_functions\_&lt;version\_number&gt; or userid\_password\_ server\_ auth\_functions\_ &lt;version\_number&gt; structure, the plugintype parameter should be set to one of DBZSEC\_PLUGIN\_TYPE\_USERID\_PASSWORD, DBZSEC\_PLUGIN\_TYPE\_GSSAPI, or DBZSEC PLUGIN\_TYPE\_KERBEROS. Other values can be defined in future versions

## getConDetails\_fn

Input: Pointer to the db2secGetConDetails API, which is implemented by Db2. The dbzsecServerAuthPluginInit API can call the db2secGetConDetails API in any one of the other authentication APIs to obtain details related to the database connection. These details include information about the communication mechanism associated with the connection (such as the IP address, in the case of TCP /IP), which the plug-in writer might need to

reference when making authentication decisions For example, the plug-in could disallow connection for a particular user; unless that user is connecting from particular IP address. The use of the db2secGetConDetails API is optional.

If the db2secGetConDetails API is called in a situation not involving a database connection, it returns the value DBZSEC\_PLUGIN\_NO\_CON\_DETAILS, otherwise, it returns 0 on success.

The dbzsecGetConDetails API takes two input parameters; pConDetails, which is a pointer to the dbzsec\_con details\_&lt;version\_number&gt; structure, and conDetailsVersie which is a version number indicating which dbzsec\_con details structure to use\_ Possible values are DBZSEC\_CON DETAILS\_VERSION 1 when db2sec\_con\_detailsl is used or DBZSECCON\_DETAILS\_VERSION 2 when db2sec\_con details2. The recommended version number to use is DBZSECCON\_DETAILSVERSION 2 on,

Upon a successful return, the dbzsec\_con\_details structure (either dbzsec\_con detailsl or dbzsec\_con\_details2) will contain the following information:

- The protocol used for the connection to the server: The listing of protocol definitions can be found in the file sqlenv.h (located in the include directory) (SQL\_PROTOCOL\_*) This information is filled out in the clientProtocol parameter
- The TCP /TP address of the inbound connect to the server if the clientProtocol is SQL\_PROTOCOL\_TCPIP or SQL\_PROTOCOL\_TCPIP4. This information is filled out in the cl ientIPAddress parameter:
- The database name the client is attempting to connect to. This will not be set for instance attachments. This information is filled out in the dbname and dbnameLen parameters.
- A connection information bit-map that contains the same details as documented in the connection details parameter of the db2secValidatePassword API. This information is filled out in the connect\_info\_bitmap parameter:
- The TCP /IP address of the inbound connect to the server if the clientProtocol is SQL\_PROTOCOL\_TCPIP6. This information is filled out in the clientIP6Address parameter and it is only available if DBZSEC\_CON\_DETAILS\_VERSION\_ 2 is used for db2secGetConDetails API call:

## logMessage\_fn

Input: A pointer to the dbzsecLogMessage API, which is implemented by the Db2 database manager: The db2secClientAuthPluginInit API can the db2secLogMessage API to messages to the db2diag files for debugging or informational purposes. The first parameter (level) of db2secLogMessage API specifies the type of diagnostic errors that will be recorded in the dbzdiag files and the last two parameters are the message string and its length: The valid values for the first parameter of db2secLogMessage API (defined in dbzsecPlugin.h) are: call log log

- DBZSEC\_LOG\_NONE (0): No logging
- DBZSEC\_LOG\_CRITICAL (1): Severe Error encountered
- DBZSEC\_LOG\_ERROR (2): Error encountered
- DBZSEC\_LOG\_WARNING (3): Warning
- DBZSEC\_LOG\_ INFO (4): Informational

The message text will appear in the dbzdiag files only if the value of the Ievel parameter of the db2secLogMessage API is less than or equal to the diaglevel database manager configuration parameter: log

So for example, if you use the DBZSEC\_LOG INFO value, the message text appear in the dbzdiag files only if the diaglevel database manager configuration parameter is set to 4. will log

## errormsg

Output: A pointer to the address of an ASCII error message allocated by the plug-in that can be returned in this parameter if the db2secServerAuthPluginInit API execution is not successful: string

## errormsglen

Output: pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter:

## db2secServerAuthPluginTerm API Clean up server authentication plug-in resources

The db2secServerAuthPluginTerm API frees resources used by the server authentication plug-in:

This API is called by the Db2 database manager just before it unloads the server authentication plug-in: It should be implemented in a manner that it does proper cleanup of any resources the plug-in library holds, for example, free any memory allocated by the plug-in, close files that are still open, and close network connections\_ The plug-in is responsible for keeping track of these resources in order to free them. This API is not called on any Windows operating systems

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN *dbzsecServerAuthPluginTerm) char **errormsg, dbzint32 *errormsg]en ) ;

## dbzsecServerAuthPluginTerm API parameters

## errormsg

Output: pointer to the address of an ASCII error message string allocated by the plug-in that can be returned in this parameter if the db2secServerAuthPluginTerm API execution is not successful:

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## dbzsecValidatePassword API Validate password

Provides a method for performing user ID and password style authentication database connect operation. during

Note: When the API is run on the client side, the API code is run with the privileges of the user executing the CONNECT statement: This API will only be called on the client side if the authentication configuration parameter is set to CLIENT.

When the API is run on the server side, the API code is run with the privileges of the instance owner:

The plug-in writer should take the previous scenarios into consideration if authentication requires privileges (such as root level system access on UNIX): special

This API must return the value DBZSEC\_PLUGIN\_OK (success) if the password is an error code such as DBZSEC\_PLUGIN\_BADPWD if the password is invalid.

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN *dbzsecVa] idatePassword) const char #userid, dbzint32 useridlen_ const char *usernamespace dbzint32 usernamespacelen, db2int32 usernamespacetype _= const char *password dbzint32 password]en, const char #newpasswd _ db2int32 newpasswdIen, const char *dbname db2int32 dbnamelen, dbzUint32 connection_details, void #*token, char **errormsg dbzint32 *errormsg]en )
```

## dbzsecValidatePassword API parameters

## userid

## useridlen

Input: Length in bytes of the userid parameter value:

## usernamespace

Input: The namespace from which the user ID was obtained.

## usernamespacelen

Input: Length in bytes of the usernamespace parameter value:

## usernamespacetype

Input: The type of namespace. Valid values for the usernamespacetype parameter (defined in dbzsecP]ugin.h) are:

- DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE Corresponds to a username style like domain myname
- DBZSEC\_NAMESPACE\_USER\_PRINCIPAL Corresponds to a username style like myname@domain ibm.com

Currently, the Db2 database system only supports the value DBZSEC\_NAMESPACE\_SAM\_COMPATIBLE: When the user ID is not available, the usernamespacetype parameter is set to the value

## password

Input The password to be verified.

## passwordlen

Input: Length in bytes of the password parameter value:

## newpasswd

Input: A new password, if the password is to be changed: If no change is requested, this parameter is set to NULL. If this parameter is not NULL, the API should validate the old password before changing it to the new password:

The API does not have to fulfill a request to change the password, but if it does not, it should immediately return with the return value DBZSEC \_ PLUGINCHANGEPASSWORD\_NOTSUPPORTED without validating the old password.

## newpasswd]en

Input: Length in bytes of the newpasswd parameter value:

## dbname

Input: The name of the database connected to. The API is free to ignore the dbname parameter; or it can return the value DBZSEC\_PLUGIN\_CONNECTIONREFUSED if it has a policy of restricting access to certain databases to users who otherwise have valid passwords. This parameter can be NULL. being

## dbnamelen

Input: Length in bytes of the dbname parameter value: This parameter is set to 0 if dbname parameter is NULL.

## connection\_details

Input: A 32-bit parameter of which 3 bits are currently used to store the following information:

- The rightmost bit indicates whether the source of the user ID is the default from the db2secGetDefaultLoginContext API, or was explicitly provided the connect during
- The second-from-right bit indicates whether the connection is local (using Inter Process Communication (IPC) or a connect from one of the nodes in the dbznodes.cfg in the partitioned database environment), O remote (through a network or loopback) This gives the API the ability to decide whether clients on the same machine can connect to the Db2 server without password. Due to the default operating-system-based user ID / password plugin, local connections are permitted without a password from clients on the same machine (assuming the user has connect privileges).
- The third-from-right bit indicates whether the Db2 database manager is the API from the server side or client side. calling

The bit values are defined in dbzsecPlugin.h:

- from OS and not explicitly given on the connect statement:
- DBZSEC\_CONNECTION\_ISLOCAL (0xO0000002) Indicates a local connection.
- database manager is calling from the server side Or client side to validate password. If this bit value is set, then the Db2 database manager is calling from server side; otherwise, it is calling from the client side:

The Db2 database system default behavior for an implicit authentication is to allow the connection without any password validation. However; plug-in developers can disallow implicit authentication by returning a DBZSEC   PLUGINBADPASSWORD error:

## token

Input/output: A pointer to data which can be as a parameter to subsequent API calls the current connection. Possible APIs that might be called include db2secGetAuthIDs API and db2secGetGroupsForUser API passed during

## errormsg

Output: pointer to the address of an ASCII error message string allocated by

the plug-in that can be returned in this parameter if the db2secValidatePassword API execution is not successful:

## errormsglen

Output: A pointer to an integer that indicates the length in bytes of the error message string in errormsg parameter

## Required APIs and definitions for GSS-API authentication plug-ins

The following table is a complete list of GSS-APIs required for the Db2 security plug-in interface:

The supported APIs follow these specifications: Generic Security Service Application Program Interface, Version 2 (IETF RFC2743) and Generic Security Service API Version 2: C-Bindings (IETF RFC2744). Before implementing GSS-API based plug-in, you should have a complete understanding of these specifications

Table 41. Required APIs and Definitions for GSS-API authentication plug-ins

| API type             | API name                  | Description                                                                                 |
|----------------------|---------------------------|---------------------------------------------------------------------------------------------|
| Client-side APIs     | gss_ init sec context     | Initiate security context with peer application:                                            |
| Server-side APIs     | gss_accept_sec_context    | Accept a security context initiated by peer application.                                    |
| Server-side APIs     | gss_display_name          | Convert an internal format name to text                                                     |
| Common APIs          | gss_delete sec context    | Delete an established security context_                                                     |
| Common APIs          | gss_display_status        | Obtain the text error message associated with a GSS-API status code                         |
| Common APIs          | gss_release_buffer        | Delete buffer:                                                                              |
| Common APIs          | gss_release_cred          | Release local data structures associated with a GSS-API credential                          |
| Common APIs          | gss_ release name         |                                                                                             |
| Required definitions | GSS C_DELEG_FLAG          | Requests delegation.                                                                        |
| Required definitions |                           | Signifies that the gss_buffer_desc does not contain any data.                               |
| Required definitions | GSS C GSS CODE            | Indicates GSS major status code_                                                            |
| Required definitions | GSS C INDEFINITE          | Indicates that the mechanism does not support context expiration.                           |
| Required definitions | GSS C_MECH_CODE           | Indicates a GSS minor status code                                                           |
| Required definitions | GSS_C_MUTUAL_FLAG         | Mutual authentication requested.                                                            |
| Required definitions |                           | Signifies that the gss_buffer_t variable does not to valid gss_buffer_desc structure: point |
| Required definitions | GSS C NO_CHANNEL_BINDINGS | No communication channel bindings:                                                          |
| Required definitions | GSS_C_nO_CONTEXT          | Signifies that the gss_ ctx_id_t variable does not to valid context_ point                  |

Table 41. Required APIs and Definitions for GSS-API authentication plug-ins  (continued)

| API type             | API name              | Description                                                                                        |
|----------------------|-----------------------|----------------------------------------------------------------------------------------------------|
| Required definitions | GSS C NO_CREDENTIAL   | Signifies that gss_cred id t variable does not to a valid credential handle: point                 |
| Required definitions | GSS € NO_NAME         | Signifies that the gss_ name t variable does not to a valid internal name_ point                   |
| Required definitions | GSS C NO_OID          | Use default authentication mechanism                                                               |
| Required definitions | GSS C_NULL_OID_SET    | Use default mechanism_                                                                             |
| Required definitions | GSS_S_COMPLETE        | API completed successfully:                                                                        |
| Required definitions | GSS_S_CONTINUE_NEEDED | Processing is not complete and the API must be called with the reply token received from the peer: |

## Restrictions for GSS-API authentication plug-ins

- The default security mechanism is always assumed; therefore, there is no OID consideration:

The following list describes the restrictions for GSS-API authentication plug-ins.

- The only GSS services requested in gss\_ init sec\_context () are mutual authentication and delegation. The Db2 database manager always requests a ticket for delegation, but does not use that ticket to generate a new ticket
- Only the default context time is requested:
- Context tokens from gss\_delete\_sec\_context() are not sent from the client to the server and vice-versa.
- Anonymity is not supported:
- If the initial credentials expire, the Db2 database manager does not automatically renew them.
- Channel binding is not supported
- The GSS-API specification stipulates that even if gss\_init\_ sec\_context () or gss\_accept sec\_context () fail, either function must return a token to send to the However; because of DRDA limitations, the Db2 database manager only sends a token if gss\_init\_sec\_context() fails and generates a token on the first call: peer:

## Chapter 10. Communication buffer exit libraries

With communication buffer exit libraries, you can examine communication buffers to provide solutions such as auditing or other security solutions that are based on the contents of the buffers.

Db2 provides access to each buffer received from clients, and each buffer about to be sent to clients. Buffers are provided before are encrypted with either DATA\_ENCRYPT authentication or SSL. Db2 uses the DRDA protocol to communicate between clients and the server: The communication buffers that are passed to the communication buffer exit are formatted according to the DRDA protocol. The communication buffer exit must understand the DRDA protocol that is used for communication. they library library

Db2 provides the buffers regardless of communication protocol. Communication buffer exit libraries work consistently with TCPIP (IPv4 and IPv6), SSL, Inter-Process Communication (IPC), and named pipe.

In addition to the buffers, Db2 also makes available identity information, including such as Kerberos. In this scenario, there is no standard user name, but rather generic tickets from which the database manager derives the user name\_ This detail is not available solely by looking at the communication buffer:

The database manager ensures that only trusted libraries are loaded. The libraries must be installed in specific location that can be modified by only the instance owner Furthermore, only a user with SYSADM authority can enable the library This authority level is the same which is required to enable encryption (DATA ENCRYPT or SSL).

The communication buffer exit library can terminate a connection if any buffer provided contains data that the library considers harmful. Both data that is sent to the server; and data that is returned to the client is included. For example, the communication buffer exit might detect that the data returned from select statement is inappropriate for the client to receive A return code from the indicates to the database manager that the connection must be terminated. The database managers stops that or any further communication buffers to the client and terminates the connection\_ library library

Note: Third-party vendors typically provide these communication buffer exit libraries. Db2 does provide samples of libraries in the sq]lib/samp]es/security/ commexit directory: You might choose to develop your own libraries with the samples as guide

## Communication exit library deployment

Certain considerations must be taken with the deployment of a communication exit library:

In typical scenarios communication exit libraries are provided by vendors. In these scenarios, the deployment of communication exit libraries is handled by the vendor supplied installation scripts. The deployment steps are outlined here s0 you

can deploy your own communication exit library if you choose to do so. The steps apply to the deployment of both runtime communication exit libraries and communication buffer exit libraries.

## Communication exit library location

Communication exit libraries must exist in specific directories.

The database manager looks for communication exit libraries in the following directories:

Linux and UNIX 32-bit

SDBZPATH/security3z/plugin/commexit

Linux and UNIX 64-bit

SDBZPATH/security64/plugin/commexit

Windows 32-bit and 64-bit

SDBZPATH  securitylplugin|commexit instance name

Note: On Windows operating systems, the subdirectories instance\_name and commexit are not created automatically The instance owner must manually create them:

## Naming conventions and permissions of communication exit libraries

Communication exit libraries must adhere to platform-specific naming and permission rules

The maximum length of a communication exit library name, not including the file extension and the 64 suffix, is limited to 32 bytes.

The following list outlines the naming convention for the library file extension on each operating system:

## AIX

The extension must be a or So

Note: If both the and so extensions exist, a is used.

Linux, and Solaris

The extension must be.so

## Windows

The extension must be d11

The following list outlines the permission for the library file each operating system: on

## UNIX and Linux

Owned by the instance owner and readable and executable by only the instance owner:

## Windows

Owned by a member of the DBZAMINS group and readable and executable by member of the DBZADMINS group.

## Examples

The following example shows the communication exit library extensions on library that is called mycommexit on all operating systems:

- AIX 64-bit mycommexit.a or mycommexit.so
- Solaris 64-bit, Linux 32-bit, or 64-bit, HP 64-bit on IPF: mycommexit.so
- Windows 32-bit: mycommexit.d11
- Windows 64-bit: mycommexit64.d11

Note: The file name suffix 64 is required only on the name for Windows 64-bit. library

When you the database manager configuration with the name of communication exit use the full name of the without the 64 suffix The file extension, and qualified path to the file, must not be specified either when you the database manager configuration. update library, library update

The following example updates the database manager configuration on\_ Windows 64-bit system that sets the mycommexit64.d11 library as the communication exit library

UPDATE DBM CFG USING COMM\_EXIT\_LIST mycommexit

Note: The COMMEXIT LIST name is case-sensitive, and must exactly match the library name.

## Enabling communication exit libraries outside of Db2 pureScale environments

The steps that are outlined in this task are typically run by third party supplied installation scripts. The steps are outlined to help you enable a communication exit library that you develop.

## Before you begin

You must have SYSADM authority to run the steps in this task

Restrictions

The communication exit library files must follow strict file permission guidelines. For more information about these guidelines, see the related concepts

## Procedure

To enable a communication exit library:

- 1. the database manager: To stop the database manager; run the dbzstop command\_ Stop
- 2 the communication exit library file to the correct directory For more information about the location of communication exit libraries, see the related concepts. The file can be a symbolic link to another location if wanted. Copy
- 3\_ Update the database manager configuration parameter COMM\_EXIT\_LIST with the name of the To update the configuration parameter; use the UPDATE DBM CFG command. library:
- 4\_ Start the database manager To start the database manager; run the dbzstart command\_

## Results

The library is loaded and initialized.

## Enabling communication exit libraries in Db2 pureScale environments

The steps that are outlined in this task are typically run by third party supplied installation scripts. The steps are outlined to help you enable a communication exit library that you develop.

## About this task

By a communication exit that contains version number in the file name, and symbolic link to this file for without the version number; it is possible to deploy the library on member by member basis. In this scenario, it is not necessary to the whole instance, only individual members: using library library stop

## Restrictions

The communication exit library files must follow strict file permission guidelines. For more information about these guidelines, see the related concepts.

## Procedure

To enable a communication exit library:

- 2. Create a symbolic link from the library without a version to the library that contains the version in the file name\_
- 1. the communication exit that contains the version number in file name to the correct directory: For more about the location of communication exit libraries, see the related concepts. Copy library
- 3\_ Update the database manager configuration parameter comm\_exit\_list with the name of the library: To the configuration parameter; use the UPDATE DBM CFG command update
- 4 each member individually: To each member; run the dbzstop command on each member Stop stop
- 5. Restart the stopped members. To start the stopped members, run the dbzstart command

## Results

The library is loaded and initialized.

## Communication exit library problem determination

Some are available to help diagnose problems with a communication exit library: options

The communication exit library is not provided as part of Db2. Rather; it is a that you install. It might be automatically installed and configured by a tool or application that you are using, or it might be written by you: library

The name of the that is specified in the database manager configuration parameter comm\_ exit\_list gives some indication as to the source of the library library

If you experience any issue with the library, the documentation for the tool or application must be consulted. The tool or application documentation outlines what problem determination steps must be taken:

An interface to write to the db2diag log files is available to communication exit libraries. The db2diag files can be checked whether there are concerns if the library is functioning properly: log

If there are concerns about the performance of the communication exit library, monitoring wait times can be used to investigate how the library is taking: For more information about these monitor tools, see the related reference long

## Communication exit library development

Certain considerations must be taken with the development of a communication exit library

In typical scenarios communication exit libraries are provided by vendors. In these scenarios, the development of communication buffer exit libraries is handled by the vendor

Communication exit libraries are C or C++ shared objects that are dynamically loaded into the process space of the database manager: You can develop your own if you choose to do so\_ library

## How a communication exit library is loaded

When the database manager is started, the communication exit is dynamically loaded and initialized. The must contain the initialization function dbzcommexitInit\_ This function is known as the library initialization function: library library

The library initialization function initializes the specified communication exit library: The initialization provides the database manager with the information needed to call the library functions. The library initialization function accepts the following parameters:

- A pointer to a structure which contains pointers to all the APIs that require implementation.
- The highest version number of the function pointer structure that the database instance which starts the can support library
- pointer to a function that adds messages to the dbzdiag files. log log
- A pointer to an error message string:
- The length of the error message.

The function signature for the initialization function is:

```
SQL_API RC SQL_API_ FN dbzcommexitInit db2int32 vers void *commexit dbzcommexitLogMessage *]ogMessage_fn, char **errormsg dbzint32 *errormsg]en
```

The initialization function is the only function in the library that uses prescribed function name\_ The other library functions are referenced through function pointers that are returned from the initialization function.

The tasks of this function are: specific

- Cast the functions pointer to a pointer of an appropriate functions structure
- Assign the version number of the function pointer structure that is returned:
- Assign the pointers to the other functions in the library

The communication exit library infrastructure supports both the communication buffer exit library and the runtime communication exit library: The input version parameter contains the highest version numbers for both of these libraries. This function must use the DBZCOMMEXIT\_GET\_BUFFER\_FN\_VER macro to obtain the highest supported version number of the function pointer structure for DRDA style functions. The function must also use the

DBZCOMMEXIT\_GET\_RUNTIME\_FN\_VER macro to obtain the highest supported version number of the function pointer structure for the runtime communication exit library functions

To use the communication buffer exit library this function must cast commexit\_fns to db2commexitFunctions\_vl\_ The function must also define the function pointers and call the DBZCOMMEXIT\_SET\_BUFFER\_FN\_VER macro to set the version number To use the runtime communication exit library, this function must cast commexit\_fns to db2commexitRuntimeFunctions\_Vl. The function must also define the function pointers and call the DBZCOMMEXIT\_SET\_RUNTIME\_FN\_VER macro to set the version number: Only one of the macros must be called by this function\_

The function dbzcommexitInit must be declared extern "C" if the is compiled as C+t library

## Communication exit library APIs

APIs are implemented in the communication exit library Some of the following APIs can be called by both communication buffer exit libraries and runtime communication exit libraries. Other APIs can be called by only one of those communication exit library types.

## db2commexitlnit API Initialization

When the database manager is started with the dbzstart command, the communication buffer exit library is loaded. Immediately following the load of the this function is called. This function is responsible for initializing the communication buffer exit The function is also responsible for returning all of the implemented functions back to the database manager: It can be called by both types of communication exit libraries. library, library:

This function must be declared extern "C" if the library is compiled as C++.

This function is not required to be threadsafe, Since it is only called single time

## API header file

dbzcommexit.h

## API and data structure syntax

```
SQL_API_RC SQL_API_FN dbzcommexitInit dbzint32 version
```

void *commexit\_fns,

dbzcommexitLogMessage *logMessage\_fn, char **errormsg, dbzint32 *errormsg]en

)

## db2commexilnit API Parameters

## version

Input: The highest version of the API supported by the instance loading that library The value DBZCOMMEXIT API VERSION, in dbzcommexit.h, contains the latest version number of the API that the database manager currently supports. If the library implements communication buffer exit then dbzcommexitInit function must call the DBZCOMMEXIT\_GET\_BUFFER\_FN\_VER macro to get the highest version of the API supported. If the library implements a runtime communication exit library, then dbzcommexitInit function must call the DBZCOMMEXIT GET RUNTIME FN\_VER macro to get the highest version of the API supported. library,

## commexit fns

Output: A pointer to the db2commexitFunctions\_&lt;version\_number&gt; structure, that contains pointers to the APIs implemented for the communication buffer exit library There might be different versions of the APIs, so the commexit\_fns parameter is cast to the dbzcommexitFunctions\_&lt;version\_number&gt; structure corresponding to the version implemented by the library: The first parameter of the db2commexitFunctions\_ &lt;version\_number&gt; structure indicates the version of the APIs implemented by the plug-in. If the library implements a communication buffer exit the version number must by set by calling the DBZCOMMEXITSET BUFFER FN\_VER macro. If the implements a runtime communication exit the version number must be set by calling the DBZCOMMEXITSET RUNTIME\_FN VER macro. Another member; nonSQLAPIVersion, of the structure tells the database manager which version number of the non-SQL APIs that the can handle: Currently, only DBZCOMMEXIT\_NONSQL\_API\_VERSION\_ KEPLER is supported: library, library library, library

## logMessage\_fn

Input: A pointer to the db2commexitLogMessage API, which is implemented by the database manager: The dbzcommexitInit API can call the dbzcommexitLogMessage API to log messages to the db2diag files for debugging or informational purposes. The first parameter of the db2commexitLogMessage API specifies the type of diagnostic errors that are recorded in the db2diag files and the last two parameters are the message and its length: The valid values for the first parameter of the log log string

- DBZCOMMEXIT LOG\_NONE: (0) No logging
- DBZCOMMEXIT LOG\_CRITICAL: (1) Severe Error encountered
- DBZCOMMEXIT LOG ERROR: (2) Error encountered
- DBZCOMMEXIT LOG\_WARNING: (3) Warning
- DBZCOMMEXIT LOG INFO: (4) Informational

The message text is logged in the db2diag files only if the value of the 'level' parameter of the dbzcommexitLogMessage API is less than or equal to the diaglevel database manager configuration parameter: For example, if you use the DBZCOMMEXIT LOG INFO value, the message text is logged only if the diaglevel database manager configuration parameter is set to 4 log

## errormsg

Output: A pointer to the address of an ASCII error message This pointer string:

is allocated by the plug-in and can be returned in this parameter if the function execution is not successful: This memory is freed by calling db2commexitFreeErrormsg:

## errormsglen

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitTerm API Termination

This function frees resources that are used by the communication exit library: It can be called by both types of communication exit libraries.

This API is called by the database manager just before it unloads the communication exit library dbzstop processing: The API must be implemented in a manner s0 it does a complete cleanup of any resources the library holds. For instance, the API must free any memory that is allocated by the library, close files that are still open, and close network connections. The library is responsible for tracking these resources to free them during

This function is not required to be threadsafe as it is called only one time.

## API header file

dbzcommexit.h

## API and data structure syntax

```
SQL_API_RC SQL_API_FN dbzcommexitTerm ) char **errormsg dbzint32 *errormsglen
```

## dbzcommexitTerm API Parameters

## errormsg

Output: A pointer to the address of an ASCII error message that is allocated by the communication buffer exit library This error messages string might be returned in this parameter if the function execution is not successful. This memory is freed by calling db2commexitFreeErrormsg string

## errormsg]en

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitRegister API Registration

This function registers the agent to the connection: It is applicable only in communication buffer exit libraries.

This function is called by the database manager whenever an agent accepts a socket and starts receiving and sending data on the socket: This activity is typically associated with a new SQL connection to the database or instance attachment:

This function is also called when an idle connection is dispatched to an agent to handle a new request from the client:

This function is not directly associated with SQL connections to the database: An input parameter to the function differentiates between a new socket and existing one that is dispatched to a new agent

## API header file

dbzcommexit h

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN dbzcommexitRegister ) void ** pConnectionContext, const dbzcommexi tCommInfo_vl pCommInfo, dbzint32 state dbzint64 pReservedF]ags , char errormsg dbzint32 errormsglen
```

)

## dbzcommexitRegister API Parameters

## pConnectionContext

Input/output: A pointer to communication buffer exit library-specific data. This pointer is specific to the inbound connection: This parameter is passed as input to each function call for that connection. The might allocate and store connection-specific information and make it available in each function call. The memory for the parameter must be freed in the call to dbzcommexitDeregister: The database manager cannot access the memory pointed to by this parameter: library

## pCommInfo

Input: A pointer to a structure that contains information which identifies the database server and protocol-specific information for the incoming connection: Some of the fields in the structure are not setup until multiple buffers are exchanged with the client: The fields are available in later calls to dbzcommexitRecv and db2commexitSend. This scenario specifically to inbound\_appl\_id, outbound\_appl\_id, and connection\_type: When these values are known, the connection\_type parameter indicates whether the connection is for a local database or gateway connection. applies

## State

Input: Indicates under which condition the function called. Possible values are:

- NEWCONNECTION indicates physical incoming client connection:
- AGENT\_ ASSOCIATION indicates an existing idle client connection that becomes active again and is associated with an agent to handle the request:

## pReservedFlags

Input/output: Reserved for future use. The value must be set to 0 on output:

## errormsg

Output: A pointer to the address of an ASCII error message string that is allocated by the communication buffer exit library: This error messages string might be returned in this parameter if the function execution is not successful. This memory is not freed by calling db2commexitFreeErrormsg:

## errormsg]en

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitDeregister API Deregistration

This function releases the agent from the connection with which it was associated. It is applicable only in communication buffer exit libraries.

This function is called by the database manager whenever the agent stops handling requests on the connection: This situation occurs when the physical connection with the client is terminated, or the client is idle and the agent is disassociating

## API header file

dbzcommexit.h

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN dbzcommexitDeregister ) void pConnectionContext, const dbzcommexi tCommInfo_vl pCommInfo, dbzint32 state dbzint64 pReservedF]ags , char errormsg, dbzint32 errormsglen
```

## dbzcommexitDeregister API Parameters

## pConnectionContext

Input: A pointer to communication buffer exit library-specific data: This pointer is specific to the inbound connection: This parameter is as input to each function call for that connection. The database manager cannot access the memory pointed to by this parameter: This memory must be deallocated by this function. passed

## pCommInfo

Input: A pointer to a structure that contains information which identifies the database server and protocol-specific information for the incoming connection.

## State

Input: Indicates under which condition the function is called. Possible values are

- CONNECTION  TERM indicates that the physical connection with the client is terminated:
- AGENT  DISASSOCIATION indicates that the client connection is idle and the agent is disassociated from it

## pReservedFlags

Input/ Output: Reserved for future use. The value must be set to 0 on output:

## errormsg

Output: A pointer to the address of an ASCII error message string that is allocated by the communication buffer exit This error messages string might be returned in this parameter if the function execution is not successful This memory is not freed by calling db2commexitFreeErrormsg: library:

## errormsg]en

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitRecv API Receive

This function is called for each buffer that the database manager receives from a client: It is applicable only in communication buffer exit libraries

This function is called by the database manager immediately after it receives a communication buffer from the client: The function is called after the buffer is decrypted s0 that the communication buffer exit library can access the unencrypted buffer:

## API header file

dbzcommexit.h

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN dbzcommexitRecv ) void pConnectionContext, const dbzcommexi tCommInfo_vl pCommInfo, const dbzcommexitBuffer pBuffer, dbzint64 pReservedF]ags, char errormsg dbzint32 errormsg]en
```

## dbzcommexitRecv API Parameters

## pConnectionContext

Input: A pointer to communication buffer exit library-specific data. This pointer is specific to the inbound connection: This parameter is as input to each function call for that connection. The database manager cannot access the memory pointed to by this parameter: This memory must be deallocated by this function. passed

## pCommInfo

Input: A pointer to a structure that contains information which identifies the database server and protocol-specific information for the incoming connection: Some of the fields in the structure are not setup until multiple buffers are exchanged with the client: The fields are available in later calls to db2commexitRecv and db2commexitSend. This scenario specifically to inbound\_appl\_id, outbound\_appl id, and connection\_type. applies

## pBuffer

Input: A pointer to a structure that contains the length of the buffer that is received by the database manager and pointer to the buffer: If the buffer is encrypted, it is unencrypted before this function is called

## pReservedFlags

Input/Output: The bit DBZCOMMEXIT RECV IN\_FLAG\_END\_DECRYPT is set to indicate that this call is the final call to this function for a DSS that is encrypted. The length of the DSS that is passed as input indicates the length of the encrypted DSS. However; the DSS is then unencrypted and the padding removed. Since there is always padding, the length of the DSS is less than indicated: The length indicated in the pBuffer structure is the final data for the DSS. It is possible that it is zero if a full block size of padding is added:

For output, this value is reserved for future use\_ The value must be set to 0 on output:

## errormsg

Output: A pointer to the address of an ASCII error message string that is allocated by the communication buffer exit library: This error messages string might be returned in this parameter if the function execution is not successful. This memory is not freed by db2commexitFreeErrormsg: calling

## errormsg]en

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitSend API Send

This function is called for each buffer that the database manager sends to a client It is applicable only in communication buffer exit libraries.

This function is called by the database manager immediately before a communication buffer is sent to the client The function is called before the buffer is encrypted s0 that the communication buffer exit library can access the unencrypted buffer:

## API header file

dbzcommexit.h

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN dbzcommexitSend

```
) void pConnectionContext_ const dbzcommexi tCommInfo_vl pCommInfo, const dbzcommexitBuffer pBuffer, dbzint64 pReservedF]ags , char errormsg dbzint32 errormsg]en
```

) ;

## db2commexitSend API Parameters

## pConnectionContext

Input: A pointer to communication buffer exit library-specific data. This pointer is specific to the inbound connection: This parameter is passed as input to each function call for that connection. The database manager cannot access the memory pointed to by this parameter:

## pCommInfo

Input: A pointer to a structure that contains information which identifies the database server and protocol-specific information for the incoming connection. Some of the fields in the structure are not setup until multiple buffers are exchanged with the client The fields are available in later calls to dbzcommexitRecv and dbzcommexitSend. This scenario applies specifically to inbound\_appl \_ id, outbound\_appl\_id, and connection\_type.

## pBuffer

Input: A pointer to a structure that contains the length of the buffer that is sent to the client and a pointer to the buffer: If the buffer is encrypted, it is unencrypted before this function is called:

## pReservedFlags

Input/Output: The bit DBZCOMMEXIT\_SEND\_IN\_FLAG\_PURGE is set if the database manager encounters an error and must purge some buffers that were prepared to send to the client: Some of these buffers might be input to the communication buffer exit library:

output, this value is reserved for future use. The value must be set to 0 on output For

## errormsg

Output: pointer to the address of an ASCII error message string that is

allocated by the communication buffer exit library This error messages might be returned in this parameter if the function execution is not successful. This memory is not freed by dbzcommexitFreeErrormsg: string calling

## errormsglen

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitUserldentity API User identity

This function is called to provide the identity of the user for the current socket: It is applicable only in communication buffer exit libraries.

This function is called to inform the communication buffer exit library of the user The function is also called if these parameters change because of a trusted context switch user or SET SESSION AUTHORIZATION. The user name and session authorization ID are not determined until after the database manager authenticates the user: This function is not called until db2commexitRegister and multiple db2commexitSend and db2commexitRecv functions are called authentication. during

## API header file

dbzcommexit.h

## API and data structure syntax

```
SQL_API_RC SQL_API_ FN dbzcommexitUserIdentity void pConnectionContext, const dbzcommexitCommInfo_v1 pCommInfo, dbzint32 dbzint32 usernameLen, const char pUserame = dbzint32 sessionAuthidLen, const char pSessionAuthid_ dbzint64 pReservedFlags _ char errormsg dbzint3z errormsg]en
```

)

## dbzcommexitUserldentity API Parameters

## pConnectionContext

Input: A pointer to communication buffer exit library-specific data: This pointer is function call for that connection: The database manager does not access the memory pointed to by this parameter:

## pCommInfo

Input: A pointer to a structure that contains information which identifies the database server and protocol-specific information for the incoming connection: Some of the fields in the structure are not setup until multiple buffers are exchanged with the client: The fields are available in later calls to dbzcommexitRecv and db2commexitSend. This scenario applies specifically to inbound\_appl\_ id, outbound\_appl\_id, and connection\_type:

## State

Input: Indicates under which condition the function is called. Possible values are:

- DBZCOMMEXITUSERIDENTNEWCONNECTION a new connection\_

- DBZCOMMEXIT\_USERIDENT\_TC\_SWITCH\_USER a trusted context switch user is issued:
- DBZCOMMEXITUSERIDENTSETSESSION\_USER SET SESSION AUTHORIZATION SQL statement is issued to change the session authorization ID:

## usernameLen

Input: The length of pUsername:

## pUsername

Input: The user name that is used to establish the connection.

## sessionAuthidLen

Input: The length of pSessionAuthid.

## pSessionAuthid

Input: The session authorization ID established for this connection.

## pReservedFlags

Input/ Output: Reserved for future use. The value must be set to 0 on output:

## errormsg

Output: A pointer to the address of an ASCII error message that is allocated by the communication buffer exit library: This error messages might be returned in this parameter if the function execution is not successful. This memory is not freed by db2commexitFreeErrormsg: string string calling

## errormsglen

Output: A pointer to an integer that indicates the length, in bytes, of the error message string in the errormsg parameter:

## dbzcommexitFreeErrormsg API Free error message memory

This function frees the memory that is used to hold an error message from previous API call. It is applicable for both types of communication exit libraries.

## API header file

dbzcommexit.h

## API and data structure syntax

SQL\_API\_RC SQL\_API\_ FN dbzcommexitFreeErrormsg char errormsg ) ;

## dbzcommexitFreeErrormsg API Parameters

## errormsg

Input: A pointer to the error message returned from previous API call.

## Communication buffer exit library functions structure

The dbzcommexitInit function takes a void commexit fns parameter This parameter is cast to the version-specific structure which contains all of the functions that are implemented by the communication buffer exit library: The dbzcommexitInit function must the function pointers manager can call those functions. assign

The structure that must be completed, including a function pointer for each API,

```
struct dbzcommexitFunctions vl dbzint32 version; SQL_API_RC SQL_API_ FN dbzcommexitTerm ) char #*errormsg, db2int32 *errormsglen SQL_API RC SQL_API FN dbzcommexitRegister void ** ppConnectionContext, const dbzcommexitCommInfo_vl pCommInfo, dbzint3z state, dbzint64 pReservedFIags _ char ** errormsg dbzint3z errormsg]en SQL_API_RC SQL_API_ FN dbzcommexitDeregister ) void pConnectionContext, const dbzcommexitCommInfo_vl pCommInfo _ dbzint32 state_ dbzint64 pReservedFlags char ** errormsg dbzint32 errormsg]en SQL_API_RC SQL_API_ FN dbzcommexitRecv void pConnectionContext, const dbzcommexitCommInfo pCommInfo, const dbzcommexitBuffer pBuffer, dbzint64 pReservedFlags _ char ** errormsg, db2int32 errormsg]en SQL_API_RC SQL_API_FN dbzcommexitSend void pConnectionContext, const dbzcommexitCommInfo_vl pCommInfo, const dbzcommexitBuffer pBuffer, dbzint64 pReservedF]ags , char ** errormsg dbzint3z errormsg]en ) SQL_API_RC SQL_API_ FN dbzcommexitUserIdentity void pConnectionContext, const dbzcommexi tCommInfo_vl pCommInfo, dbzint32 state, dbzint32 usernameLen, const char pUserame dbzint32 sessionAuthidLen, const char pSessionAuthid, dbzint64 pReservedFlags _ char errormsg, db2int32 errormsg]en SQL_API_ RC SQL_API_ FN dbzcommexitFreeErrormsg
```

```
char errormsg ) ;
```

## Communication buffer exit library information structure

The information structure indicates the communication protocol information for the current physical connection \_

The dbzcommexitCommInfo\_ structure that is passed to each communication buffer exit library function follows. This structure is included in the dbzcommexit.h file:

```
struct dbzcommexitIPV4Info sockaddr in client_sockaddr; sockaddr in server_sockaddr; } ; struct dbzcommexitIPV6 Info sockaddr_in6 client_sockaddr; sockaddr_in6 server_sockaddr; } struct dbzcommexitIPCInfo void pSharedMemSegmentHandle; } ; struct dbzcommexitNamedPipeInfo void handle; } ; struct dbzcommexi tCommInfo_vl
```

```
dbzint32 clientProtocol; SQL_PROTOCOL dbzint32 connectionType; 1/unknown, Ioca] or gateway db2int32 hostnameLen; db2int32 instanceLen; dbzint32 dbnameLen; db2int32 dbal iasLen; dbzint32 inbound_app] id_Ien; db2int32 outbound_appl_id_Jen; db2int32 clientPID; Client PID dbzint32 reserved2; dbZNodeType member; char hostname[SQL_ HOSTNAME_SZ+l]; char instance[DBZCOMMEXIT_INSTANCE_SZ 1]; char dbname[DBZCOMMEXIT_DBNAME_SZ 1]; char dba] ias [DBZCOMMEXIT DBNAME SZ 1]; char inbound_app]_ id[SQLM_APPLID_SZ 1]; 1]; char reservedCharl [128] union dbzcommexitIPV4Info ipv4Info; dbzcommexitIPV6Info ipv6Info;
```

```
dbzcommexitIPCInfo ipcInfo; dbzcommexitNamedPipeInfo namedPipeInfo;
```

## Communication exit library buffer structure

The buffer structure is the structure that is passed as input to communication exit library functions.

```
The buffer structure follows: struct dbzcommexitBuffer const unsigned char pBuffer; dbzint64 buffer_Ien; db2int32 reservedl; dbzint32 reserved2;
```

## Communication buffer exit library control over connections

The communication buffer exit library can force a of the connection to the client at any time: drop

If the communication buffer exit returns the appropriate error return code on any of the calls to dbzcommexitUserIdentity, dbzcommexitRegister, dbzcommexitDeregister, dbzcommexitRecv, or dbzcommexitSend, the database manager immediately closes the connection with the client: library

This capability allows the communication buffer exit to determine, based on the buffers reviewed, if some inappropriate activity is place: If such a determination is made, any further action by the database manager for that connection can be prevented: library taking

## Communication exit library API versions

The Db2 database system supports multiple versions of communication exit library APIs. Versions are numbered with integers that start with 1.

The version number that the database manager passes to the security library initialization function is the highest supported version number of the API

The communication exit library infrastructure supports both communication buffer exit libraries and runtime communication exit libraries. The input version parameter contains the highest version numbers for both sets of the libraries: Functions must use the DBZCOMMEXIT\_GET\_BUFFER\_FN\_VER macro to obtain the highest supported version number of the function pointer structure for DRDA style functions. Functions must use the DBZCOMMEXIT\_GET RUNTIME\_FN\_VER macro to obtain the highest supported version number of the function pointer structure for the runtime communication exit library functions.

This function must cast commexit\_fns to db2commexitFunctions\_vl, define the function pointers, and call the DBZCOMMEXIT\_SET\_BUFFER\_FN\_VER macro to set the version number: To use the runtime communication exit this function must cast commexit\_fns to dbzcommexitRuntimeFunctions\_ The function must also define the function pointers, and call the DBZCOMMEXIT\_SET\_RUNTIME\_FN\_VER macro to set the version number: Only one of the macros must be called by this function. library,

The version numbers of the communication exit library APIs change only when necessary For example, when there are changes to the parameters of the APIs: Version numbers are not automatically changed with database manager release numbers.

The version numbers allow the introduction of new or changed APIs. Library support for older versions is maintained

## Communication exit library error handing and return codes

When an error occurs in a communication exit library API, the API can return an ASCII text string in the errormsg field. That ASCII text string provides a more specific description of the problem than the return code: The database manager writes this entire string into the db2diag files: log

The memory for these error messages must be allocated by the communication exit library Therefore, the must also provide an API to free this memory: dbzcommexitFreeErrormsg: library

In addition to the errormsg field, at initialization time a message function pointer; IogMessage\_fn, is to the communication buffer exit library The library can use the function to any debugging information to the db2diag files. For example: log\_ passed log log

Log an message indicate init successful (TogMessage\_fn) ) (DBZCOMMEXIT\_LOG\_CRITICAL, comm exit initialization successful strlen( "comm. exit initialization successful") ) ;

For more details about each parameter for the dbzsecLogMessage function, refer to the initialization API dbzcommexitInit in the related reference:

## Return codes

Table 42. Return codes that a communication exit library can return to the database manager:

| Return code   | Define value                    | Details                                                                               |
|---------------|---------------------------------|---------------------------------------------------------------------------------------|
|               | DBZCOMMEXIT_SUCCESS             | Successful execution                                                                  |
|               | DBZCOMMEXIT_ERR_UNKNOWN         | The library encountered an unexpected error:                                          |
|               | DBZCOMMEXIT_ERR_DROP_CONNECTION | The determined that the connection for which it was called must be terminated library |

## Communication exit library development restrictions

Certain restrictions and considerations must be taken when you develop communication exit library:

## Restrictions

The communication exit library must be written in C or C++ and linked with C-linkage: Header files that provide the prototypes, data structures that are required to implement the libraries, and error code definitions are provided only for C and C+t. The function dbzcommexitInit must be declared extern "C" if the library is compiled as C++.

## Signa] handlers

The communication exit must not install signal handlers or change the signal mask Doing so interferes with the signal handlers of the database library

manager: Interfering with the database manager signal handlers might seriously interfere with the ability to report and recover from errors.

## Exceptions

The communication exit library APIs must not throw C++ exceptions Such exceptions can interfere with database manager error handling:

## Thread-safe

The communication exit library functions must be thread-safe. The dbzcommexitInit and dbzcommexitTerm functions are the only APIs that are not required to be thread-safe

## Exit handlers

The communication exit must not install exit handlers or pthread\_atfork handlers. The use of exit handlers is not supported because the communication exit is unloaded before the database manager process exits. library library

## Forklthreads

The communication exit must not call, fork, or create new threads. This situation can lead to undefined behavior such as traps in the database manager library

## Library dependencies

On Linux and UNIX, the communication exit library is loaded from a process that is setuid or setgid It cannot rely on the LD\_LIBRARY LIBPATH environment variables to find dependent libraries Therefore, the library must not depend on more libraries, unless any dependent libraries are accessible through other methods, as: such

- The dependent libraries exist in /1ib or /usr/ib
- The directories in which dependent libraries are found are specified OS-wide (such as in the Id.so.conf file on Linux):
- Dependent libraries are specified in the RPATH in the library itself:

## Symbo]  collisions

When possible, communication exit libraries might be compiled and linked with any available that reduce the likelihood of symbol collisions. Such as, that reduce unbound external symbolic references\_ For example, use of the -Bsymbo] iclinker on HP; Solaris, and Linux can help prevent problems that are related to symbol collisions. However; for libraries that are written on AIX, do not use the -brtl linker explicitly or implicitly: options options option option

## 32-bit versus 64-bit considerations

The database manager has both 32-bit and 64-bit versions, depending on the operating system. A 32-bit communication exit library must be enabled on 32-bit database manager: A 64-bit communication exit library must be enabled on 64-bit database manager: You cannot mix the two.

## Stored procedures, triggers\_ and other interna]  SQL

Stored procedure interaction with the server is passed onto the communication exit library: Much of the interaction does not occur over standard communication channels and does not fit the model that is used for the exit library: Similarly, triggers, and other sources of internal SQL do not pass over standard communication channels and are not passed onto the communication exit library:

## Communication buffers must not be manipulated

It is expected that the communication exit library does not manipulate Or change the buffers that it is passed.

Db2 supports updating the fix pack level of individual members in Db2 pureScale environments without stopping other members. This operation is known as updates. Similarly, it is possible to the level of the library that is used on individual members. It is possible that two different versions of the communication exit library might be running simultaneously on two different members. Similarly, each member can be at a different fix pack level. The communication exit library must tolerate such conditions without error: rolling update

## Loading plug-in Tibraries on AIX with an extension of or So

On AIX, security plug-in libraries can have a file name extension of a or So\_ The mechanism that is used to load the plug-in depends on which extension is used: library

- Plug-in libraries with a file name extension of a Plug-in libraries with file name extensions of a are assumed to be archives which contain shared object members. These members must be named shr.0 for 32-bit or shr64.0 for 64-bit: A single archive can contain both the 32-bit and 64-bit members, allowing it to be deployed on both types of operating systems.
- Plug-in libraries with a file name extension of So Plug-in libraries with file name extensions of s0 are assumed to be dynamically loadable shared objects. Such an object is 32-bit or 64-bit depending on the compiler and linker that are used when it was built: options

On all operating systems, other than AIX, security plug-in libraries are always assumed to be dynamically loadable shared objects.

## Communication exit library API calling sequences

API sequences differ depending on specific scenarios and which exit library you use. calling

The following topics outline specific scenarios that you must be aware of when you develop communication exit libraries Some topics apply to only communication buffer exit libraries. Some topics apply to only runtime communication exit libraries. Some topics apply to both types of communication exit libraries The topics help you determine the calling sequence most appropriate for your environment

## API calling sequence Normal connect in a single agent

The most typical scenario is a client that connects to the database manager; issuing some SQL, and then disconnecting: This API sequence applies to communication buffer exit libraries. calling

In this case, a single agent; or thread handles the connection, and the following calls are made:

- 1\_ dbzcommexitRegister for new socket connection\_
- 2. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- 3\_ dbzcommexitUserIdentity for connection
- 4 dbzcommexitRecv and dbzcommexitSend to handle clients SQL requests, possibly multiple times.
- 5. dbzcommexitDeregister to terminate socket connection:

## API calling sequence Connect without a connect reset

This scenario covers a connect over an existing socket: The client might initiate another SQL connection without first issuing a connect reset: Two API sequences are illustrated. One shows how to implement the sequence for a runtime communication exit library The other shows how to implement the sequence for a communication buffer exit library calling

## Communication buffer exit library

When the database manager receives the SQL connect statement from the client, it implicitly drives an internal connect reset before it continues with the connect: Regular requests and replies flow back and forth as there is no change to the status of the socket: In this case, a single agent is handling all requests. As the buffers that contain the connect request from the client is made available through dbzcommexitRecv, the communication buffer exit is able to determine a new connect is started when the buffer is parsed. The following calls are made: library

- 1\_ dbzcommexitRegister for a new socket connection\_
- 2\_ dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times:
- 3 dbzcommexitUserIdentity for a new connection:
- 4\_ dbzcommexitRecv and dbzcommexitSend to handle client SQL requests, possibly multiple times:
- 5. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- 6. dbzcommexitUserIdentity for a new connection:
- 7 . dbzcommexitRecv and dbzcommexitSend to handle client SQL requests, possibly multiple times.
- 8 dbzcommexitDeregister to terminate socket connection:

## Note:

dbzcommexitRegister and dbzcommexitDeregister are called only a single time each, even though the database manager processed two SQL connections.

## Runtime communication exit library

When the database manager receives the SQL connect statement from the client, it implicitly drives an internal connect reset before it continues with the connect: In this case, a single agent is handling all requests. The following calls are made:

- 1\_ dbzcommexitSessionInit for a new connection.
- 2 dbzcommexitSQL* to handle SQL requests.
- 3 dbzcommexitSessionTerm to close a connection.
- 4\_ dbzcommexitSessionInit for a new connection\_
- 5 dbzcommexitSQL* to handle SQL requests.
- 6. dbzcommexitSessionTerm to close connection.

## API calling sequence Trusted context and switch user

This scenario is similar to connecting without a connect reset\_ The difference is the client requests a trusted context switch user rather than sending a new SQL connect request: Two API calling sequences are illustrated. One shows how to implement the sequence for a runtime communication exit The other shows to implement the sequence for communication buffer exit library: how library:

## Communication buffer exit library

The following calls are made:

- 1. dbzcommexitRegister for a new socket connection:
- 2. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- 3\_ dbzcommexitUserIdentity for a new connection
- 4 dbzcommexitRecv and dbzcommexitSend to handle clients SQL requests, possibly multiple times.
- 5. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- At some future point, the client sends a trusted context switch user request to the server to switch the user for the connection\_
- 6. dbzcommexitUserIdentity for trusted context switch user:
- 7 . dbzcommexitRecv and dbzcommexitSend to handle clients SQL requests, possibly multiple times.
- dbzcommexitDeregister to terminate socket connection:

## Runtime communication exit library

The following calls are made:

- 1. dbzcommexitSessionInit for a new connection\_
- 2. dbzcommexitSQL* to handle SQL requests.
- 3\_ dbzcommexitSessionTerm to close a user session\_
- 4 dbzcommexitSessionInit for a new user session.
- 5. dbzcommexitSQL* to handle SQL requests.
- 6. dbzcommexitSessionTerm to close a connection

## API calling sequence Connection concentrator

This scenario covers the API calling sequence when connection concentrator is used. The connection concentrator feature allows the database manager to handle many more clients than there are coordinating agents or threads. This API calling sequence applies to communication buffer exit libraries.

When a client reaches a unit of work boundary and does not send another request immediately, client sockets are placed into an idle The agent that previously handled client requests moves on to another client When the idle socket has data to read, dispatcher finds an idle agent to handle it: Over the life of an SQL connection, there might be multiple agents that handle the client requests. Each time the socket is moved in and out of the idle dbzcommexitDeregister and dbzcommexitRegister are called: The following calls are made: pool,

- 1. dbzcommexitRegister for a new socket connection:
- 2. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- 3. dbzcommexitUserIdentity for a new connection
- 4\_ dbzcommexitRecv and dbzcommexitSend to handle client SQL requests, possibly multiple times.
- The client does not send another request immediately and the socket is placed into an idle pool.
- 5. dbzcommexitDeregister to disassociate with the agent:

- At some future point, the client sends another request, at which the dispatcher chooses an idle agent: The agent is likely a different one than used previously: point
- 6\_ dbzcommexitRegister to associate an agent
- 7\_ db2commexitRecv and dbzcommexitSend to handle client SQL requests, possibly multiple times.
- 8\_ dbzcommexitDeregister to terminate socket connection:

Note: There are multiple calls to dbzcommexitRegister and dbzcommexitDeregister for a single SQL connection.

## API calling sequence SET SESSION AUTHORIZATION statement

This scenario covers the API calling sequence when the SET SESSION AUTHORIZATION statement is used. Two API calling sequences are illustrated. One shows how to implement the sequence for a runtime communication exit The other shows how to implement the sequence for a communication buffer exit library: library:

## Communication buffer exit library

The SET SESSION AUTHORIZATION statement changes the session authorization ID in use for the current connection: DbzcommexitUserIdentity is called to inform the communication buffer exit library that identity information changed for the current connection. The following calls are made:

- 1 dbzcommexitRegister for a new socket connection.
- 2. dbzcommexitRecv and dbzcommexitSend to handle authentication, possibly multiple times.
- 3\_ dbzcommexitUserIdentity for a new connection.
- 4\_ dbzcommexitRecv and dbzcommexitSend to handle clients SQL requests, possibly multiple times.
- The user issues a SET SESSION AUTHORIZATION statement This request is passed to dbzcommexitRecv It is no different from other SQL statement
- 5. dbzcommexitUserIdentity for a SET SESSION AUTHORIZATION:
- 6\_ db2commexitRecv and dbzcommexitSend to handle client SQL requests, possibly multiple times
- 7\_ dbzcommexitDeregister to terminate socket connection.

## Runtime communication exit library

The SET SESSION AUTHORIZATION statement changes the session authorization ID in use for the current connection\_ DbZcommexitSetSessionAuth is called to inform the communication buffer exit library that identity information changed for the current connection\_ The following calls are made:

- 1\_ db2commexitSessionInit for a new connection\_
- 2
- dbzcommexitSQL to handle new SQL requests: The user issues SET SESSION AUTHORIZATION statement: This request is no different from other SQL statement
- 3\_ db2commexitSetSessionAuth for a SET SESSION AUTHORIZATION.
- 4\_ db2commexitSQL to handle new SQL requests.
- 5. dbzcommexitSessionTerm to close the connection.

## Considerations for setting the target logical node

Considerations must be taken when you set the target logical node with the DBZNODE variable, or with the SET CLIENT command: The information to communication buffer exit libraries. applies

In partitioned database environment, if the client specifies a member through the DBZNODE variable that is not the member it is configured to connect to, the database manager switches the connection to the new member specified in the variable. The client connection is forwarded through the connected member to the remote member: In this case, the communication buffer exit library is called at both members. There are a few features to note:

- At the connected member; the client address reflects the actual client:
- At the remote member; the client address reflects the connected member:
- The outbound application id at the connected member is the same as the inbound application id at the remote member:
- At the connected member; the database alias reflects the database alias provided by the actual client: used
- At the remote member; the database alias used is the actual database name

When the application IDs are established, the connectionType in the dbzcommexitCommInfo\_vl structure is set to GATEWAY.

## Considerations for a connect gateway

Considerations must be taken when the database manager acts as a connect gateway to another DRDA database server:

When Db2 acts as a connect gateway the communication exit library is called in the same manner as standard connection. When authentication is complete and the application IDs are established, the connectionType in the dbzcommexitCommInfovl structure is set to GATEWAY. The outbound\_app] ication\_id matches the application ID for the connection at the DRDA database server:

## Considerations for DATA ENCRYPT

Considerations must be taken when the DATA ENCRYPT authentication type is used. The information to only communication buffer exit libraries. applies

The handling of communications that is protected with the authentication type DATAENCRYPT requires mention: Unlike SSL, the encryption and decryption necessary to support DATA ENCRYPT is run by the database manager It is run after data is received from the client and before a reply is sent to the client: special

## Receive and DATA ENCRYPT

When an encrypted DSS is received from the client; the buffer is decrypted as needed by the database manager: That is, the whole buffer is not decrypted all at one time\_ The communication buffer exit library is called with the decrypted data as it is decrypted.

The DSS length, or the DSS continuation length if the DSS is longer than a logical record, contains the length of the encrypted DSS. It does not contain the length of the decrypted buffer: As the encryption always adds padding, this length is always larger than the plaintext length. The length of the padding for DSS is a maximum of 8 bytes.

When the final call to dbzCommexitRecv is made, the DBZCOMMEXIT\_RECV\_IN\_FLAG\_END\_DECRYPT flag is passed as input to indicate the end of the encrypted DSS

Note: It is possible the length in such a case is 0, indicating that a full block size of padding is added.

## Send and DATA ENCRYPT

When a DSS reply to the client is encrypted, multiple plaintext DSS and encrypted DSS might make up the buffer which is sent to the client: As these DSS are prepared, are passed as input to the dbzcommexitSend routine: These passes are done one at a time as the plaintext data must be used as input before encryption. The database manager might receive an error condition which requires it to purge previously prepared, but not sent, DSS:\_ The communication buffer exit might already know about these libraries. The dbzCommexitSend function is called with a length of 0 and DBZCOMMEXIT\_SEND\_IN\_FLAG\_PURGE indicating that a purge occurred: they library flag

## Chapter 11. Audit facility record layouts

When an audit record is extracted from the audit each record has one of the formats shown in the following tables. Each table is preceded by sample record. log'

The description of each item in the record is shown one row at a time in the associated table: Each item is shown in the table in the same order as it is output in the delimited file after the extract operation.

## Note:

- 1. Depending on the audit event, not all fields in the audit records will have values. When there is no values in the field, the field will not be shown in the audit output
- 2\_ Some fields such as Access Attempted' are stored in the delimited ASCII format as bit maps. In this flat report file, however; these fields appear as a set of strings representing the bit map values

## Audit record object types

The following table shows for each audit record object type whether it can generate CHECKING, OBJMAINT, and SECMAINT events.

Table 43. Audit Record Object Types Based on Audit Events

| Object type        | CHECKING events   | OBJMAINT events   | SECMAINT events   |
|--------------------|-------------------|-------------------|-------------------|
| ACCESS_RULE        |                   |                   | X                 |
| ALIAS              | X                 | X                 |                   |
| ALL                |                   |                   |                   |
| AUDIT_POLICY       |                   |                   |                   |
| BUFFERPOOL         |                   | X                 |                   |
| CHECK_CONSTRAINT   |                   | X                 |                   |
| DATABASE           | X                 |                   | X                 |
| DATA TYPE          |                   |                   |                   |
| EVENT_MONITOR      | X                 |                   |                   |
| FOREIGN_KEY        |                   |                   |                   |
| FUNCTION           |                   |                   | X                 |
|                    |                   |                   | X                 |
| HISTOGRAM TEMPLATE |                   |                   |                   |
| INDEX              |                   |                   | X                 |
| INDEX EXTENSION    |                   |                   |                   |
| INSTANCE           | X                 |                   |                   |
| JAR_FILE           |                   |                   |                   |
|                    |                   |                   | X                 |
| MESHOD_BODY        |                   |                   |                   |
| MODULE             | X                 |                   | X                 |

Table 43. Audit Record Object Types Based on Audit Events  (continued)

| Object type              | CHECKING events   | OBJMAINT events   | SECMAINT events   |
|--------------------------|-------------------|-------------------|-------------------|
| NICKNAME                 | X                 | X                 | X                 |
| NODEGROUP                |                   | X                 |                   |
| NONE                     |                   | X                 | X                 |
| OPTIMIZATION PROFILE     |                   |                   |                   |
| PACKAGE                  |                   | X                 | X                 |
| PACKAGE CACHE            |                   |                   |                   |
| PERMISSION               |                   | X                 | X                 |
| PRIMARY_KEY              |                   | X                 |                   |
| REOPT_VALUES             | X                 |                   |                   |
| ROLE                     |                   |                   | X                 |
| SCHEMA                   | X                 |                   | X                 |
| SECURITY LABEL           |                   |                   | X                 |
| SECURITY LABEL COMPONENT |                   |                   |                   |
| SECURITY POLICY          |                   |                   | X                 |
| SEQUENCE                 |                   |                   |                   |
| SERVER                   |                   |                   | X                 |
| SERVER OPTION            |                   |                   |                   |
| SERVICE CLASS            |                   |                   |                   |
| TABLE                    |                   |                   |                   |
| TABLESPACE               |                   |                   |                   |
| E                        |                   |                   | X                 |
| TYPE&TRANSFORM           | X                 |                   |                   |
| UNIQUE_CONSTRAINT        |                   |                   |                   |
| USER MAPPING             |                   |                   |                   |
| USER_TEMPORARY_TABLE     |                   |                   | X                 |
| VIEW                     |                   |                   | X                 |
| WORKLOAD                 |                   |                   | X                 |
| WRAPPER                  |                   |                   |                   |
| XSR object               |                   |                   | X                 |

## Audit record layout for AUDIT events

The following table shows the layout of the audit record for AUDIT events.

Sample audit record:

timestamp-2007-04-10-08.29.52.000001;

category-AUDIT;

audit event-START;

event correlator-0;

event status-0;

userid-newton;

authid-NEWTON;

ication id=*LOCAL\_APPLICATION; app] -

appl ication name-dbzaudit.exe;

Table 44. Audit Record Layout for AUDIT Events

| NAME                    | FORMAT                   | DESCRIPTION                                                                                                                                                    |
|-------------------------|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp               | CHAR(26)                 |                                                                                                                                                                |
| Category                | CHAR(8)                  | Category of audit event: Possible values are: AUDIT                                                                                                            |
| Audit Event             | VARCHAR(32)              | Specific Audit Event: For list of possible values, refer to the section for the AUDIT category in Audit events on page 354.                                    |
| Event Correlator        | INTEGER                  | Correlation identifier for the operation audited. Can be used to identify what audit records are associated with a single event: being                         |
| Event Status            | INTEGER                  | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event 0                                                                       |
| User ID                 | VARCHAR(1024)            | User ID at time of audit event_                                                                                                                                |
| Authorization ID        | VARCHAR(128)             | Authorization ID at time of audit event:                                                                                                                       |
| Database Name           | CHAR(8)                  | Name of the database for which the event was generated. Blank if this was an instance level audit event_                                                       |
| Origin Node Number      | SMALLINT                 | Member number at which the audit event occurred.                                                                                                               |
| Coordinator Node Number | SMALLINT                 | Member number of the coordinator member:                                                                                                                       |
| Application ID          | VARCHAR(255)             | Application ID in use at the time the audit event occurred:                                                                                                    |
| Application Name        | VARCHAR(1024)            | Application name in use at the time the audit event occurred:                                                                                                  |
| Package Schema          | VARCHAR(128)             | Schema of the package in use at the time of the audit event:                                                                                                   |
| Package Name            | VARCHAR(128)             | Name of package in use at the time the audit event occurred:                                                                                                   |
| (Package Section        | SMALLINT                 | Section number in package being used at the time the audit event occurred                                                                                      |
| Package Version         | VARCHAR(64)              | Version of the package in use at the time the audit event occurred                                                                                             |
| Local Transaction ID    | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred_ This is the SQLU_TID structure that is part of the transaction logs:                     |
| Global Transaction ID   | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred. This is the data field in the SQLP_GXID structure that is part of the transaction logs. |
| Client User ID          | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                                                  |

Table 44. Audit Record Layout for AUDIT Events (continued)

| NAME                              | FORMAT       | DESCRIPTION                                                                                                                                                                            |
|-----------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Client Workstation Name           | VARCHAR(255) | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred_                                                                                      |
| Client Application Name           | VARCHAR(255) | The value of the CURRENT CLIENT_ APPLNAME special register at the time the audit event occurred_                                                                                       |
| Client Accounting String          | VARCHAR(255) | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred:                                                                                          |
| Trusted Context Name              | VARCHAR(255) | The name of the trusted context associated with the trusted connection.                                                                                                                |
| Connection Trust Type             | CHAR(1)      | Possible values are: NONE '1' IMPLICIT_TRUSTED_CONNECTION '2' EXPLICIT_TRUSTED_CONNECTION                                                                                              |
| Role Inherited                    | VARCHAR(128) | The role inherited through a trusted connection.                                                                                                                                       |
| Name Policy                       | VARCHAR(128) | The audit policy name:                                                                                                                                                                 |
| Policy Association Object Type    | CHAR(1)      | The type of the object that the audit policy is associated with: Possible values include: N = Nickname S = MQT T Table (untyped) i = Authorization ID 8= Authority x = Trusted context |
| Association Subobject Type Policy | CHAR(1)      | The type of sub-object that the audit policy is associated with: If the Object Type is ? (authorization id), then possible values are: U = User G = Group R = Role                     |
| Association Object Name Policy    | VARCHAR(128) | The name of the object that the audit policy is associated with:                                                                                                                       |
| Association Object Schema Policy  | VARCHAR(128) | The schema name of the object that the audit policy is associated with: This is NULL if the Policy Association Object Type identifies an object to which a schema does not apply:      |
| Audit Status                      | CHAR(1)      | The status of the AUDIT category in an audit policy Possible values are: B-Both F-Failure N-None S-Success                                                                             |
| Checking Status                   | CHAR(1)      | The status of the CHECKING category in an audit policy Possible values are: B-Both F-Failure N-None S-Success                                                                          |

Table 44. Audit Record Layout for AUDIT Events (continued)

| NAME              | FORMAT        | DESCRIPTION                                                                                                       |
|-------------------|---------------|-------------------------------------------------------------------------------------------------------------------|
| Context Status    | CHAR(1)       | The status of the CONTEXT category in an audit policy Possible values are: B-Both F-Failure N-None S-Success      |
| Execute Status    | CHAR(1)       | The status of the EXECUTE category in an audit policy Possible values are: B-Both F-Failure N-None S-Success      |
| Execute With Data | CHAR(1)       | The WITH DATA of the EXECUTE category in the audit policy: Possible values are: Y-WITH DATA N-WITHOUT DATA option |
| Objmaint Status   | CHAR(1)       | The status of the OBJMAINT category in an audit policy: Possible values are: B-Both F-Failure N-None S-Success    |
| Secmaint Status   | CHAR(1)       | The status of the SECMAINT category in an audit policy See Audit Status field for possible values                 |
| Sysadmin Status   | CHAR(1)       | The status of the SYSADMIN category in an audit policy Possible values are: B-Both F-Failure N-None S-Success     |
| Validate Status   | CHAR(1)       | The status of the VALIDATE category in an audit policy Possible values are: B-Both F-Failure N-None S-Success     |
|                   | CHAR(8)       | The error type in an audit policy Possible values are: AUDIT and NORMAL.                                          |
| Data Path         | VARCHAR(1024) | The to the active audit specified on the dbzaudit configure command_ path logs                                    |
| Archive Path      | VARCHAR(1024) | The to the archived audit specified on the dbzaudit configure command path logs                                   |
| Original User ID  | VARCHAR(1024) | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                          |

## Audit record layout for CHECKING events

The format of the audit record for CHECKING events is shown in the following table:

## Sample audit record:

timestamp-1998-06-24-08.42.11.622984; category-CHECKING; audit event-CHECKING\_OBJECT; event correlator-2; event status-0; database-FOO; userid-boss; authid-BOSS; ication id=*LOCAL.newton.980624124210; appl ication name-testapp; package schema-NULLID; package name-SYSSHZOO; package section-0; object schema-GSTAGER; object name=NONE; object type-REOPT VALUES; access approva] reason-DBADM; access attempted-STORE; app] -

Table 45. Audit record layout for CHECKING events

| NAME                    | FORMAT        | DESCRIPTION                                                                                                                          |
|-------------------------|---------------|--------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp               | CHAR(26)      | Date and time of the audit event_                                                                                                    |
| Category                | CHAR(8)       | Category of audit event: Possible values are: CHECKING                                                                               |
| Audit Event             | VARCHAR(32)   | Specific Audit Event: For list of possible values, refer to the section for the CHECKING category in Audit events" on page 354.      |
| Event Correlator        | INTEGER       | Correlation identifier for the operation audited. Can be used to identify what audit records are associated with single event: being |
| Event Status            | INTEGER       | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event 0                                             |
| Database Name           | CHAR(8)       | Name of the database for which the event was generated. Blank if this was an instance level audit event_                             |
| User ID                 | VARCHAR(1024) | User ID at time of audit event                                                                                                       |
| Authorization ID        | VARCHAR(128)  | Authorization ID at time of audit event:                                                                                             |
| Origin Node Number      | SMALLINT      | Member number at which the audit event occurred                                                                                      |
| Coordinator Node Number | SMALLINT      | Member number of the coordinator Member:                                                                                             |
| Application ID          | VARCHAR(255)  | Application ID in use at the time the audit event occurred.                                                                          |
| Application Name        | VARCHAR(1024) | Application name in use at the time the audit event occurred:                                                                        |
| Package Schema          | VARCHAR(128)  | Schema of the package in use at the time of the audit event                                                                          |
| Package Name            | VARCHAR(128)  | Name of package in use at the time the audit event occurred:                                                                         |
| Package Section Number  | SMALLINT      | Section number in package used at the time the audit event occurred being                                                            |

Table 45. Audit record layout for CHECKING events (continued)

| NAME                     | FORMAT                   | DESCRIPTION                                                                                                                                                                                                                                                                              |
|--------------------------|--------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Object Schema            | VARCHAR(128)             | Schema of the object for which the audit event was generated_                                                                                                                                                                                                                            |
| Object Name              | VARCHAR(128)             | Name of object for which the audit event was generated:                                                                                                                                                                                                                                  |
| Object Type              | VARCHAR(32)              | Type of object for which the audit event was generated: Possible values include: those shown in the topic titled Audit record object types'                                                                                                                                              |
| Access Approval Reason   | CHAR(34)                 | Indicates the reason why access was approved for this audit event Possible values include: those shown in the topic titled "List of possible CHECKING access approval reasons                                                                                                            |
| Access Attempted         | CHAR(34)                 | Indicates the type of access that was attempted. Possible values include: those shown in the topic titled "List of possible CHECKING access attempted types"                                                                                                                             |
| Package Version          | VARCHAR (64)             | Version of the package in use at the time that the audit event occurred_                                                                                                                                                                                                                 |
| Checked Authorization ID | VARCHAR(128)             | Authorization ID is checked when it is different than the authorization ID at the time of the audit event For example, this can be the target owner in TRANSFER OWNERSHIP statement When the audit event is SWITCH_USER, this field represents the authorization ID that is switched to_ |
| Local Transaction ID     | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred This is the SQLU_TID structure that is of the transaction logs: part                                                                                                                                                |
| Global Transaction ID    | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred: This is the data field in the SQLP_GXID structure that is of the transaction part logs:                                                                                                                           |
| Client User ID           | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                                                                                                                                                                            |
| Client Workstation Name  | VARCHAR(255)             | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred:                                                                                                                                                                                        |
| Client Application Name  | VARCHAR(255)             | The value of the CURRENT CLIENT_APPLNAME special register at the time the audit event occurred_                                                                                                                                                                                          |
| Client Accounting String | VARCHAR(255)             | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred:                                                                                                                                                                                            |
| Trusted Context Name     | VARCHAR(255)             | The name of the trusted context associated with the trusted connection.                                                                                                                                                                                                                  |
| Connection Trust Type    | CHAR(1)                  | Possible values are: NONE '1' IMPLICIT_TRUSTED_CONNECTION 2 EXPLICIT_TRUSTED_CONNECTION                                                                                                                                                                                                  |
| Role Inherited           | VARCHAR(128)             | The role inherited through a trusted connection.                                                                                                                                                                                                                                         |
| Original User ID         | VARCHAR(1024)            | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                                                                                                                                                                                                 |

## CHECKING access approval reasons

The following list shows the possible CHECKING access approval reasons.

Note that an audit record might contain multiple access approval reasons, for example: access approval reason-DATAACCESS,ACCESSCTRL;\_ When multiple access approval reasons are present, the user must have all stated authorities and privileges in order to pass the authorization check for the attempted access

Access is not approved; rather; it was denied.

Access is approved; the application or user has SYSADM authority

## 0xO0O00000000000000000000000000004 SYSCTRL

Access is approved; the application or user has SYSCTRL authority:

Access is approved; the application or user has SYSMAINT authority

Access is approved; the application or user has DBADM authority

Access is approved; the application or user has an explicit privilege on the database.

Access is approved; the application or user has a privilege on the object or function.

## 0x00000000000000000000000000000080 DEFINER

Access is approved; the application or user is the definer of the object o function:

Access is approved; the application or user is the owner of the object or function.

## 0xO0O00000000000000000000000000200 CONTROL

Access is approved; the application or user has CONTROL privilege on the object or function:

Access is approved; the application or user has bind privilege on the package:

Access is approved; if the instance or database is in quiesce mode, the application or user may connect or attach:

Access is approved; the application or user has SYSMON authority:

## 0x00000000000000000000000000002000 SECADM

Access is approved; the application or user has SECADM authority:

## 0x00000000000000000000000000004000 SETSESSIONUSER

Access is approved; the application or user has SETSESSIONUSER authority:

## Oxoooooooooooooooooooooooooooosooo TRUSTED\_CONTEXT\_MATCH

Connection attributes matched the attributes of a unique trusted context defined at the Db2 server:

Access is approved to use trusted context:

Access is approved; the application or user has SQLADM authority:

Access is approved; the application or user has WLMADM authority:

## 0xO0O00000000000000000000000080000 EXPLAIN

Access is approved; the application or user has EXPLAIN authority:

Access is approved; the application or user has DATAACCESS authority

Access is approved; the application or user has ACCESSSCTRL authority:

Access is approved; the application or user has the SECUREOBJECTAUTH authority

## CHECKING access attempted types

The following list shows the possible CHECKING access attempted types:

If Audit Event is CHECKING\_TRANSFER, then the audit entry reflects that a privilege is held or not:

Attempt to verify whether CONTROL privilege is held:

Attempt to alter an object or to verify whether ALTER privilege is held if Audit Event is CHECKING\_TRANSFER

## 0x00000000000000000000000000000004 DELETE

Attempt to delete an object or to verify whether DELETE privilege is held if Audit Event is CHECKING\_TRANSFER

## 0x00000000000000000000000000000008 INDEX

Attempt to use an index or to verify whether INDEX privilege is held if Audit Event is CHECKING\_ TRANSFER

Attempt to insert into an object or to verify whether INSERT privilege is held if Audit Event is CHECKING\_TRANSFER

A ttempt to query a table or view or to verify whether SELECT privilege is held if Audit Event is CHECKING\_TRANSFER

A ttempt to data in an object or to verify whether UPDATE privilege is held if Audit Event is CHECKING\_TRANSFER update

Attempt to establish referential constraints between objects or to verify whether REFERENCE privilege is held if Audit Event is CHECKING\_TRANSFER

Attempt to create an object:

Attempt to an object: drop

Attempt to create an object within another schema

A ttempt to drop an object found within another schema.

A ttempt to alter or modify an object found within another schema.

## 0xO0O00000000000000000000000002000 EXECUTE

A ttempt to execute or run an application or to invoke a routine, create a function sourced from the routine (applies to functions only) or reference a routine in any DDL statement or to verify whether EXECUTE privilege is held if Audit Event is CHECKING\_TRANSFER

Attempt to bind or prepare application: an

Attempt to set event monitor switches.

Attempt to set constraints on an object

Attempt to create comments on an object:

Attempt to privileges or roles on an object to another authorization ID. grant

## 0x00000000000000000000000000080000 REVOKE

Attempt to revoke privileges or roles from an object from an authorization ID.

## 0x00000000000000000000000000100000 LOCK

Attempt to lock an object:

0xO0O00000000000000000000000200000 RENAME

Attempt to rename an object:

Attempt to connect to a database.

Attempt to access Or use a member of the SYS group.

Attempt to execute a statement with all required privileges on objects held (only used for DBADM/SYSADM)

Attempt to multiple objects. drop

## 0x00000000000000000000000004000000 LOAD

Attempt to load a table in a table space:

## 0x00000000000000000000000008000000 USE

Attempt to create a table in a table space or to verify whether USE privilege is held if Audit Event is CHECKING\_TRANSFER

A ttempt to execute the SET SESSION\_USER statement:

## 000000020000000 FLUSH

Attempt to execute the FLUSH statement

A ttempt to view the values of a reoptimized statement in the EXPLAIN\_PREDICATE table:

Attempt to set an owner that does not match the current user when binding package.

Attempt to issue the SET PASSTHRU statement:

Attempt to transfer an object:

Attempt to verify whether ALTER with GRANT privilege is held.

## WITH\_GRANT

Attempt to verify whether DELETE with GRANT privilege is held.

## 0x00000000000000000000002000000000 INDEX\_WITH\_GRANT

Attempt to verify whether INDEX with GRANT privilege is held

WITH\_GRANT Attempt to verify whether INSERT with GRANT privilege is held.

Attempt to verify whether SELECT with GRANT privilege is held.

A ttempt to verify whether UPDATE with GRANT privilege is held.

0xO0O00000000000000000020000000000 REFERENCE WITH\_GRANT A ttempt to verify whether REFERENCE with GRANT privilege is held.

A ttempt to use sequence or an XSR object or to verify whether USAGE privilege is held if Audit Event is CHECKING\_TRANSFER

Attempt to set a role:

Attempt to establish an explicit trusted connection\_

Attempt to establish an implicit trusted connection.

Attempt to read global variable

Attempt to write a global variable:

## USER

Attempt to switch user ID on an explicit trusted connection

Attempt to associate an audit policy with an object:

Attempt to replace an audit policy association with an object:

Attempt to remove an audit policy association with an object

A ttempt to archive the audit log

## 0xO0O00000000000000020000000000000 AUDIT\_EXTRACT

A ttempt to extract the audit

Attempt to list the audit logs.

Attempt to ignore the triggers associated with a database object:

Attempt to prepare an SQL statement and the user does not hold the necessary object level privilege or DATAACCESS authority:

Attempt to describe a statement and the user does not hold the necessary object level privilege or DATAACCESS authority:

Attempt to set the usage list state.

## Audit record layout for OBJMAINT events

The format of the audit record for OBJMAINT events is shown in the following table:

Sample audit record:

timestamp-1998-06-24-08.42.41.957524; category-OBJMAINT; audit event-CREATE\_OBJECT; event correlator-3; event status-0; database-FOO; userid-boss; authid-BOSS; appl ication id=*LOCAL.newton.980624124210; ication name-testapp; package schema-NULLID; package name-SQLCZ8AI; package section-0; object schema-BOSS; object name=AUDIT; object type-TABLE;

Table 46. Audit Record Layout for OBJMAINT Events

| NAME             | FORMAT      | DESCRIPTION                                                                                                                          |
|------------------|-------------|--------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp        | CHAR(26)    | Date and time of the audit event.                                                                                                    |
| Category         | CHAR(8)     | Category of audit event: Possible values are OBJMAINT                                                                                |
| Audit Event      | VARCHAR(32) | Specific Audit Event: For a list of possible values, refer to the section for the OBJMAINT category in Audit events on page 354.     |
| Event Correlator | INTEGER     | Correlation identifier for the operation being audited. Can be used to identify what audit records are associated with single event: |

Table 46. Audit Record Layout for OBJMAINT Events (continued)

| NAME                    | FORMAT        | DESCRIPTION                                                                                                                                 |
|-------------------------|---------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| Event Status            | INTEGER       | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event 0                                                    |
| Database Name           | CHAR(8)       | Name of the database for which the event was generated. Blank if this was an instance level audit event                                     |
| User ID                 | VARCHAR(1024) | User ID at time of audit event_                                                                                                             |
| Authorization ID        | VARCHAR(128)  | Authorization ID at time of audit event:                                                                                                    |
| Origin Node Number      | SMALLINT      | Member number at which the audit event occurred.                                                                                            |
| Coordinator Node Number | SMALLINT      | Member number of the coordinator member:                                                                                                    |
| Application ID          | VARCHAR(255)  | Application ID in use at the time the audit event occurred:                                                                                 |
| Application Name        | VARCHAR(1024) | Application name in use at the time the audit event occurred:                                                                               |
| Package Schema          | VARCHAR(128)  | Schema of the package in use at the time of the audit event:                                                                                |
| Name Package            | VARCHAR(256)  | Name of package in use at the time the audit event occurred.                                                                                |
| Package Section Number  | SMALLINT      | Section number in package being used at the time the audit event occurred_                                                                  |
| Object Schema           | VARCHAR(128)  | Schema of the object for which the audit event was generated.                                                                               |
| Object Name             | VARCHAR(128)  | Name of object for which the audit event was generated:                                                                                     |
| Object Type             | VARCHAR(32)   | Type of object for which the audit event was generated. Possible values include: those shown in the topic titled Audit record object types' |
| Package Version         | VARCHAR(64)   | Version of the package in use at the time the audit event occurred_                                                                         |
| Security Name Policy    | VARCHAR(128)  | The name of the security policy if the object type is TABLE and that table is associated with security policy                               |

Table 46. Audit Record Layout for OBJMAINT Events (continued)

| NAME                       | FORMAT                   ||
|----------------------------|--------------------------||
| Alter Action               | VARCHAR(32)              | Specific Alter operation Possible values include: ADD_PROTECTED_COLUMN ADD_COLUMN_PROTECTION DROP_COLUMN_PROTECTION ADD_ROW_PROTECTION ADD_SECURITY_POLICY ADD_ELEMENT ADD COMPONENT USE GROUP AUTHORIZATIONS IGNORE GROUP AUTHORIZATIONS USE ROLE AUTHORIZATIONS IGNORE ROLE AUTHORIZATIONS OVERRIDE NOT AUTHORIZED WRITE SECURITY LABEL RESTRICT NOT AUTHORIZED WRITE SECURITY LABEL SECURE UNSECURE ENABLE DISABLE ACTIVATE_ROW_ACCESS_CONTROL ACTIVATE_COLUMN_ACCESS_CONTROL ACTIVATE_ROW_COLUMN_ACCESS_CONTROL |
| Protected Column Name      | VARCHAR(128)             | If the Alter Action is ADD_COLUMN_PROTECTION or DROP_COLUMN_PROTECTION this is the name of the affected column.                                                                                                                                                                                                                                                                                                                                                                                                     |
| Column Security            | VARCHAR(128)             | The security label protecting the column specified in the field Column Name_                                                                                                                                                                                                                                                                                                                                                                                                                                        |
| Security Label Column Name | VARCHAR(128)             | Name of the column containing the security label protecting the row.                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Local Transaction ID       | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred_ This is the SQLU_TID structure that is part of the transaction logs.                                                                                                                                                                                                                                                                                                                                                                          |
| Global Transaction ID      | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred_ This is the data field in the SQLP_GXID structure that is part of the transaction logs.                                                                                                                                                                                                                                                                                                                                                      |
| Client User ID             | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                                                                                                                                                                                                                                                                                                                                                                                                       |
| Client Workstation Name    | VARCHAR(255)             | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred_                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Client Application Name    | VARCHAR(255)             | at the time the audit event occurred:                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| Client Accounting String   | VARCHAR(255)             | The value of the CURRENT CLIENT_ACCTNG register at the time the audit event occurred. special                                                                                                                                                                                                                                                                                                                                                                                                                       |
| Trusted Context Name       | VARCHAR(255)             | The name of the trusted context associated with the trusted connection:                                                                                                                                                                                                                                                                                                                                                                                                                                             |

Table 46. Audit Record Layout for OBJMAINT Events (continued)

| NAME                            | FORMAT        | DESCRIPTION                                                                                                                                                                                                                                                                                          |
|---------------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Connection Trust Type | CHAR(L) |               | Possible values are: NONE 1 IMPLICIT_TRUSTED_CONNECTION 2 EXPLICIT_TRUSTED_CONNECTION                                                                                                                                                                                                                |
| Role Inherited                  | VARCHAR(128)  | The role inherited through trusted connection:                                                                                                                                                                                                                                                       |
| Object Module                   | VARCHAR(128)  | Name of module to which the object belongs:                                                                                                                                                                                                                                                          |
| Associated Object Name          | VARCHAR(128)  | Name of the object for which an association exists The meaning of the association depends on the Object Type for the event: If the Object Type is PERMISSION or MASK, then the associated object is the table on which the permission or mask has been created.                                      |
| Associated Object Schema        | VARCHAR(128)  | Name of the object schema for which an association exists. The meaning of the association depends on the Object Type for the event                                                                                                                                                                   |
| Associated Object Type          | VARCHAR(128)  | The type of the object for which an association exists. The meaning of the association depends on the Object Type for the event                                                                                                                                                                      |
| Associated Subobject Type       | VARCHAR(128)  | The type of the subobject for which an association exists_ The meaning of the association depends on the Object Type for the event_ If the Object Type is MASK and the associated object type is TABLE, then the associated subobject is the column of the table on which the mask has been created_ |
| Associated Subobject            | VARCHAR(128)  | Name of the subobject for which an association exists. The meaning of the association depends on the Object Type for the event:                                                                                                                                                                      |
| Secured                         | VARCHAR(32)   | Specifies if the object is a secured object:                                                                                                                                                                                                                                                         |
| State                           | VARCHAR(32)   | The state of the object: The state depends on the Object Type. Possible values include: ENABLED DISABLED                                                                                                                                                                                             |
| Access Control                  | VARCHAR(32)   | Specifies what access control the object is protected with. Possible values include: ROW access control has been activated on the object COLUMN Column access control has been activated on the object ROW_COLUMN Row and column access control has been activated on the object Row                 |
| Original User ID                | VARCHAR(1024) | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                                                                                                                                                                                                             |

## Audit record layout for SECMAINT events

The format of the audit record for SECMAINT events is shown in the following table:

Sample audit record:

times tamp-1998-06-24-11.57.45.188101; category-SECMAINT; audit event-GRANT event correlator-4; event status-0; database-FOO;

userid-boss;

authid-BOSS;

package schema-NULLID;

package name-SQLC28AI;

package section-0;

object schema-BOSS;

object name-Tl;

object type-TABLE;

grantor-BOSS;

grantee-WORKER;

grantee type-USER;

privilege-SELECT;

Table 47. Audit Record Layout for SECMAINT Events

| NAME                    | FORMAT        | DESCRIPTION                                                                                                                                                                                                                                                                                                                                                                                                                                            |
|-------------------------|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp               | CHAR(26)      | Date and time of the audit event:                                                                                                                                                                                                                                                                                                                                                                                                                      |
| Category                | CHAR(8)       | Category of audit event: Possible values are SECMAINT                                                                                                                                                                                                                                                                                                                                                                                                  |
| Audit Event             | VARCHAR(32)   | Specific Audit Event: For a list of possible values, refer to the section for the SECMAINT category in Audit events" on page 354.                                                                                                                                                                                                                                                                                                                      |
| Event Correlator        | INTEGER       | Correlation identifier for the operation being audited. Can be used to identify what audit records are associated with single event                                                                                                                                                                                                                                                                                                                    |
| Event Status            | INTEGER       | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event 0                                                                                                                                                                                                                                                                                                                                                               |
| Database Name           | CHAR(8)       | Name of the database for which the event was generated. Blank if this was an instance level audit event_                                                                                                                                                                                                                                                                                                                                               |
| User ID                 | VARCHAR(1024) | User ID at time of audit event:                                                                                                                                                                                                                                                                                                                                                                                                                        |
| Authorization ID        | VARCHAR(128)  | Authorization ID at time of audit event:                                                                                                                                                                                                                                                                                                                                                                                                               |
| Origin Node Number      | SMALLINT      | Member number at which the audit event occurred_                                                                                                                                                                                                                                                                                                                                                                                                       |
| Coordinator Node Number | SMALLINT      | Member number of the coordinator member:                                                                                                                                                                                                                                                                                                                                                                                                               |
| Application ID          | VARCHAR(255)  | Application ID in use at the time the audit event occurred:                                                                                                                                                                                                                                                                                                                                                                                            |
| Application Name        | VARCHAR(1024) | Application name in use at the time the audit event occurred_                                                                                                                                                                                                                                                                                                                                                                                          |
| Package Schema          | VARCHAR(128)  | Schema of the package in use at the time of the audit event:                                                                                                                                                                                                                                                                                                                                                                                           |
| Package Name            | VARCHAR(128)  | Name of package in use at the time the audit event occurred.                                                                                                                                                                                                                                                                                                                                                                                           |
| (Package Section Number | SMALLINT      | Section number in package used at the time the audit event occurred_ being                                                                                                                                                                                                                                                                                                                                                                             |
| Object Schema           | VARCHAR(128)  | Schema of the object for which the audit event was generated. If the object type field is ACCESS_RULE then this field contains the security policy name associated with the rule: The name of the rule is stored in the field Object Name: If the object type field is SECURITY_LABEL, then this field contains the name of the security policy that the security label is part of. The name of the security label is stored in the field Object Name: |

Table 47 . Audit Record Layout for SECMAINT Events (continued)

| NAME        | FORMAT       ||
|-------------|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Object Name | VARCHAR(128) | Name of object for which the audit event was generated: Represents a role name when the audit event is any of: ADD_DEFAULT_ROLE DROP_DEFAULT_ROLE ALTER_DEFAULT_ROLE ADD_USER DROP_USER ALTER_USER_ADD_ROLE ALTER_USER_DROP_ROLE ALTER_USER_AUTHENTICATION If the object type field is ACCESS_RULE then this field contains the name of the rule The security policy name associated with the rule is stored in the field Object Schema _ If the object type field is SECURITY_LABEL, then this field contains the name of the security label. The name of the security policy that it is of is stored in the field Object Schema. part |
| Object Type | VARCHAR(32)  | Type of object for which the audit event was generated. Possible values include: those shown in the topic titled Audit record object types' The value is ROLE when the audit event is any of: ADD_DEFAULT_ROLE DROP_DEFAULT_ROLE ALTER_DEFAULT_ROLE ADD_USER DROP_USER ALTER_USER_ADD_ROLE ALTER_USER_DROP_ROLE ALTER_USER_AUTHENTICATION                                                                                                                                                                                                                                                                                               |
| Grantor     | VARCHAR(128) | The ID of the grantor or the revoker of the privilege or authority|
| Grantee     | VARCHAR(128) | Grantee ID for which privilege or authority was granted or revoked: Represents trusted context object when the audit event is any of: ADD_DEFAULT_ROLE DROP_DEFAULT_ROLE ALTER_DEFAULT_ROLE ADD_USER, DROP_USER ALTER_USER_ADD_ROLE ALTER_USER_DROP_ROLE ALTER_USER_AUTHENTICATION                                                                                                                                                                                                                                                                                                                                                      |

Table 47 . Audit Record Layout for SECMAINT Events (continued)

| NAME                   | FORMAT                   | DESCRIPTION                                                                                                                                                                                                                                                                                                                                                                                            |
|------------------------|--------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Grantee Type           | VARCHAR(32)              | Type of the grantee that was granted to or revoked from. Possible values include: USER, GROUP; ROLE, AMBIGUOUS, or is TRUSTED_CONTEXT when the audit event is any of: ADD_DEFAULT_ROLE DROP_DEFAULT_ROLE ALTER_DEFAULT_ROLE ADD_USER DROP_USER ALTER_USER_ADD_ROLE ALTER_USER_DROP_ROLE ALTER_USER_AUTHENTICATION                                                                                      |
| Privilege or Authority | CHAR(34)                 | Indicates the type of privilege or authority granted or revoked. Possible values include: those shown in the topic titled "List of possible SECMAINT privileges or authorities The value is ROLE MEMBERSHIP when the audit event is any of the following: ADD_DEFAULT_ROLE, DROP_DEFAULT_ROLE ALTER_DEFAULT_ROLE ADD_USER DROP_USER ALTER_USER ADD_ROLE ALTER_USER_DROP_ROLE ALTER_USER_AUTHENTICATION |
| Package Version        | VARCHAR(64)              | Version of the package in use at the time the audit event occurred_                                                                                                                                                                                                                                                                                                                                    |
| Access Type            | VARCHAR(32)              | The access type for which a security label is granted: Possible values: READ WRITE ALL The access type for which a security policy is altered. Possible values: USE GROUP AUTHORIZATIONS IGNORE GROUP AUTHORIZATIONS USE ROLE AUTHORIZATIONS IGNORE ROLE AUTHORIZATIONS OVERRIDE NOT AUTHORIZED WRITE SECURITY LABEL                                                                                   |
| Assumable Authid       | VARCHAR(128)             | When the privilege granted is a SETSESSIONUSER privilege this is the authorization ID that the grantee is allowed to set as the session user                                                                                                                                                                                                                                                           |
| Local Transaction ID   | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred_ This is the SQLU_TID structure that is part of the transaction logs:                                                                                                                                                                                                                                                             |
| Global Transaction ID  | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred This is the data field in the SQLP_GXID structure that is part of the transaction logs.                                                                                                                                                                                                                                          |

Table 47. Audit Record Layout for SECMAINT Events   (continued)

| NAME                                | FORMAT       | DESCRIPTION                                                                                                                                                                                                                                                                                        |
|-------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Grantor Type                        | VARCHAR(32)  | Type of the grantor: Possible values include: USER                                                                                                                                                                                                                                                 |
| Client User ID                      | VARCHAR(255) | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                                                                                                                                                                                      |
| Client Workstation Name             | VARCHAR(255) | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred_                                                                                                                                                                                                  |
| Client Application Name             | VARCHAR(255) | The value of the CURRENT CLIENT_APPLNAME special register at the time the audit event occurred_                                                                                                                                                                                                    |
| Client Accounting String            | VARCHAR(255) | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred:                                                                                                                                                                                                      |
| Trusted Context User                | VARCHAR(128) | Identifies a trusted context user when the audit event is ADD_USER or DROP_USER.                                                                                                                                                                                                                   |
| Trusted Context User Authentication | INTEGER      | Specifies the authentication setting for trusted context user when the audit event is ADD_USER, DROP_USER or ALTER_USER_AUTHENTICATION 1 Authentication is required Authentication is not required                                                                                                 |
| Trusted Context Name                | VARCHAR(255) | The name of the trusted context associated with the trusted connection:                                                                                                                                                                                                                            |
| Connection Trust Type               | CHAR(1)      | Possible values are: NONE '1' IMPLICIT_TRUSTED_CONNECTION '2' EXPLICIT_TRUSTED_CONNECTION                                                                                                                                                                                                          |
| Role Inherited                      | VARCHAR(128) | The role inherited through a trusted connection.                                                                                                                                                                                                                                                   |
| Associated Object                   | VARCHAR(128) | Name of the object for which an association exists The meaning of the association depends on the Object Type for the event: If the Object Type is PERMISSION or MASK, then the Associated Object is the table on which that permission or mask has been created.                                   |
| Associated Object Schema            | VARCHAR(128) | Name of the object schema for which an association exists. The meaning of the association depends on the Object Type of the event_                                                                                                                                                                 |
| Associated Object Type              | VARCHAR(128) | The type of the object for which an association exists_ The meaning of the association depends on the Object Type of the event                                                                                                                                                                     |
| Associated Subobject Type           | VARCHAR(128) | The type of the subobject for which an association exists_ The meaning of the association depends on the Object Type of the event If the Object Type is MASK and the Associated Object type is TABLE, then the associated subobject is the column of the table on which the mask has been created_ |
| Associated Subobject Name           | VARCHAR(128) | Name of the subobject for which an association exists_ The meaning of the association depends on the Object Type of the event                                                                                                                                                                      |
| Alter Action                        | VARCHAR(32)  | Specific  Alter Action Possible values include: SECURE UNSECURE ENABLE DISABLE ACTIVATE_ROW_ACCESS_CONTROL ACTIVATE_COLUMN_ACCESS_CONTROL ACTIVATE_ROW_COLUMN_ACCESS_CONTROL                                                                                                                       |

Table 47 . Audit Record Layout for SECMAINT Events (continued)

| NAME             | FORMAT        | DESCRIPTION                                                                                                                                                                                                                                                  |
|------------------|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Secured          | VARCHAR(32)   | Specifies if the object is a secure object                                                                                                                                                                                                                   |
| State            | VARCHAR(32)   | Specifies the state of the object: The state depends on the Object |Type: Possible values include: ENABLED DISABLED                                                                                                                                          |
| Access Control   | VARCHAR(32)   | Specifies what access control type the object is protected with_ ROW Row access control has been activated for the object COLUMN Column access control has been activated for the object ROW_COLUMN Row and column access have been activated for the object |
| Original User ID | VARCHAR(1024) | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                                                                                                                                                                     |

## SECMAINT privileges or authorities

The following list shows the possible SECMAINT privileges or authorities.

Control privilege granted or revoked on or from table or view:

## 0x00000000000000000000000000000002 ALTER

Privilege granted or revoked to alter a table or sequence:

## 0xO0000000000000000000000000000004 ALTER with GRANT

Privilege or revoked to alter a table or sequence with granting of privileges allowed. granted

Privilege granted or revoked to drop table or view:

## 0x00000000000000000000000000000010 DELETE TABLE with GRANT

Privilege granted or revoked to drop table with granting of privileges allowed.

## 0xO0O00000000000000000000000000020 Table Index

Privilege granted or revoked on or from an index:

Privilege granted or revoked on or from an index with granting of privileges allowed.

Privilege granted or revoked on or from an insert on table or view:

## 0x00000000000000000000000000000100 Table INSERT with GRANT

Privilege granted or revoked on or from an insert on table with granting of privileges allowed.

## 0x00000000000000000000000000000200 Table SELECT

Privilege granted or revoked on or from a select on a table:

## 0xO0000000000000000000000000000400 Table SELECT with GRANT

Privilege granted or revoked on or from a select on a table with granting of privileges allowed:

Privilege granted or revoked on or from an on a table or view: update

## 0xO0O00000000000000000000000001000 Table UPDATE with GRANT

Privilege granted or revoked on or from an on table or view with granting of privileges allowed: update

## 0xO0O00000000000000000000000002000 Table REFERENCE

Privilege granted or revoked on or from a reference on table:

## 0x00000000000000000000000000004000 Table REFERENCE with GRANT

Privilege granted or revoked on or from a reference on table with granting of privileges allowed:

CREATEIN privilege granted or revoked on or from a schema.

CREATEIN privilege granted or revoked on or from schema with granting of privileges allowed.

## 0x00000000000000000000000000080000 DROPIN Schema

DROPIN privilege granted or revoked on or from a schema.

DROPIN privilege granted or revoked on or from a schema with granting of privileges allowed:

## 0x00000000000000000000000000200000 ALTERIN Schema

ALTERIN privilege granted or revoked on or from schema.

## 0xO0O00000000000000000000000400000 ALTERIN Schema with GRANT

ALTERIN privilege granted or revoked on or from schema with granting of privileges allowed:

DBADM authority granted or revoked.

Createtab authority granted or revoked.

Bindadd authority granted or revoked.

CONNECT authority granted or revoked:

## Authority

Create not fenced authority granted or revoked.

Implicit schema authority granted or revoked.

## 0x00000000000000000000000020000000 Server PASSTHRU

Privilege granted or revoked to use the pass-through facility with this server (federated database data source)\_

Trusted connection was created

Privilege granted or revoked to create a table in a table space:

Privilege granted or revoked to create table in a table space with granting of privileges allowed:

## 0xO0O00000000000000000000400000000 Column UPDATE

Privilege granted or revoked on or from an on one or more specific columns of a table: update

## 0xO0000000000000000000000800000000 Column UPDATE with GRANT

Privilege granted or revoked on or from an on one or more specific columns of a table with granting of privileges allowed: update

## 0x00000000000000000000001000000000 Column REFERENCE

Privilege granted or revoked on or from reference on one or more specific columns of a table:

## 0x00000000000000000000002000000000 Column REFERENCE with GRANT

Privilege granted or revoked on or from reference on one or more specific columns of a table with granting of privileges allowed.

LOAD authority granted or revoked.

BIND privilege granted or revoked on or from package:

BIND privilege granted or revoked on or from package with granting of privileges allowed:

## 0x00000000000000000000020000000000 EXECUTE

EXECUTE privilege granted or revoked on or from a package or a routine:

EXECUTE privilege granted or revoked on or from a package or a routine with granting of privileges allowed.

## 0x00000000000000000000080000000000 EXECUTE IN SCHEMA

EXECUTE privilege granted or revoked for all routines in

EXECUTE privilege granted or revoked for all routines in schema with granting of privileges allowed:

EXECUTE privilege granted or revoked for all routines in a type:

EXECUTE privilege granted or revoked for all routines in type with granting of privileges allowed.

CREATE EXTERNAL ROUTINE privilege granted or revoked:

QUIESCE\_CONNECT privilege granted or revoked:

SECADM authority granted or revoked

USAGE privilege granted or revoked on or from a sequence

## Oxoooooooooooooooooo1ooooooooooooo USAGE with GRANT Authority

USAGE privilege granted or revoked on or from sequence with granting of privileges allowed:

WITH ADMIN Option is granted or revoked to or from role:

SETSESSIONUSER granted or revoked

Exemption granted or revoked

Security label granted or revoked

Privilege granted or revoked to write a global variable with granting of privileges allowed.

## Membership

Role membership that is granted or revoked

Role membership with ADMIN Option that is granted or revoked

Privilege granted or revoked to read global variable:

## 0x00000000000000002000000000000000 READ with GRANT

Privilege granted or revoked to read global variable with granting of privileges allowed.

Privilege granted or revoked to write a global variable:

Oxooooooooooooooo1oooooooooooooooo SQLADM

SQLADM authority granted or revoked.

WLMADM authority granted or revoked.

EXPLAIN authority granted or revoked.

DATAACCESS authority granted or revoked:

ACCESSCTRL authority granted or revoked.

CREATE\_SECURE\_OBJECT authority granted or revoked.

## Audit record layout for SYSADMIN events

The following table shows the audit record layout for SYSADMIN events.

## Sample audit record:

timestamp-1998-06-24-11.54.04.129923; category-SYSADMIN; audit event-DBZAUDIT; event correlator=l;

event status-0; userid-boss;authid-BOSS; appl ication id=*LOCAL.boss. 980624155404; appl ication name-dbzaudit;

Table 48. Audit Record Layout for SYSADMIN Events

| NAME                    | FORMAT                   | DESCRIPTION                                                                                                                               |
|-------------------------|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp               | CHAR(26)                 | Date and time of the audit event                                                                                                          |
| Category                | CHAR(8)                  | Category of audit event: Possible values are: SYSADMIN                                                                                    |
| Audit Event             | VARCHAR(32)              | Specific Audit Event: For list of possible values, refer to the section for the SYSADMIN category in Audit events" on page 354.           |
| Event Correlator        | INTEGER                  | Correlation identifier for the operation audited Can be used to identify what audit records are associated with single event: being       |
| Event Status            | INTEGER                  | Status of audit event, represented by an SQLCODE where Successful event 0 Failed  event 0                                                 |
| Database Name           | CHAR(8)                  | Name of the database for which the event was generated. Blank if this was an instance level audit event_                                  |
| User ID                 | VARCHAR(1024)            | User ID at time of audit event_                                                                                                           |
| Authorization ID        | VARCHAR(128)             | Authorization ID at time of audit event:                                                                                                  |
| Origin Node Number      | SMALLINT                 | Member number at which the audit event occurred.                                                                                          |
| Coordinator Node Number | SMALLINT                 | Member number of the coordinator member:                                                                                                  |
| Application ID          | VARCHAR(255)             | Application ID in use at the time the audit event occurred:                                                                               |
| Application Name        | VARCHAR(1024)            | Application name in use at the time the audit event occurred_                                                                             |
| Package Schema          | VARCHAR(128)             | Schema of the package in use at the time of the audit event:                                                                              |
| Package Name            | VARCHAR(128)             | Name of package in use at the time the audit event occurred.                                                                              |
| Package Section Number  | SMALLINT                 | Section number in package being at the time the audit event occurred. used                                                                |
| Package Version         | VARCHAR(64)              | Version of the package in use at the time the audit event occurred.                                                                       |
| Local Transaction ID    | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred This is the SQLU_TID structure that is part of the transaction logs. |

Table 48. Audit Record Layout for SYSADMIN Events (continued)

| NAME                      |                          | DESCRIPTION                                                                                                                                                    |
|---------------------------|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Global Transaction ID     | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred. This is the data field in the SQLP_GXID structure that is part of the transaction logs: |
| Client User ID            | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred                                                                   |
| Client Workstation Name   | VARCHAR(255)             | The value of the CURRENT CLIENT_ WRKSTNNAME special register at the time the audit event occurred.                                                             |
| Client Application Name   | VARCHAR(255)             | The value of the CURRENT CLIENT_APPLNAME special register at the time the audit event occurred.                                                                |
| Client Accounting (String | VARCHAR(255)             | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred_                                                                  |
| Trusted Context Name      | VARCHAR(255)             | The name of the trusted context associated with the trusted connection                                                                                         |
| Connection Trust Type     | CHAR(1)                  | Possible values are: NONE '1' IMPLICIT_TRUSTED_CONNECTION '2' EXPLICIT_TRUSTED_CONNECTION                                                                      |
| Role Inherited            | VARCHAR(128)             | The role inherited through a trusted connection.                                                                                                               |
| Original User ID          | VARCHAR(1024)            | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                                                                       |
| Event Details             | VARCHAR(2048)            | Information that is to the audit event_ specific                                                                                                               |

## Audit record layout for VALIDATE events

The format of the audit record for VALIDATE events is shown in the following table:

Sample audit record:

timestamp-2007-05-07-10.30.51.585626; category-VALIDATE; audit event-AUTHENTICATION; event correlatorzl; event status-0; userid-newton; authid-NEWTON; execution id-gstager; appl ication id-*LOCAL.gstager.070507143051; app] ication name-dbzbp; auth type-SERVER; plugin name-IBMOSauthserver;

Table 49. Audit Record Layout for VALIDATE Events

| NAME                     | FORMAT                   | DESCRIPTION                                                                                                                                                    |
|--------------------------|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp                | CHAR(26)                 | Date and time of the audit event_                                                                                                                              |
| Category                 | CHAR(8)                  | Category of audit event: Possible values are VALIDATE                                                                                                          |
| Audit Event              | VARCHAR(32)              | Specific Audit Event: Possible values include: GET_GROUPS, GET_USERID, AUTHENTICATE_PASSWORD, VALIDATE_USER, AUTHENTICATION and GET_USERMAPPING_FROM_PLUGIN:   |
| Event Correlator         | INTEGER                  | Correlation identifier for the operation being audited. Can be used to identify what audit records are associated with single event:                           |
| Event Status             | INTEGER                  | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event 0                                                                       |
| Database Name            | CHAR(8)                  | Name of the database for which the event was generated. Blank if this was an instance level audit event_                                                       |
| User ID                  | VARCHAR(1024)            | User ID at time of audit event                                                                                                                                 |
| Authorization ID         | VARCHAR(128)             | Authorization ID at time of audit event:                                                                                                                       |
| Execution ID             | VARCHAR(1024)            | Execution ID in use at the time of the audit event:                                                                                                            |
| Origin Node Number       | SMALLINT                 | Member number at which the audit event occurred_                                                                                                               |
| Coordinator Node Number  | SMALLINT                 | Member number of the coordinator member:                                                                                                                       |
| Application ID           | VARCHAR(255)             | Application ID in use at the time the audit event occurred.                                                                                                    |
| Application Name         | VARCHAR(1024)            | Application name in use at the time the audit event occurred.                                                                                                  |
| Authentication Type      | VARCHAR(32)              | Authentication type at the time of the audit event                                                                                                             |
| Package Schema           | VARCHAR(128)             | Schema of the package in use at the time of the audit event                                                                                                    |
| Package Name             | VARCHAR(128)             | Name of package in use at the time the audit event occurred.                                                                                                   |
| Package Section Number   | SMALLINT                 | Section number in package used at the time the audit event occurred_ being                                                                                     |
| Package Version          | VARCHAR(64)              | Version of the package in use at the time the audit event occurred_                                                                                            |
| Plug-in Name             | VARCHAR(32)              | The name of the plug-in in use at the time the audit event occurred_                                                                                           |
| Local Transaction ID     | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred_ This is the SQLU_TID structure that is part of the transaction logs:                     |
| Global Transaction ID    | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred: This is the data field in the SQLP_GXID structure that is of the transaction logs: part |
| Client User ID           | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                                                  |
| Client Workstation Name  | VARCHAR(255)             | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred:                                                              |
| Client Application Name  | VARCHAR(255)             | The value of the CURRENT CLIENT_ APPLNAME special register at the time the audit event occurred_                                                               |
| Client Accounting String | VARCHAR(255)             | The value of the CURRENT CLIENT_ ACCTNG special register at the time the audit event occurred:                                                                 |

Table 49. Audit Record Layout for VALIDATE Events   (continued)

| NAME                  | FORMAT        | DESCRIPTION                                                                              |
|-----------------------|---------------|------------------------------------------------------------------------------------------|
| Trusted Context Name  | VARCHAR(255)  | The name of the trusted context associated with the trusted connection.                  |
| Connection Trust Type | CHAR(1)       | Possible values are: NONE 1 IMPLICIT_TRUSTED_CONNECTION '2' EXPLICIT_TRUSTED_CONNECTION  |
| Role Inherited        | VARCHAR(128)  | The name of the role inherited through the trusted context:                              |
| Original User ID      | VARCHAR(1024) | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_ |

## Audit record layout for CONTEXT events

The following table shows the audit record layout for CONTEXT events.

Sample audit record:

timestamp-1998-06-24-08. 42.41.476840; category-CONTEXT; audit event-EXECUTE\_IMMEDIATE; event correlator=3; database-FOO; userid-boss; authid-BOSS; appl ication id-*LOCAL.newton. 980624124210; appl ication name-tes package schema-NULLID; package name-SQLC28Al; package section-203; text-create table audit(cl char(10) , c2 integer) ; tapp;

Table 50. Audit Record Layout for CONTEXT Events

| NAME             | FORMAT        | DESCRIPTION                                                                                                                                   |
|------------------|---------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp        | CHAR(26)      | Date and time of the audit event_                                                                                                             |
| Category         | CHAR(8)       | Category of audit event: Possible values are: CONTEXT                                                                                         |
| Audit Event      | VARCHAR(32)   | Specific Audit Event: For list of possible values, refer to the section for the CONTEXT category in Audit events on page 354.                 |
| Event Correlator | INTEGER       | Correlation identifier for the operation audited. Can be used to identify what audit records are associated with single event: being          |
| Database Name    | CHAR(8)       | Name of the database for which the event was generated Blank if this was an instance level audit event_                                       |
| User ID          | VARCHAR(1024) | User ID at time of audit event_ When the audit event is SWITCH_USER, this field represents the user ID that is switched to:                   |
| Authorization ID | VARCHAR(128)  | Authorization ID at time of audit event: When the audit event is SWITCH_USER, this field represents the authorization ID that is switched to_ |

Table 50. Audit Record Layout for CONTEXT Events  (continued)

| NAME                     | FORMAT                   | DESCRIPTION                                                                                                                                |
|--------------------------|--------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
| Origin Node Number       | SMALLINT                 | Member number at which the audit event occurred_                                                                                           |
| Coordinator Node Number  | SMALLINT                 | Member number of the coordinator member:                                                                                                   |
| Application ID           | VARCHAR(255)             | Application ID in use at the time the audit event occurred:                                                                                |
| Application Name         | VARCHAR(1024)            | Application name in use at the time the audit event occurred_                                                                              |
| Package Schema           | VARCHAR(128)             | Schema of the package in use at the time of the audit event_                                                                               |
| Package Name             | VARCHAR(128)             | Name of package in use at the time the audit event occurred:                                                                               |
| Package Section Number   | SMALLINT                 | Section number in package at the time the audit event occurred being used                                                                  |
| Statement Text           | CLOB(8M)                 | Text of the SQL or XQuery statement, if applicable. Null if no SQL or XQuery statement text is available                                   |
| Package Version          | VARCHAR(64)              | Version of the package in use at the time the audit event occurred                                                                         |
| Local Transaction ID     | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred_ This is the SQLU_TID structure that is part of the transaction logs: |
| Global Transaction ID    | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event of the transaction logs. part                                                 |
| Client User ID           | VARCHAR(255)             | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred_                                              |
| Client Workstation Name  | VARCHAR(255)             | The value of the CURRENT CLIENT_WRKSTNNAME special register at the time the audit event occurred.                                          |
| Client Application Name  | VARCHAR(255)             | at the time the audit event occurred_                                                                                                      |
| Client Accounting String | VARCHAR(255)             | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred:                                              |
| Trusted Context Name     | VARCHAR(255)             | The name of the trusted context associated with the trusted connection-                                                                    |
| Connection Trust Type    | CHAR(1)                  | Possible values are: NONE '1' IMPLICIT_TRUSTED_CONNECTION '2' EXPLICIT_TRUSTED_CONNECTION                                                  |
| Role Inherited           | VARCHAR(128)             | The role inherited through a trusted connection.                                                                                           |
| Original User ID         | VARCHAR(1024)            | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred_                                                   |

## Audit record layout for EXECUTE events

The following table describes all of the fields that are audited as part of the EXECUTE category

Sample audit record:

Note: Unlike other audit categories, the EXECUTE category when the audit is viewed in table format; can show multiple rows describing one event: The first record describes the main event, and its event column contains the word STATEMENT: The remaining rows describe the parameter markers or host variables, one row per parameter; and their event column contains the word log key key

DATA. When the audit is viewed in report format, there is one record, but it has multiple entries for the Statement Value: The DATA word is only be present in table format: log key times

```
tamp-2006-04-10-13.20.51.029203; category-EXECUTE; audit event-STATEMENT; event correlator=l; event status-0; database-SAMPLE; userid-smith; authid-SMITH; session authid-SMITH; appl ication id-*LOCAL.prodrig.060410172044; app] ication name-myapp; package schema-NULLID; package name-SQLCZFOA; package section-20l; uow id-2; activity id-3; statement invocation id-0; statement text-SELECT FROM  DEPARTMENT WHERE DEPTNO AND  DEPTNAME 2; statement isolation Ievel-CS; compilation environment= isolation Tevel-CS query optimization-5 degree-1 sqIrules-DBZ refresh age-+00000000000000 000000 schema=SMITH maintained table type-SYSTEM resolution timestamp-2006-04-10-13.20.51.000000 federated asynchrony-0; value index-0: value type-CHAR; value data-C0l; value index=l; value type-VARCHAR; value extended indicatorz-l; value index=INFORMATION CENTER; Iocal start time-2006-04-10-13.20.51.021507
```

| NAME             | FORMAT      | DESCRIPTION                                                                                                                          |
|------------------|-------------|--------------------------------------------------------------------------------------------------------------------------------------|
| Timestamp        | CHAR(26)    | Date and time of the audit event                                                                                                     |
| Category         | CHAR(8)     | Category of audit event: Possible values are: EXECUTE                                                                                |
| Audit Event      | VARCHAR(32) | Specific Audit Event: For list of possible values, refer to the section for the EXECUTE category in Audit events on page 354.        |
| Event Correlator | INTEGER     | Correlation identifier for the operation being audited. Can be used to identify what audit records are associated with single event: |

IMPLICIT\_TRUSTED\_CONNECTION

EXPLICIT\_TRUSTED\_CQNNECTION

| NAME                     | FORMAT        | DESCRIPTION                                                                                             |
|--------------------------|---------------|---------------------------------------------------------------------------------------------------------|
| Event Status             | INTEGER       | Status of audit event, represented by an SQLCODE where Successful event 0 Failed event < 0              |
| Database Name            | CHAR(8)       | Name of the database for which the event was generated. Blank if this was an instance level audit event |
| User ID                  | VARCHAR(1024) | User ID at time of audit event_                                                                         |
| Authorization ID         | VARCHAR(128)  | The Statement Authorization ID at time of audit event                                                   |
| Session Authorization ID | VARCHAR(128)  | The Session Authorization ID at the time of the audit event_                                            |
| Origin Node Number       | SMALLINT      | Member number at which the audit event occurred                                                         |
| Coordinator Node Number  | SMALLINT      | Member number of the coordinator member                                                                 |
| Application ID           | VARCHAR(255)  | Application ID in use at the time the audit event occurred_                                             |
| Application Name         | VARCHAR(1024) | Application name in use at the time the audit event occurred.                                           |
| Client User ID           | VARCHAR(255)  | The value of the CURRENT CLIENT USERID special register at the time the audit event occurred            |
| Client Accounting String | VARCHAR(255)  | The value of the CURRENT CLIENT_ACCTNG special register at the time the audit event occurred            |
| Client Workstation Name  | VARCHAR(255)  | The value of the CURRENT CLIENT_WRKSTNNAME register at the time the audit event occurred special        |
| Client Application Name  | VARCHAR(255)  | The value of the CURRENT CLIENT_APPLNAME special at the time the audit event occurred register          |
| Trusted Context Name     | VARCHAR(255)  | The name of the trusted context associated with the trusted connection.                                 |
| Connection Trust type    | CHAR(1)       | Possible values are: NONE 1' '2'                                                                        |
| Role Inherited           | VARCHAR(128)  | The role inherited through a trusted connection.                                                        |

Table 51. Audit Record Layout for EXECUTE Events   (continued)

| NAME                    | FORMAT                   | DESCRIPTION                                                                                                                                                                                            |
|-------------------------|--------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Package Schema          | VARCHAR(128)             | Schema of the package in use at the time of the audit event                                                                                                                                            |
| Package Name            | VARCHAR(128)             | Name of package in use at the time the audit event occurred:                                                                                                                                           |
| Package Section         | SMALLINT                 | Section number in package used at the time the audit event occurred_ being                                                                                                                             |
| Package Version         | VARCHAR(164)             | Version of the package in use at the time the audit event occurred_                                                                                                                                    |
| Local Transaction ID    | VARCHAR(1O) FOR BIT DATA | The local transaction ID in use at the time the audit event occurred. This is the SQLU_TID structure that is part of the transaction logs.                                                             |
| Global Transaction ID   | VARCHAR(30) FOR BIT DATA | The global transaction ID in use at the time the audit event occurred_ This is the data field in the SQLP_GXID structure that is part of the transaction logs                                          |
| UOW ID                  | BIGINT                   | The unit of work identifier in This value is unique within an application ID for each unit of work.                                                                                                    |
| Activity ID             | BIGINT                   | The unique activity ID within the unit of work:                                                                                                                                                        |
| Statement Invocation ID | BIGINT                   | An identifier that distinguishes one invocation of a routine from others at the same nesting level within a unit of work. It is unique within a unit of work for specific nesting level                |
| Statement Nesting Level | BIGINT                   | The level of nesting or recursion in effect when the statement was run; each level of corresponds to nested or recursive invocation of a stored procedure or user-defined function (UDF) being nesting |

Table 51. Audit Record Layout for EXECUTE Events (continued)

| NAME                                | FORMAT      ||
|-------------------------------------|-------------||
| Activity Type                       | VARCHAR(32) | The type of activity: Possible values are: READ_DML WRITE_DML DDL CALL OTHER                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| Statement Text                      | CLOB(8M)    | Text of the SQL or XQuery statement; if applicable.                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| Statement Isolation Level           | CHAR(8)     | The isolation value in effect for the statement while it was run_ Possible values are NONE (no isolation specified) UR (uncommitted read) CS (cursor stability) RS (read stability) RR (repeatable read) being                                                                                                                                                                                                                                                                                                          |
| Compilation Environment Description | BLOB(8K)    | The compilation environment used when compiling the SQL statement_ You can provide this element as input to the COMPILATION_ENV table function, or to the SET COMPILATION ENVIRONMENT SQL statement                                                                                                                                                                                                                                                                                                                     |
| Rows Modified                       | INTEGER     | Contains the total number of rows deleted, inserted, or updated as result of both: The enforcement of constraints after successful delete operation The processing of triggered SQL statements from activated inlined triggers If compound SQL is invoked, contains an accumulation of the number of such rows for all sub-statements_ In some cases, when an error is encountered, this field contains negative value that is an internal error This value is equivalent to the sqlerrd(5) field of the SQLCA: pointer |

Table 51. Audit Record Layout for EXECUTE Events   (continued)

| NAME                               | FORMAT     | DESCRIPTION                                                                                                                                                                                                                                                                                                           |
|------------------------------------|------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Rows Returned                      | BIGINT     | Contains the total number of rows returned by the statement                                                                                                                                                                                                                                                           |
| Savepoint ID                       | BIGINT     | The Savepoint ID in effect for the statement while it is run If the Audit Event is SAVEPOINT, RELEASE_SAVEPOINT or ROLLBACK_SAVEPOINT; then the Savepoint ID is the save that is set, released, or rolled back to_ being point being                                                                                  |
| Statement Value Index              | INTEGER    | The position of the input parameter marker or host variable used in the SQL statement_                                                                                                                                                                                                                                |
| Statement Value Type               | CHAR(16)   | A representation of the type of a data value associated with the SQL statement: INTEGER or CHAR are examples of possible values. string                                                                                                                                                                               |
| Statement Value Data               | CLOB(128K) | A representation of a data value to the SQL statement: LOB, LONG, XML, and structured type parameters are not present Date, time, and timestamp fields are recorded in ISO format: string                                                                                                                             |
| Statement Value Extended Indicator | INTEGER    | The value of the extended indicator specified for this statement value. The possible values are: 0 if the statement value was specified as assigned by the indicator value, -1 if NULL was specified by the indicator value, specified by the indicator value, -7 if UNASSIGNED was specified by the indicator value_ |

## Audit events

Table 51. Audit Record Layout for EXECUTE Events (continued)

| NAME             | FORMAT        | DESCRIPTION                                                                                                                                                                                                                                              |
|------------------|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Local Start Time | CHAR(26)      | The time that this activity began working on the partition: This field can be an empty when the activity does not require a package, that is, for CONNECT, CONNECT RESET, COMMIT, and ROLLBACK, as an example. The value is logged in local time_ string |
| Original User ID | VARCHAR(1024) | The value of the CLIENT_ORIGUSERID global variable at the time the audit event occurred:                                                                                                                                                                 |

each audit category, certain types of events can create audit records. For

## Events for the AUDIT category

- ALTER AUDIT\_POLICY
- ARCHIVE
- AUDIT\_REMOVE
- AUDIT\_REPLACE
- AUDIT\_USING
- CONFIGURE
- CREATE\_AUDIT\_POLICY
- DBZAUD
- DROP\_AUDIT\_POLICY
- EXTRACT
- FLUSH
- LIST\_LOGS
- PRUNE (not generated in Version 9.5, and later).
- START
- STOP
- UPDATE\_DBM\_CFG

## Events for the CHECKING category

- CHECKING\_FUNCTION
- CHECKING\_MEMBERSHIP\_IN\_ROLES
- CHECKING\_OBJECT
- CHECKING\_ TRANSFER

## Events for the CONTEXT category

- ADD\_NODE
- ATTACH

- BACKUP\_DB
- BIND
- CLOSE\_CONTAINER\_QUERY
- CLOSE\_CURSOR
- CLOSE\_HISTORY\_FILE
- CLOSE\_ TABLESPACE\_QUERY
- COMMIT
- CONNECT
- CONNECT\_RESET
- CREATE DATABASE
- DARI\_START
- DARI\_STOP
- DBM\_CFG\_OPERATION
- DESCRIBE
- DESCRIBE\_DATABASE
- DETACH
- DISCOVER
- DROP\_DATABASE
- ENABLE\_MULTIPAGE
- ESTIMATE\_SNAPSHOT\_SIZE
- EXECUTE
- EXECUTE\_IMMEDIATE
- EXTERNAL\_CANCEL
- FETCH\_CONTAINER\_QUERY
- FETCH\_CURSOR
- FETCH HISTORY\_FILE
- FETCH\_TABLESPACE
- FORCE\_APPLICATION
- GET\_DB\_CFG
- GET DFLT\_CFG
- GET\_SNAPSHOT
- GET\_TABLESPACE\_STATISTIC
- IMPLICIT\_REBIND
- LOAD\_MSG\_FILE
- LOAD\_TABLE
- OPEN\_CONTAINER\_QUERY
- OPEN\_CURSOR
- OPEN\_HISTORY\_FILE
- OPEN\_TABLESPACE\_QUERY
- PREPARE
- PRUNE\_RECOVERY\_HISTORY
- QUIESCE\_TABLESPACE
- READ\_ASYNC\_LOG\_RECORD
- REBIND
- REDISTRIBUTE

- REORG
- REQUEST\_ROLLBACK
- RESET\_DB\_CFG
- RESET\_MONITOR
- RESTORE\_DB
- ROLLBACK
- ROLLFORWARD\_DB
- RUNSTATS
- SET APPL\_PRIORITY
- SET\_MONITOR
- SET\_RUNTIME\_DEGREE
- SET\_TABLESPACE\_CONTAINERS
- SINGLE TABLESPACE\_QUERY
- SWITCH\_USER
- UNLOAD\_TABLE
- UNQUIESCE\_TABLESPACE
- UPDATE AUDIT
- UPDATE\_DBM\_CFG
- UPDATE\_RECOVERY\_HISTORY

## Events for the EXECUTE category

- COMMIT Execution of a COMMIT statement
- CONNECT Establishment of a database connection
- CONNECT RESET Termination of a database connection
- DATA A host variable or parameter marker data values for the statement This event is repeated for each host variable or parameter marker that is part of the statement: It is only present in a delimited extract of an audit log:
- GLOBAL COMMIT Execution of a COMMIT within global transaction
- GLOBAL ROLLBACK Execution of a ROLLBACK within a global transaction
- RELEASE SAVEPOINT Execution of a RELEASE SAVEPOINT statement
- ROLLBACK Execution of a ROLLBACK statement
- SAVEPOINT Execution of a SAVEPOINT statement
- STATEMENT Execution of an SQL statement
- SWITCH USER Switching of a user within trusted connection

## Events for the OBJMAINT category

- ALTER\_OBJECT (generated when altering protected tables and when altering modules)
- CREATE\_OBJECT
- DROP\_OBJECT
- RENAME\_OBJECT

## Events for the SECMAINT category

- ADD\_DEFAULT\_ROLE
- ADD\_USER
- ALTER\_DEFAULT\_ROLE

- ALTER\_OBJECT
- ALTER SECURITY POLICY
- ALTER\_USER ADD\_ROLE
- ALTER\_USER\_AUTHENTICATION
- ALTER USER\_DROP\_ROLE
- CREATE\_OBJECT
- DROP\_DEFAULT\_ROLE
- DROP\_OBJECT
- DROP\_USER
- GRANT
- IMPLICIT\_GRANT
- IMPLICIT\_REVOKE
- RENAME\_OBJECT
- REVOKE
- SET\_SESSION\_USER
- TRANSFER\_OWNERSHIP
- UPDATE\_DBM\_CFG

## Events for the SYSADMIN category

- ACTIVATE\_DB
- ADD\_NODE
- ALTER\_BUFFERPOOL
- ALTER\_DATABASE
- ALTER\_NODEGROUP
- ALTER\_TABLESPACE
- ATTACH\_DEBUGGER
- BACKUP\_DB
- CATALOG DB
- CATALOG\_DCS\_DB
- CATALOG\_NODE
- CHANGE\_DB\_COMMENT
- CLOSE\_CONTAINER\_QUERY
- CLOSE TABLESPACE\_QUERY
- COMMIT\_DSF\_CFS
- COMMIT\_DSF\_CM
- COMMIT\_DSF\_INSTANCE
- CREATE\_BUFFERPOOL
- CREATE\_DATABASE
- CREATE\_DB\_AT\_NODE
- CREATE\_EVENT\_MONITOR
- CREATE\_INSTANCE
- CREATE\_NODEGROUP
- CREATE\_TABLESPACE
- DBZAUD
- DBZAUDIT

- DBZREMOT
- DBZSET
- DBZTRC
- DEACTIVATE\_DB
- DELETE\_INSTANCE
- DESCRIBE\_DATABASE
- DROP\_BUFFERPOOL
- DROP DATABASE
- DROP\_EVENT\_MONITOR
- DROP\_NODEGROUP
- DROP\_NODE\_VERIFY
- DROP\_TABLESPACE
- ENABLE\_MULTIPAGE
- ESTIMATE\_SNAPSHOT\_SIZE
- FETCH\_CONTAINER\_QUERY
- FETCH\_TABLESPACE
- FORCE\_APPLICATION
- GET\_SNAPSHOT
- GET\_TABLESPACE\_STATISTIC
- GRANT\_DBADM (V97:no longer generated)
- GRANT\_DB\_AUTH (V97:no longer generated)
- KILLDBM
- LIST\_DRDA INDOUBT\_TRANSACTIONS
- LOAD\_TABLE
- MAINTENANCE\_DSF\_MODE
- MERGE\_DBM\_CONFIG\_FILE
- MIGRATE\_DB
- MIGRATE\_DB\_DIR
- MIGRATE\_SYSTEM\_DIRECTORY
- OPEN\_CONTAINER\_QUERY
- OPEN\_TABLESPACE\_QUERY
- PRUNE\_RECOVERY\_HISTORY
- QUIESCE\_ TABLESPACE
- READ\_ASYNC\_LOG\_RECORD
- REDISTRIBUTE\_NODEGROUP
- RENAME\_TABLESPACE
- RESET ADMIN\_CFG
- RESET\_DBM\_CFG
- RESET\_DB\_CFG
- RESET\_MONITOR
- RESTORE\_ DB
- REVOKE\_DBADM (V97:no longer generated)
- REVOKE\_DB\_AUTH (V97:no longer generated)
- ROLLFORWARD\_DB
- SET\_APPL\_PRIORITY

- SET\_EVENT\_MONITOR\_STATE
- SET\_RUNTIME\_DEGREE
- SET\_TABLESPACE\_CONTAINERS
- SINGLE\_TABLESPACE\_QUERY
- START\_CF
- STOP\_CF
- START\_DB2
- STOP\_DB2
- START\_DSF\_INSTANCE
- STOP\_DSF\_INSTANCE
- UNCATALOG\_DB
- UNCATALOG\_DCS\_DB
- UNCATALOG\_NODE
- UNLOAD\_TABLE
- UPDATE\_ADMIN\_CFG
- UPDATE\_CLI\_CONFIGURATION
- UPDATE\_DSF\_MEMBER\_OR\_CF
- UPDATE\_DB\_VERSION
- UPDATE\_DBM\_CFG
- UPDATE\_DB\_CFG
- SET\_MONITOR
- UPDATE\_RECOVERY\_HISTORY

## Events for the VALIDATE category

- AUTHENTICATE
- CHECK\_GROUP\_MEMBERSHIP (not generated in Version 9.5, and later)
- GET\_USERMAPPING\_FROM\_PLUGIN
- GET\_GROUPS (not generated in Version 9.5, and later)
- GET\_USERID (not generated in Version 9.5, and later)

## Chapter 12. Working with operating system security

Operating systems provide security features that you can use to support security for your database installation:

## Db2 and Windows security

Windows domain is an arrangement of client and server computers referenced by a specific and unique name; and, that share a single user accounts database called the Security Access Manager (SAM): One of the computers in the domain is the domain controller: The domain controller manages all aspects of user-domain interactions:

The domain controller uses the information in the domain user accounts database to authenticate users logging onto domain accounts\_ For each domain, one domain controller is the primary domain controller (PDC): Within the domain, there may also be backup domain controllers (BDC) which authenticate user accounts when there is no primary domain controller or the primary domain controller is not available: Backup domain controllers hold a copy of the Windows Security Account Manager (SAM) database which is regularly synchronized against the master copy on the PDC:

User accounts, user IDs, and passwords only need to be defined at the primary domain controller to be able to access domain resources.

Note: Two-part user IDs are supported by the CONNECT statement and the ATTACH command\_ The qualifier of the SAM-compatible user ID is a name of the style 'Domain User' which has a maximum length of 15 characters.

During the setup procedure when a Windows server is installed, you may select to create:

- A primary domain controller in a new domain
- backup domain controller in known domain
- A stand-alone server in a known domain.

Selecting controller in a new domain makes that server the primary domain controller

The user may on to the local machine, or when the machine is installed in a Windows Domain, the user may on to the Domain. To authenticate the user; Db2 checks the local machine first, then the Domain Controller for the current Domain, and finally any Trusted Domains known to the Domain Controller: log log\_

To illustrate how this works, suppose that the Db2 instance requires Server authentication: The configuration is as follows:

Figure 7. Authentication Using Windows Domains

<!-- image -->

Each machine has a security database, Security Access Management (SAM): DC1 is the domain controller; in which the client machine, Ivan, and the Db2 server; Servr; member of TDC2's domain\_

## Authentication scenarios

## A scenario with server authentication (Windows)

- 1. Abdul on to the TDC2 domain (that is, he is known in the TDC2 SAM database). logs

The following example demonstrates authentication of a user by server

- 2. Abdul then connects to a Db2 database that is cataloged to reside on SRV3: dbz connect to remotedb user Abdul using fredpw
- 3. SRV3 determines where Abdul is known: The API that is used to find this information first searches the local machine (SRV3) and then the domain controller (DC1) before trying any trusted domains. Username Abdul is found on TDC2. This search order requires a single namespace for users and groups.
- 4 SRV3 then:
- a\_ Validates the username and password with TDCZ.
- C\_ Enumerates all Abduls groups by asking TDC2.
- b Finds out whether Abdul is an administrator by TDC2 asking

## A scenario with client authentication and a Windows client machine

The following example demonstrates authentication of a user by a client computer:

- 1. Dale, the administrator; on to SRV3 and changes the authentication for the database instance to Client: logs

db2 update dbm cfg USing authentication client dbzstop db2start

- 2 Ivan, at a Windows client machine, on to the DCI domain (that is, he is known in the DC1 SAM database). logs
- 3\_ Ivan then connects to Db2 database that is cataloged to reside on SRV3: DBZ   CONNECT to remotedb user Ivan using johnpw
- 4\_ Ivan's machine validates the username and password. The API used to find this information first searches the local machine (Ivan) and then the domain controller (DC1) before trying any trusted domains. Username Ivan is found on DC1.
- 5. Ivan's machine then validates the username and
- 6\_ SRV3 then:
- a Determines where Ivan is known:
- b\_ Finds out whether Ivan is an administrator by asking DCI.
- C Enumerates all Ivan's groups by asking DCI.

Note: Before attempting to connect to the Db2 database, ensure that Db2 Security Service has been started. The Security Service is installed as of the Windows installation. Db2 is then installed and "registered" as Windows service however; it is not started automatically To start the Db2 Security Service, enter the NET START DBZNTSECSERVER command: part

## Support for global groups (Windows)

The Db2 database system supports global groups

To use global groups, you must include global groups inside a local group. When the Db2 database manager enumerates all the groups that a person is member of, it also lists the local groups that the user is member of indirectly (by the virtue of being in a global group that is itself a member of one or more local groups).

Global groups are in possible situations: used two

- Included inside a local group. Permission must be granted to this local group.
- Included on a domain controller: Permission must be granted to the global group.

## User authentication and group information with DB2 on Windows

## User name and group name restrictions (Windows)

- User names under Windows are not case sensitive; however; passwords are case sensitive:

There are few limitations that are specific to the Windows environment Be aware that general Db2 object naming rules also apply

- User names and group names can be a combination of upper- and lowercase characters. However; are usually converted to uppercase when used within the Db2 database. For example, if you connect to the database and create the database: (If you want to use lowercase object names, issue commands from the command line processor; enclosing the object names in quotation marks, Or use third-party ODBC front-end tools: they
- The Db2 database manager supports a single namespace: That is, when running in trusted domains environment, you should not have a user account of the same name that exists in multiple domains, or that exists in the local SAM of the server machine and in another domain:

- user name should not be the same name as a group name\_
- local group should not have the same name as domain level group.

## Groups and user authentication on Windows

Users are defined on Windows by creating user accounts using the Windows administration tool called the "User Manager' An account containing other accounts, also called members, is a group.

Groups give Windows administrators the ability to grant rights and permissions to the users within the group at the same time, without to maintain each user individually: Groups, like user accounts, are defined and maintained in the Security Access Manager (SAM) database: having

There are two types of groups:

- Local groups. A local group can include user accounts created in the local accounts database: If the local group is on machine that is part of a domain, the local group can also contain domain accounts and groups from the Windows domain. If the local group is created on workstation, it is specific to that workstation.
- Global groups. A global group exists only on domain controller and contains user accounts from the domain's SAM database: That is, a global group can only contain user accounts from the domain on which it is created; it cannot contain any other groups as members. A global group can be used in servers and workstations of its own domain, and in trusting domains.

## Trust relationships between domains on Windows

Trust relationships are an administration and communication link between domains. A trust relationship between two domains enables user accounts and global groups to be used in a domain other than the domain where the accounts are defined: two

Account information is shared to validate the rights and permissions of user accounts and global groups residing in the trusted domain without authenticated: Trust relationships simplify user administration by combining two or more domains into an single administrative unit: being

There are two domains in a trust relationship:

- The trusting domain. This domain trusts another domain to authenticate users for them:
- The trusted domain. This domain authenticates users on behalf of (in trust for) another domain:

Trust relationships are not transitive: This means that explicit trust relationships need to be established in each direction between domains. For example, the trusting domain may not necessarily be a trusted domain:

## Authentication with groups and domain security (Windows)

The Db2 database system allows you to specify either a local group or a global group when granting privileges or defining authority levels.

## About this task

user is determined to be a member of a group if the user's account is defined explicitly in the local or global group, or implicitly by a member of a global group defined to be a member of a local group. being

The Db2 database manager supports the following types of groups:

- Local groups
- Global groups
- Global groups as members of local groups.

The Db2 database manager enumerates the local and global groups of which the user is a member; using the security database where the user was found. The Db2 database system provides an override that forces group enumeration to occur on the local Windows server where the Db2 database is installed, regardless of where the user account was found. This override can be achieved using the following commands:

- For global settings:

dbzset ~g DBZ\_GRP\_LOOKUP=Iocal

- For instance

instance name

- settings: dbzset

After issuing this command, you must and start the Db2 database instance for the change to take effect: Then create local groups and include domain accounts or global groups in the local group. stop

To view all Db2 profile registry variables that are set, type dbzset

If the DB2GRP LOOKUP registry variable is set to local, then the Db2 database manager tries to enumerate the user's groups on the local machine only: If the user is not defined as member of a local group, or of a global group nested in a local group, then group enumeration fails. The Db2 database manager does not try to enumerate the user's groups on another machine in the domain or on the domain controllers. profile

If the Db2 database manager is running on a machine that is a primary or backup domain controller in the resource domain, it is able to locate any domain controller in any trusted domain. This occurs because the names of the domains of backup domain controllers in trusted domains are only known if you are domain

## Using an access token to acquire users' group information (Windows)

An access token is an object that describes the security context of a process Or thread. The information in an access token includes the identity and privileges of the user account associated with the process or thread.

When you on, the system verifies your password by comparing it with information stored in a security database. If the password is authenticated, the system produces an access token: Every process run on your behalf uses copy of this access token: log

An access token can also be acquired based on cached credentials. After you have been authenticated to the system, your credentials are cached by the operating system. The access token of the last logon can be referenced in the cache when it is not possible to contact the domain controller

The access token includes information about all of the groups you belong to: local groups and various domain groups (global groups, domain local groups, and universal groups).

Note: Group client authentication is not supported a remote connection even though access token support is enabled: lookup using using

To enable access token support, you must use the dbzset command to the DBZ\_GRP\_LOOKUP registry variable: DBZ\_GRP\_LOOKUP can have up to two parameters, separated by a comma: update

- The first parameter is for conventional group and can take the values: "LOCAL", or "DOMAIN". lookup
- The second parameter is for token style group lookup and can take the values: "TOKEN' "TOKENDOMAIN", or "TOKENLOCAL'

If the second parameter (TOKEN, TOKENDOMAIN, or TOKENLOCAL) is specified, it takes precedence over conventional group enumeration. If token group enumeration fails, conventional group lookup occurs, if the first parameter of DB2\_GRP\_LOOKUP was specified.

The meaning of the values TOKEN, TOKENDOMAIN, and TOKENLOCAL are as follows:

- TOKENLOCAL
- The token is used to enumerate groups at the local machine (this is equivalent to conventional "LOCAL' group lookup).
- TOKENDOMAIN

The token is used to enumerate groups at the location where the user is defined (at local machine for a local user and at the domain for a domain user) This is equivalent to conventional or "DOMAIN" group lookup:

- TOKEN

The token is used to enumerate groups at both the domain and on the local machine: For a local user; the groups returned will contain local groups. For a domain user; the groups returned will contain both domain and local groups. There is no equivalent in conventional group lookup:

For example, the following of DBZ\_GRP\_LOOKUP enables access token support for enumerating local groups: setting dbzset DBZ\_GRP\_LOOKUP-LOCAL, TOKENLOCAL

The next example enables access token support for enumerating groups at both the defined at the domain):

dbzset DBZ\_GRP\_LOOKUP= , TOKEN

This final example enables access token support for enumerating domain groups at the location where the user ID is defined:

dbzset DBZGRP\_LOOKUP=DOMAIN, TOKENDOMAIN

Note: Access token support can be enabled with all authentications types except CLIENT authentication:

## The DB2\_GRP LOOKUP environment variable and Db2 group enumeration (Windows)

On Windows, a user can belong to groups defined at the domain level, groups defined on the local machine, or to both:

The DBZ\_GRP LOOKUP environment variable controls whether groups are enumerated on the local machine, or where the users are defined (on the local machine if are local user, or at the domain level if are domain user): Therefore, when they they

the security administrator grants authorities and privileges, care must be taken that DBZ  GRP LOOKUP is set as intended and the correct users receive the intended authorization.

If the DBZ\_GRP\_LOOKUP profile registry variable is not set:

- 1. The Db2 database system first tries to find the user on the same machine.
- 2 If the user name is defined locally, the user is authenticated locally:
- 3\_ If the user is not found locally, the Db2 database system attempts to find the user name on it's domain, and then on trusted domains.

For example, consider the following situation where DBZ\_GRP\_LOOKUP is not set:

- 1 The domain user DUSERI is a member of the local group, GROUP1.
- 2. The security administrator (who holds SECADM authority) grants DBADM authority to group GROUPI.
- GRANT  DBADM ON database TO GROUP GROUP1
- 3\_ Because DBZ\_GRP\_LOOKUP is not set, groups are enumerated where users are defined. So, groups for DUSERI are enumerated at the domain level. Since DUSERI does not to group GROUPI at the domain level, DUSERI does not receive DBADM authority belong

Further; consider this more complex scenario involving the UPGRADE DATABASE command where DB2\_GRP\_LOOKUP is not set:

- 1\_ The domain user DUSER2 is a member of the local Administrators group.
- 2 The sysadm\_group configuration parameter is not set, therefore members of the local Administrators group automatically hold SYSADM authority:
- 3\_ User DUSER2 is able to issue the UPGRADE DATABASE command (since DUSER2Z holds SYSADM authority). The UPGRADE DATABASE command grants DBADM authority on the database upgraded to the SYSADM group, in this case, the Administrators group. being
- 4\_ Because DBZ\_GRP\_LOOKUP is not set, groups are enumerated where users are defined. So, groups for DUSER2 are enumerated at the domain level. Since DUSER2 does not to the Administrators group at the domain level, DUSER2 does not receive DBADM authority belong

Possible solutions for this scenario are to make one of the following changes:

- Set DB2\_GRP\_LOOKUP Ioca]
- Add the users that should have DBADM authority to the Administrators or GROUPI group at the Domain Controller:

You can use the SYSPROCAUTH\_LIST\_ AUTHORITIES\_FOR AUTHID table function to verify the authorities held by a user; as shown in the following example for DUSERI:

SELECT AUTHORITY\_ DUSER, D PUBLIC ROLEGROUP , ROLE\_PUBLIC, D ROLE FROM TABLE (SYSPROC.AUTH\_LIST\_AUTHORITIES\_FOR\_AUTHID ( 'DUSERI " U' ) ) AS ORDER BY AUTHORITY

You can use the SYSPROCAUTH\_LIST\_GROUPS\_FOR\_AUTHID table function to verify the groups to which the Db2 database manager has determined user belongs, as shown in the following example for DUSERI:

SELECT AS

Note: If you use the same group name at both the domain level and on the local machine, because the Db2 database manager does not fully qualify the groups, this can lead to confusion:

## Authentication using an ordered domain list

User IDs may be defined more than once in trusted domain forest: A trusted domain forest is a collection of domains that are interrelated through network

## About this task

It is possible for a user on one domain to have the same user ID as that for another user on different domain. This may cause difficulties when attempting to do any of the following actions:

- Group lookup for the purposes of granting and revoking privileges based on groups
- Authenticating multiple users having the same user ID but on different domains
- Validation of passwords.
- Control of network traffic

To prevent difficulties from the possibility of multiple users with the same user ID across domain forest, you should use an ordered domain list as defined the db2set and the registry variable DBZDOMAINLIST. When the order; the domains to be included in the list are separated by a comma You must make a conscious decision regarding the order that the domains are searched when authenticating users. arising using setting

Those user IDs that are present on domains further down the domain list will have to be renamed by you if are to be authenticated for access: they

Control of access can be done through the domain list: For example, if the domain of a user is not in the list, the user will not be allowed to connect:

Note: The DBZDOMAINLIST registry variable is effective only when CLIENT authentication is set in the database manager configuration and is needed if a single signon from Windows desktop is required in Windows domain environment; DBZDOMAINLIST is supported by some versions of Db2 servers however DBZDOMAINLIST will not be enforced if neither the client nor the server are in Windows environment\_

## Domain security support (Windows)

The following example illustrates how the Db2 database management system can support Windows domain security: The connection works because the user name and local group are on the same domain:

The connection works in the following scenario because the user name and local or global group are the same domain: on

Note that the user name and local or global group do not need to be defined on the domain where the database server is running, but must be on the same domain as each other they

Table 52. Successful Connection Using a Domain Controller

| Domainl                                                                                                                                                    | Domain2                                                                                                                                               |
|------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| trust relationship exists with Domain2.                                                                                                                    | A trust relationship exists with Domainl. The local or global group grp2 is defined. The user name id2 is defined: The user name id2 is of grpz: part |
| The Db2 server runs in this domain. The following Db2 commands are issued from it: REVOKE CONNECT ON db FROM pub]ic GRANT   CONNECT CONNECT To db USER idz |                                                                                                                                                       |
| The local or global domain is scanned but id2 is not found: Domain security is scanned.                                                                    |                                                                                                                                                       |
|                                                                                                                                                            | The user name id2 is found on this domain: Db2 gets additional information about this user name (that is, it is part of the group grp2).              |
| The connection works because the user name and local or global group are on the same domain.                                                               |                                                                                                                                                       |

## Defining which users hold SYSADM authority (Windows

Certain users have SYSADM authority if the sysadm\_group database manager configuration parameter is not set (that is, it is NULL)

These users are:

- Members of the local Administrators group
- Members of the Administrators group at the Domain Controller; if the Db2 database manager is configured to enumerate groups for users at the location where the users are defined (you can use the DB2\_GRP\_LOOKUP environment variable to configure group enumeration)
- Members of the DBZADMNS group, if Windows extended security is enabled: The location of the DBZADMNS group is decided during installation.
- The LocalSystem account

There are cases where the previously mentioned default behavior is not desirable: You can use the sysadm\_group database manager configuration parameter to override this behavior by one of the following methods: using

- Create a local group on the Db2 server machine and add to it users (domain users or local users that want to have SYSADM database manager should be configured to enumerate groups for the user on the local machine. you
- Create a domain group and add to it the users that you want to have SYSADM authority The Db2 database manager should be configured to enumerate groups for users at the location where the users are defined:

Then the sysadm\_group database manager configuration parameter to this group, the following commands: update using name DBZSTOP DBZSTART

## Windows LocalSystem account support

On Windows platforms, the Db2 database system supports applications running under the context of the LocalSystem account (LSA) with local implicit connection. The authorization ID for the LocalSystem account is SYSTEM.

If you are non-English version of a Windows operating system, you need to check that the authorization ID for the LocalSystem account does not have an invalid character: For example, if you are using a French version of a Windows operating system, the LocalSystem account is Systeme, but you cannot use this account as an authorization ID because it has an invalid character; e using

The LocalSystem account is considered a system administrator (holding SYSADM authority) when the sysadm\_group database manager configuration parameter is set to NULL

If there is a need for applications running under the context of the LocalSystem account to perform database actions that are not within the scope of SYSADM, you must grant the LocalSystem account the required database privileges or authorities For example, if an application requires database administrator capabilities, grant the LocalSystem account DBADM authority the GRANT (Database Authorities) statement. using

Developers writing applications to be run under this account need to be aware that the Db2 database system has restrictions on objects with schema names starting with "SYS" Therefore if your applications contain DDL statements that create Db2 database objects, should be written such that: they

- For dynamic queries, the objects to be created should be explicitly qualified with schema name supported by the Db2 database manager; or the CURRENT SCHEMA register must be set to a schema name supported by the Db2 database manager
- For static queries, should be bound with value for the QUALIFIER options other than the default one (SYSTEM) they

Group information for the LocalSystem account is gathered at the first group lookup request after the Db2 database instance is started and is not refreshed until the instance is restarted:

## Extended Windows security using the DBZADMNS and DBZUSERS groups

Extended security is enabled by default in all Db2 database products on Windows operating systems except IBM Data Server Runtime Client and Db2 Drivers. IBM Data Server Runtime Client and Db2 Drivers do not support extended security on Windows platforms

An Enable operating system security check box appears on the Enable operating system security for Db2 objects panel when you install Db2 database products Unless you disable this option, the installer creates new groups, DBZADMNS and DBZUSERS. DBZADMNS is the Db2 Administrators Group and DBZUSERS is the Db2 Users Group. DBZADMNS and DBZUSERS are the default group names; optionally, can specify different names for these groups at installation time (if you select silent installation, you can change these names within the installation response file) If you choose to use groups that exist on your system, be aware that the privileges of these groups are modified: are given the privileges, as required, listed in the table, below: two you They

It is important to understand that these groups are used for protection at the operating-system level and are in no way associated with Db2 authority levels: However; the Db2 Administrators Group (ex DBZADMNS) is used as the default group for SYSADM, SYSMAINT, and SYSCTRL when no values are specified for database manager configuration parameters SYSADM\_GROUP; SYSMAINT\_GROUP and SYSCTRL\_GROUP It is recommended that if you are specifying SYSADM group, then that group should be the Db2 Administrators Group. This can be established after installation, by an administrator: setting

Note: You can specify your Db2 Administrators Group (DBZADMNS or the name you chose during installation) and Db2 Users Group (DBZUSERS or the name you chose during installation) either as local groups or as domain groups. Both groups must be of the same type, so either both local or both domain.

If you change the computer name, and the computer groups DBZADMNS and DBZUSERS are local computer groups, you must the DB2 ADMINGROUP and DB2\_USERSGROUP global registries. To the registry variables after renaming and restarting the computer run the following command: update update

- 1\_ Open a command prompt
- 2. Run the dbzextsec command to security settings: dbzextsec new computer name | DBZADMNS new computer name | DBZUSERS update

Note: If extended security is enabled in Db2 database products on Windows 7, only users that to the DBZADMNS group can run the graphical Db2 administration tools. In addition, members of the DBZADMNS group need to launch the tools with full administrator privileges This is accomplished by right-clicking on the shortcut and then choosing 'Run as administrator' belong

## Abilities acquired through the DBZADMNS and DBZUSERS groups

The DBZADMNS and DBZUSERS groups provide members with the following abilities:

- DBZADMNS
- Full control over all Db2 objects (see the following list of protected objects)
- DBZUSERS

Read and Execute access for all Db2 objects located in the installation and instance directories, but no access to objects under the database system directory and limited access to IPC resources

For certain objects, there may be additional privileges available, as required (for example, write privileges, add or file privileges, and so on): Members of this group have no access to objects under the database system directory: update

Note: The meaning of Execute access depends on the object; for example, for a dll or .exe file having Execute access means you have authority to execute the file, however; for a directory it means you have authority to traverse the directory

Ideally, all Db2 administrators should be members of the DBZADMNS group (as well as members of the local Administrators group), but this is not a strict requirement: Everyone else who requires access to the Db2 database system must be a member of the DBZUSERS group. To add user to one of these groups: being

- 1\_ Launch the Users and Passwords Manager tool.
- 2. Select the user name to add from the list:

- 3. Click Properties. In the Properties window, click the Group membership tab.
- 4 Select the Other radio button.
- 5. Select the appropriate group from the drop-down list:

## Adding extended security after installation (dbzextsec command)

If the Db2 database system was installed without extended security enabled, you can enable it by executing the command dbzextsec To execute the dbzextsec command you must be a member of the local Administrators group so that you have the authority to modify the ACL of the protected objects.

You can run the dbzextsec command multiple times, if necessary however; if this is done, you cannot disable extended security unless you issue the dbzextsec -r command immediately after execution of dbzextsec each

## Removing extended security

## CAUTION:

Do not remove extended security after it has been enabled unless absolutely necessary:

You can remove extended however; this will only succeed if no other database operations (such as creating a database, creating a new instance, adding table spaces, and s0 on) have been performed after enabling extended security: The safest way to remove the extended security is to uninstall the Db2 database system, delete all the relevant Dbz directories (including the database directories) and then reinstall the Db2 database system without extended security enabled. option

## Protected objects

The static objects that can be protected using the DBZADMNS and DBZUSERS groups are:

- File system
- File
- Directory
- Services
- Registry keys

The dynamic objects that can be protected the DBZADMNS and DBZUSERS groups are: using

- IPC resources, including:
- Pipes
- Semaphores
- Events
- Shared memory

## Privileges owned by the DBZADMNS and DBZUSERS groups

The privileges assigned to the DBZADMNS and DBZUSERS groups are listed in the following table:

Table 53. Privileges for DBZADMNS and DBZUSERS groups

| Privilege                                                           | DBZADMNS   | DBZUSERS   | Reason                                                                                                                                                                                       |
|---------------------------------------------------------------------|------------|------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Create a token object (SeCreateTokenPrivilege)                      |            | N          | Token manipulation (required for certain token manipulation operations and used in authentication and authorization)                                                                         |
| Replace a process level token (SeAssignPrimaryTokenPrivilege)       |            | N          | Create process as another user                                                                                                                                                               |
| Increase quotas (SeIncreaseQuotaPrivilege)                          |            | N          | Create process as another user                                                                                                                                                               |
| Act as of the operating (SeTcbPrivilege) part system                | Y          | N          | LogonUser                                                                                                                                                                                    |
| Generate security audits (SeSecurityPrivilege)                      |            | N          | Manipulate audit and security log                                                                                                                                                            |
| Take ownership of files or other objects (SeTakeOwnershipPrivilege) |            | N          | Modify object ACLs                                                                                                                                                                           |
| Increase scheduling priority (SeIncreaseBasePriorityPrivilege)      |            | N          | Modify the process working set                                                                                                                                                               |
| Backup files and directories (SeBackupPrivilege)                    |            | N          | Profile/ Registry manipulation (required to perform certain user profile and registry manipulation routines: LoadUserProfile, RegSaveKey(Ex) , RegRestoreKey, RegReplaceKey, RegLoadKey(Ex)) |
| Restore files and directories (SeRestorePrivilege)                  |            |            | Profile/ Registry manipulation (required to perform certain user profile and registry manipulation routines: LoadUserProfile, RegSaveKey(Ex) , RegRestoreKey, RegReplaceKey, RegLoadKey(Ex)) |
| Debug programs (SeDebugPrivilege)                                   |            |            | Token manipulation (required for certain token manipulation operations and used in authentication and authorization)                                                                         |
| Manage auditing and security (SeAuditPrivilege) log                 |            | N          | Generate auditing entries log                                                                                                                                                                |
| on as service (SeServiceLogonRight) Log                             |            | N          | Run Db2 as service                                                                                                                                                                           |
| Access this computer from the network (SeNetworkLogonRight)         |            |            | Allow network credentials (allows the Db2 database manager to use the LOGON32_LOGON_NETWORK to authenticate, which has performance implications) option                                      |
| Impersonate client after authentication (SeImpersonatePrivilege)    |            | N          | Client impersonation (required for Windowsto allow use of certain APIs to impersonate Db2 clients: ImpersonateLoggedOnUser; ImpersonateSelf, RevertToSelf, and so on)                        |
| Lock pages in memory (SeLockMemoryPrivilege)                        |            | N          | Large Page support                                                                                                                                                                           |
| Create global objects (SeCreateGlobalPrivilege)                     |            |            | Terminal Server support (required on Windows)                                                                                                                                                |

## Considerations for Windows7: User Access Control feature

The User Access Control (UAC) feature of Windows 7 impacts the Db2 database system in the following ways:

## Starting applications with full administrative privileges

On Windows 7, by default, applications start with only standard user rights, even if the user is a local administrator To start an application with further privileges, you need to launch the command from a command window that is running with full administrative privileges. The Db2 installation process creates a shortcut called "Command window Administrator" specifically for Windows users. It is recommended that you launch this shortcut if you want to run administrative commands

If you do not have full administrative privileges and you attempt to perform Db2 administration tasks from a command prompt or graphical tool on Windows 7, you can encounter various error messages implying that your access is denied and the tasks will fail to complete successfully:

To determine whether the action are performing is considered to be an administration task, check whether any of the following are true: you

- It requires SYSADM, SYSCTRL or SYSMAINT authority
- It modifies registry keys under the HKLM branch in the registry
- It writes to the directories under the Program Files directory

example, the following actions are all considered to be administration tasks: For

- Starting and stopping Db2 instances
- Creating and dropping Db2 instances
- Creating databases
- Updating database manager configuration parameters or Db2 Administration Server (DAS) configuration parameters
- Updating CLI configuration parameters and configuring system data source names (DSN)
- Starting the Db2 trace facility
- Running the db2pd utility
- Changing Db2 registry variables profile

To resolve the problem, you must perform Db2 administration tasks from a command prompt or graphical tool that is running with full administrator privileges. To launch command prompt or graphical tool with full administrator privileges, right-click on the shortcut and then select Run as administrator:

Note: If extended security is enabled, you also need to be a member of the DBZADMNS group in order to launch the graphical administration tools (such as

## User data location

User data (for example, files under instance directories) is stored in ProgramData name\_ where copy\_name is the name of the Db2 copy (by default, DBZCOPYI is the name of the first copy installed): On Windows versions other than Windows 7, user data is stored in Documents and Settings |A1] Users |Application Data name \_ Icopy\_

## Db2 and UNIX security

There are some security considerations specific to UNIX platforms that you need to be aware of.

The Db2 database does not support root acting directly as database administrator You should use su &lt;instance Owner&gt; as the database administrator

For security reasons, in general, do not use the instance name as the Fenced ID However; if you are not planning to use fenced UDFs or stored procedures, you can set the Fenced ID to the instance name instead of creating another user ID.

The recommendation is to create a user ID that is recognized as being associated with this group. The user for fenced UDFs and stored procedures is specified as parameter of the instance creation script (dbzicrt &lt;FencedID&gt;). This is not required if you install the Db2 Clients or the Db2 Software Developers Kit:

## Db2 and Linux security

There are some security considerations to Linux platforms that you might need to be aware of: specific

## Change password support (Linux)

Db2 database products provide support for changing passwords on Linux operating systems.

This support is implemented through the use of security plug-in libraries called IBMOSchgpwdc] ient. so and IBMOSchgpwdserver.so\_

To enable password change support on Linux, set the database manager configuration parameter clnt\_pW\_plugin to IBMOSchgpwdc] ient and srvcon\_pW\_plugin to IBMOSchgpwdserver:

You must also create PAM configuration file called db2" in the /etc/pam.d directory:

## Deploying a change password plug-in (Linux)

To enable support for changing passwords in Db2 database products on Linux, you must configure the Db2 instance to use the security plug-ins IBMOSchgpwdclient and IBMOSchgpwdserver:

## Before you begin

The plug-in libraries are located in the following directories:

- INSTHOME /sq]lib/securityXX/plugin/IBM/server/IBMOSchgpwdserver.so

where INSTHOME is the home directory of the instance owner and securityXX is either security32 or security64, depending on the bit-width of the instance.

## Procedure

To deploy the security plug-ins in a Db2 instance, perform the following steps:

- 1 in as user with root authority Log

- 2 Create a PAM configuration file: /etc/pam.d/db2

Ensure that the file contains the appropriate set of rules, as defined by your system administrator: For example, on SLES 9 this can be used:

required pam\_unix2.so

auth

required pam\_unix2.So

nulok

account required

password required pam\_pwcheck. so nullok tries-l

nullok use\_authtok use first\_pass

session

And on RHEL, this can be used:

#SPAM-1.0

auth

required

Hib/security/SISA/pam\_env So

auth

sufficient /lib/security/SISA/pam\_unix.so Tikeauth nul ok

auth

required

account

required

account

sufficient /lib/security/SISA/pam\_succeed\_ uid 100 quiet

account

required

Hib/security/SISA/pam\_permit.so

password requisite

Hib/security/SISA/pam\_crack] ib.so retry-3 dcredit=-1

ucredit=-l

password

sufficient /lib/security/SISA/pam\_unix.so nul ok

use\_authtok md5

shadow remember=3

password required

Hib/security/SISA/pam\_deny.so

session required

Hib/security/SISA/pam\_ Timits.so

session required

- 3\_ Enable the security plug-ins in the Db2 instance:
- a Update the database manager configuration parameter SRVCON\_PW\_PLUGIN with the value IBMOSchgpwdserver:

db2 update dbm cfg using srvcon\_pW\_plugin IBMOSchgpwdserver

- b\_ Update the database manager configuration parameter CLNT\_ PW\_PLUGIN with the value IBMOSchgpwdc] ient:

CLNT\_PW\_PLUGIN IBMOSchgpwdc] ient

- C Ensure that either the database manager configuration parameter SRVCON AUTH is set to value of CLIENT, SERVER, SERVER ENCRYPT, DATA\_ENCRYPT, or DATA ENCRYPT CMP, or the database manager configuration parameter SRVCON\_AUTH is set to a value of NOT\_ SPECIFIED and AUTHENTICATION is set to a value of CLIENT, SERVER, SERVER\_ENCRYPT, DATA\_ENCRYPT, or DATA\_ENCRYPT\_CMP.

## Index

## Special characters

| Net Data Provider clients   |   Net Data Provider clients |
|-----------------------------|-----------------------------|
| GSKit                       |                          78 |
| SSL                         |                          78 |

NET

## A

| access control                                                                                                                                                                                         |
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| authentication                                                                                                                                                                                         |
| column-specific 183                                                                                                                                                                                    |
| DBADM (database administration) authority 60                                                                                                                                                           |
| fine-grained row and column See RCAC 161                                                                                                                                                               |
| label-based access control 183 rOW-specific 183                                                                                                                                                        |
| tables 58 views 58                                                                                                                                                                                     |
| access tokens                                                                                                                                                                                          |
| Windows 365                                                                                                                                                                                            |
| ACCESSCTRL (access control) authority details 37                                                                                                                                                       |
| overview 32 a master key to a local adding                                                                                                                                                             |
| keystore 100                                                                                                                                                                                           |
| AIX                                                                                                                                                                                                    |
| authentication methods 242                                                                                                                                                                             |
| configuring transparent LDAP 241 AIX encrypted file system (EFS) 93 already 114                                                                                                                        |
| ALTER privilege 43, 46                                                                                                                                                                                 |
| alternate_auth enc configuration                                                                                                                                                                       |
| parameter                                                                                                                                                                                              |
| encrypting using AES 256-bit                                                                                                                                                                           |
| algorithm                                                                                                                                                                                              |
| APIs                                                                                                                                                                                                   |
| communication exit library                                                                                                                                                                             |
| dbzcommexitDeregister 304 dbzcommexitFreeErrormsg 308 db2commexitInit 300 db2commexitRecv 305 dbzcommexitRegister 302 db2commexitSend 306 db2commexitTerm 302 db2commexitUserIdentity 307 overview 300 |
| 265                                                                                                                                                                                                    |
| group plug-in                                                                                                                                                                                          |
| dbzsecDoesGroupExist                                                                                                                                                                                   |
| db2secFreeErrormsg 266                                                                                                                                                                                 |
| db2secFreeGroupListMemory                                                                                                                                                                              |
| 266 267                                                                                                                                                                                                |
| db2secGetGroupsForUser                                                                                                                                                                                 |
| db2secGroupPluginInit 270                                                                                                                                                                              |
| 271                                                                                                                                                                                                    |
| db2secPluginTerm                                                                                                                                                                                       |
| 264                                                                                                                                                                                                    |
| db2secClientAuthPluginInit 277                                                                                                                                                                         |
| db2secClientAuthPluginTerm 278                                                                                                                                                                         |
| group retrieval plug-in                                                                                                                                                                                |
| security plug-in                                                                                                                                                                                       |

APIs (continued)

284

audit logs

285

| archiving 122, 128 file names 125 location 122                                                                                                                                                                                                                                                                                                                                                                                                                                    |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| API for checking whether authentication ID exists 279 API for cleaning up client authentication plug-in                                                                                                                                                                                                                                                                                                                                                                           |
| resources 278 API for cleaning up resources held by db2secGenerateInitialCred API 279 API for cleaning up server authentication plug-in resources 290 API for getting authentication IDs 282 API for initializing client authentication plug-in 277 API for initializing server authentication plug-in 287 API for validating passwords APIs for user ID/ password authentication plug-ins 271 deploying 235, 238, 375 LDAP 239 library locations 229 security 225 remote clients |
| 13 225                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| 290                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| 231                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| security plug-ins two-part user IDs types CLIENT                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| DATA ENCRYPT DATA ENCRYPT_CMP                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| GSSPLUGIN                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| KERBEROS                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| KRB_SERVER_ENCRYPT                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| SERVER                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| SERVER_ENCRYPT                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| AUTHID_ATTRIBUTE 245                                                                                                                                                                                                                                                                                                                                                                                                                                                              |

authorities

## 3

backup image

| centralized manager 107 , 112 key                                                   | 101, 104, 106,                              |
|-------------------------------------------------------------------------------------|---------------------------------------------|
| centralized keystore certificate authorities                                        | 101, 107                                    |
| updating 208 communication buffer exit library                                      | 115                                         |
| digital certificates check backup image is encrypted check if database is encrypted | 84 114                                      |
| CHECKING events 354 87                                                              |                                             |
| cipher suites                                                                       |                                             |
| client authentication plug-ins                                                      | 239                                         |
| CLIENT authentication type details                                                  |                                             |
| columns                                                                             |                                             |
| LBAC protection                                                                     |                                             |
| adding 201 removing 215 LBAC-protected                                              |                                             |
| dropping 212 inserting 206                                                          |                                             |
| reading 203                                                                         |                                             |
| developing                                                                          |                                             |
|                                                                                     | 311                                         |
|                                                                                     | 318                                         |
| control over connections DATA ENCRYPT authentication                                | 308 310                                     |
| functions structure information structure 295                                       |                                             |
| overview library                                                                    |                                             |
| communication exit APIs                                                             | 304                                         |
| dbzcommexitDeregister                                                               | 308 300                                     |
| db2commexitFreeErrormsg db2commexitInit db2commexitRecv                             | 305 302                                     |
| dbzcommexitRegister db2commexitSend db2commexitTerm                                 |                                             |
|                                                                                     | 306 302                                     |
| db2commexitUserIdentity deploying 295                                               | 307                                         |
| developing                                                                          |                                             |
| API calling                                                                         | sequences (connection sequences (no connect |
| concentrator) 316 API calling                                                       |                                             |
| reset) 315 API connect) 314 API calling                                             | sequences (normal                           |
| sequences (overview) 314 calling                                                    |                                             |
| API sequences (SET                                                                  | 317                                         |
| SESSION calling                                                                     |                                             |
| AUTHORIZATION) API sequences (trusted calling                                       |                                             |
| context) 316 API versions 311 buffer structure 311                                  |                                             |
| connect gateway                                                                     |                                             |
| error handling 312 overview 299                                                     | 318                                         |
| restrictions 312                                                                    |                                             |
| return codes                                                                        |                                             |
| enabling 297, 298 299                                                               |                                             |
| loading library                                                                     |                                             |
| location 296                                                                        |                                             |
| naming conventions                                                                  |                                             |
|                                                                                     | 296                                         |
|                                                                                     | 318                                         |
|                                                                                     | 312                                         |
|                                                                                     | target logical node                         |

|                                                                                                                                           | 114, 115, 116   |
|-------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
| backups encrypting 90 security risks BIND command package re-creation ownership 56 BIND privilege 44 BINDADD authority details 32 binding | 54              |
| rebinding invalid packages built-in views AUTHORIZATIONIDS example 218 restricting access 220                                             |                 |
| OBJECTOWNERS restricting access PRIVILEGES                                                                                                | 220             |
| example 218 restricting access                                                                                                            | 220             |

34

29

31

| communication exit library (continued) permissions 296 problem determination 298                              |     |
|---------------------------------------------------------------------------------------------------------------|-----|
| configuration LDAP plug-ins 245 Configuration file                                                            |     |
| PKCS #11 108 configure 98                                                                                     |     |
| CONNECT authority 32 CONTEXT events 354                                                                       |     |
| CONTROL privilege details implicit 56 packages 44 views 43 create backup image 114 create database 113        |     |
| CREATE DATABASE command RESTRICTIVE option 220 create encrypted database 113 create keystore 100              |     |
| CREATE ROLE statement creating roles 144 granting membership in roles CREATE TRUSTED CONTEXT statement        | 144 |
| example CREATE_EXTERNAL_ROUTINE authority 32                                                                  |     |
| CREATE_NOT_FENCED_ROUTINE authority 32                                                                        |     |
| CREATETAB authority 32 Creating stash file 110 creating encrypted backup images cryptography 96 85 public key | 114 |

## D

data

| audit creating tables 126 loading into tables 127 encrypting 64 indirect access 61 inserting LBAC-protected 206 adding protection 201 206 overview 201 reading 203 unprotecting 215 updating 208 security inserting   |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| label-based access control (LBAC)                                                                                                                                                                                     |
| overview system 220 data at rest 90 catalog                                                                                                                                                                           |
| DATAACCESS (data access) authority details 38 overview 32                                                                                                                                                             |
| database authorities                                                                                                                                                                                                  |
| granting overview 32                                                                                                                                                                                                  |
| 32                                                                                                                                                                                                                    |
| 32                                                                                                                                                                                                                    |
| revoking                                                                                                                                                                                                              |
| overview                                                                                                                                                                                                              |

195

| database backup image database directories                                           | 114,115                                                                              |
|--------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
| permissions database is encrypted database objects roles 143                         | 114                                                                                  |
| database-level authorities overview 26                                               | database-level authorities overview 26                                               |
| databases accessing                                                                  | databases accessing                                                                  |
| default authorities 49 default privileges 49 implicit privileges through packages 56 | default authorities 49 default privileges 49 implicit privileges through packages 56 |
| label-based access control (LBAC) 183                                                | label-based access control (LBAC) 183                                                |
| 122 96, 98                                                                           | 122 96, 98                                                                           |
| datapath parameter                                                                   | datapath parameter                                                                   |
| DB2 native encryption                                                                | DB2 native encryption                                                                |
| encryption key 96 encrlib 96 encropts 96                                             | encryption key 96 encrlib 96 encropts 96                                             |
| manager 96 Keystore 96 keystore_location 96 Key                                      | manager 96 Keystore 96 keystore_location 96 Key                                      |
| keystore_type 96                                                                     | keystore_type 96                                                                     |
| Master 96 key                                                                        | Master 96 key                                                                        |
| Setting up 99                                                                        | Setting up 99                                                                        |
| DB2_GRP_LOOKUP environment variable 366, 369                                         | DB2_GRP_LOOKUP environment variable 366, 369                                         |
| variable 365                                                                         | variable 365                                                                         |
| DB2_GRP_LOOKUP registry                                                              | DB2_GRP_LOOKUP registry                                                              |
| DBZADMNS group defining who holds SYSADM                                             | DBZADMNS group defining who holds SYSADM                                             |
| authority 369 details 370                                                            | authority 369 details 370                                                            |
| db2auditlog file 116 db2cluster command                                              | db2auditlog file 116 db2cluster command                                              |
| Db2 cluster services administrator 141                                               | Db2 cluster services administrator 141                                               |
| security model 141                                                                   | security model 141                                                                   |
| DBZCOMM registry variable                                                            | DBZCOMM registry variable                                                            |
| configuring Secure Sockets Layer 64                                                  | configuring Secure Sockets Layer 64                                                  |
| (SSL) support                                                                        | (SSL) support                                                                        |
| DBZLBACRULES LBAC rule set                                                           | DBZLBACRULES LBAC rule set                                                           |
| DBZLDAPSecurityConfig environment variable                                           | DBZLDAPSecurityConfig environment variable                                           |
| overview 245                                                                         | overview 245                                                                         |
| 107                                                                                  | 107                                                                                  |
| db2plZtokmip providing explicit values 200                                           | db2plZtokmip providing explicit values 200                                           |
| DBZSECURITYLABEL data type as 200                                                    | DBZSECURITYLABEL data type as 200                                                    |
| viewing string                                                                       | viewing string                                                                       |
| DBZUSERS user group                                                                  | DBZUSERS user group                                                                  |
| details 370                                                                          | details 370                                                                          |
| DBADM (database administration)                                                      | DBADM (database administration)                                                      |
| authority                                                                            | authority                                                                            |
| 219                                                                                  | 219                                                                                  |
| overview 32                                                                          | overview 32                                                                          |
| 60                                                                                   | 60                                                                                   |
| debugging security plug-ins decrypt                                                  | debugging security plug-ins decrypt                                                  |
| controlling access                                                                   | controlling access                                                                   |
| details 35                                                                           | details 35                                                                           |
| retrieving names                                                                     | retrieving names                                                                     |
| 233                                                                                  | 233                                                                                  |
| 96                                                                                   | 96                                                                                   |

| digital certificates managing 64              |
|-----------------------------------------------|
| distinguished name (DN) 248 domain controller |
| overview 361                                  |
| domains                                       |
| ordered domain list 368 security              |
| authentication 364 trust relationships 364    |
| Windows 368 dynamic SQL                       |
| EXECUTE privilege 56                          |

## E

| EXECUTE privilege (continued) routines 46       |
|-------------------------------------------------|
| existing database 114                           |
| EXPLAIN authority details 40 overview 32        |
| trusted connections establishing 151 explicit   |
| user ID switching extended Windows security 370 |

| FGAC See RCAC 161 file names audit 125 fine-grained access control logs   |
|---------------------------------------------------------------------------|
| firewalls                                                                 |
| application proxy 223 circuit level 224 details 223                       |
| screening router 223 stateful multi-layer inspection                      |
| (SMLI) functions                                                          |
| privileges 46 scalar DECRYPT BIN 64                                       |

| global group support 363 Global Security Kit 98                                                                                             |
|---------------------------------------------------------------------------------------------------------------------------------------------|
| GRANT statement example 54 implicit authorizations 56                                                                                       |
| overview 54                                                                                                                                 |
| group lookup support details 239, 250                                                                                                       |
| GROUP_BASEDN parameter 245                                                                                                                  |
| GROUP LOOKUP_ATTRIBUTE attribute 250                                                                                                        |
| GROUP_LOOKUP_METHOD parameter configuring LDAP plug-in modules 245, 250                                                                     |
| GROUP_OBJECTCLASS parameter 245                                                                                                             |
| GROUPNAME_ATTRIBUTE parameter 245 groups                                                                                                    |
| access token 365 enumeration (Windows) 366 names 363 roles comparison 149 selecting user authentication 364 gsk8capicmd 100 GSKCapiCmd tool |
| 64, 76, 78                                                                                                                                  |
| configuring Secure Sockets Layer                                                                                                            |
| (SSL) support                                                                                                                               |

GSKit

98, 100

| GSKit (continued) configuring Secure Sockets Layer (SSL) support 64, 76, 78   |
|-------------------------------------------------------------------------------|
| process rules GSS-APIs authentication plug-ins 293                            |

## H

| handshakes   |
|--------------|
| overview 83  |

| Kerberos authentication protocol enabling 18 IBM i compatibility 19 mapping 16 naming 16 overview 14 plug-ins creating 19 deploying 238 principals 16   |    |
|---------------------------------------------------------------------------------------------------------------------------------------------------------|----|
| server up 14 System compatibility setting                                                                                                               | 19 |
| Windows compatibility manager 98, 101                                                                                                                   |    |
| keydb 100 key                                                                                                                                           |    |
|                                                                                                                                                         | 19 |
| 98, 101                                                                                                                                                 |    |
| keystore                                                                                                                                                |    |
| configuring                                                                                                                                             |    |
| 112                                                                                                                                                     |    |

| KRB_SERVER_ENCRYPT authentication   |
|-------------------------------------|
| type                                |

194

support

| label-based access control See LBAC         |
|---------------------------------------------|
| 183 LBAC                                    |
| credentials 183                             |
| dropping columns 212                        |
| inserting data 206                          |
| overview 183 20,                            |
| protected tables 183                        |
| reading data 203                            |
| removing protection 215                     |
| rule exemptions                             |
| details 199                                 |
| effect on security label                    |
| comparisons 194                             |
| rule sets                                   |
| comparing security labels                   |
| DBZLBACRULES 195 overview 195               |
| security administrators 183 security labels |
| ARRAY component type 187                    |
| comparisons 194                             |
| compatible data types 191                   |
| components 186 191                          |
| creating details 191                        |
| dropping 191                                |
| 191                                         |
| granting overview 183                       |
| revoking 191                                |
| SET component type 187                      |
| format 193 string                           |
| TREE component type 188 security policies   |
| adding to table 201                         |
| details 185                                 |
| overview 183                                |
| 208                                         |
| updating data LDAP                          |
| plug-ins 245, 248 security plug-ins 239     |
| transparent AIX 241                         |
| Kerberos 242                                |
| Linux 244                                   |
| 245                                         |
| LDAP_HOST parameter                         |
| libraries                                   |
| security plug-ins in DB2 251 loading        |
| restrictions 252                            |
| Linux 375                                   |
| security transparent LDAP 244               |
| details 40                                  |
| overview 32                                 |
| manager 98, 115, 116 key                    |
| 98, 100, 112                                |
| authorization 29                            |
| 370                                         |
| 100 LocalSystem account                     |
| LOAD authority                              |
| local                                       |
| local keystore                              |
| local keystore file                         |

LocalSystem account (continued)

| SYSADM authority   | 369   |
|--------------------|-------|
| logs               | logs  |

## M

| master methods key         | 100, 112                   |                            |
|----------------------------|----------------------------|----------------------------|
| privileges                 | 46                         |                            |
| migrate                    | 107                        |                            |
| Migrating                  | Migrating                  |                            |
| Local keystore to PKCS #11 | Local keystore to PKCS #11 | Local keystore to PKCS #11 |
| keystore                   | 111                        |                            |
| migration                  | migration                  |                            |
| roles                      | 150                        |                            |

naming conventions

| objects ownership OBJMAINT events ordered domain lists   | 354 368   |
|----------------------------------------------------------|-----------|
| ownership                                                | 20, 217   |

## P

| packages access privileges for queries authorization IDs derivation 47 use 47 ownership 56 privileges overview 44                     | 56   |
|---------------------------------------------------------------------------------------------------------------------------------------|------|
| revoking (overview) passwords changing                                                                                                |      |
| Linux 375 maintaining on servers 20 permissions authorization overview column-specific protection directories rOW-specific protection | 183  |
| 183 PKCS #11 configuration file 108 PKCS #11 manager 108 PKCS #11 keystore 108 key                                                    |      |
| Migrating from local keystore Set up 108 Stash file 110 PKCS#12 100 plug-ins group retrieval 264                                      | 111  |

plug-ins (continued)

table spaces

42

252

271

| GSS-API authentication 293                                                             |
|----------------------------------------------------------------------------------------|
| LDAP 239                                                                               |
| EXECUTE routines 46 GRANT statement 54 granting roles 149                              |
| hierarchy 20 INDEX 43 indexes overview 45                                              |
| indirect                                                                               |
| expression-based indexes 45                                                            |
| packages containing nicknames 57 individual 20                                         |
| information about granted retrieving 218, 220                                          |
| INSERT 43                                                                              |
| overview 20                                                                            |
| ownership 20 packages creating 44                                                      |
| implicit 20                                                                            |
| planning REFERENCES                                                                    |
| 43                                                                                     |
| revoking                                                                               |
| overview 54 roles 146                                                                  |
| roles 143                                                                              |
| schemas 41                                                                             |
| CONTROL 43 DELETE 43                                                                   |
| Prerequisites for DB2 native encryption 98 acquiring through trusted context roles 156 |
| privileges                                                                             |
| ALTER                                                                                  |
| sequences 46                                                                           |
| tables 43                                                                              |
| SELECT 43                                                                              |
| system                                                                                 |
| SETSESSIONUSER catalog                                                                 |
| 41                                                                                     |
| privilege information 217                                                              |
| 220                                                                                    |
| restricting access                                                                     |

| privileges (continued) tables 43              |
|-----------------------------------------------|
| UPDATE 43                                     |
| USAGE                                         |
| sequences 46                                  |
| workloads 47                                  |
| views 43                                      |
| Privileges                                    |
| Public                                        |
| Routine 51                                    |
| problem determination                         |
| security plug-ins 233 procedures              |
| privileges 46                                 |
| PUBLIC                                        |
| database authorities automatically granted 32 |
| Public #12 100                                |
| public-key cryptography 85                    |
| Cryptography Standard                         |
| Key                                           |

QUIESCE\_CONNECT authority

## R

RCAC

| roles (continued) hierarchies 146 migrating from IBM Informix Dynamic Server 150 revoking privileges 146 149                                       |
|----------------------------------------------------------------------------------------------------------------------------------------------------|
| routine invoker authorization IDs 47 Routines Privilege Public 51 key                                                                              |
| row and column access control                                                                                                                      |
| See RCAC 161 rows                                                                                                                                  |
| deleting LBAC-protected data 212 inserting LBAC-protected data 206 protecting with LBAC 201 reading when LBAC 203 removing LBAC 215 updating using |
| LBAC-protected data 208                                                                                                                            |
| details 195                                                                                                                                        |
| rule sets (LBAC)                                                                                                                                   |
| 199                                                                                                                                                |
| exemptions                                                                                                                                         |

## S

SafeNet

| KeySecure 106 same location 115                                                                         |
|---------------------------------------------------------------------------------------------------------|
| details 34 overview 32                                                                                  |
| overview 200                                                                                            |
| SECLABEL_TO_CHAR scalar function SECMAINT events 354                                                    |
| SEARCH_PW parameter SECADM Internal system-defined routine 29 SECADM (security administrator) authority |
| SECLABEL scalar function overview 200 SECLABEL_BY_NAME scalar function                                  |
| overview 200                                                                                            |
| security authentication 2 CLIENT level                                                                  |
| column-specific 183 communication buffer exit libraries                                                 |
| control over connections 311 DATA ENCRYPT authentication 318 functions structure 308 overview 295       |
| communication buffer exit library information structure 310 communication exit libraries                |
| API                                                                                                     |
| calling                                                                                                 |
| sequences (connection concentrator) 316                                                                 |

| security (continued) communication exit libraries                              | security (continued) communication exit libraries                              |
|--------------------------------------------------------------------------------|--------------------------------------------------------------------------------|
| (continued)                                                                    | (continued)                                                                    |
| API sequences (no connect calling                                              | API sequences (no connect calling                                              |
| reset) 315 API calling sequences (normal                                       | reset) 315 API calling sequences (normal                                       |
| connection) 314                                                                | connection) 314                                                                |
| API calling sequences                                                          | API calling sequences                                                          |
| (overview) 314                                                                 | (overview) 314                                                                 |
| API calling sequences (SET                                                     | API calling sequences (SET                                                     |
| SESSION AUTHORIZATION statement) 317                                           | SESSION AUTHORIZATION statement) 317                                           |
| API calling sequences (trusted                                                 | API calling sequences (trusted                                                 |
| context) 316 API summary 300                                                   | context) 316 API summary 300                                                   |
| API versions                                                                   | API versions                                                                   |
| buffer structure 311                                                           | buffer structure 311                                                           |
| connect gateway 318                                                            | connect gateway 318                                                            |
| deploying 295                                                                  | deploying 295                                                                  |
| developing 299, 312                                                            | developing 299, 312                                                            |
| enabling 297, 298                                                              | enabling 297, 298                                                              |
| error handling 312                                                             | error handling 312                                                             |
| library loading 299                                                            | library loading 299                                                            |
| location 296                                                                   | location 296                                                                   |
| naming conventions 296                                                         | naming conventions 296                                                         |
| permissions 296 problem determination                                          | 298                                                                            |
| restrictions 312                                                               | restrictions 312                                                               |
| return codes 312                                                               | return codes 312                                                               |
| target logical node 318                                                        | target logical node 318                                                        |
| data db2extsec command 370                                                     | data db2extsec command 370                                                     |
| disabling extended security                                                    | 370                                                                            |
| enabling extended security 370                                                 | enabling extended security 370                                                 |
| encryption 85, 87 explicit trusted connections                                 | 151                                                                            |
| extended security 370                                                          | extended security 370                                                          |
| fine-grained access control                                                    | fine-grained access control                                                    |
| See RCAC 161                                                                   | See RCAC 161                                                                   |
| indirect access to data 61                                                     | indirect access to data 61                                                     |
| label-based access control                                                     | label-based access control                                                     |
| (LBAC) 183 NIST SP 800-131A                                                    | (LBAC) 183 NIST SP 800-131A                                                    |
| passwords on servers 20 plug-ins                                               | passwords on servers 20 plug-ins                                               |
| 32-bit considerations 233                                                      | 32-bit considerations 233                                                      |
| 64-bit considerations 233                                                      | 64-bit considerations 233                                                      |
| API sequence 259 APIs 263, 265, 266, 267, 270, 271, calling                    | API sequence 259 APIs 263, 265, 266, 267, 270, 271, calling                    |
| 277 , 278, 279, 280, 282, 284, 285,                                            | 277 , 278, 279, 280, 282, 284, 285,                                            |
| 264                                                                            | 264                                                                            |
| APIs (group retrieval) APIs (GSS-API)                                          | APIs (group retrieval) APIs (GSS-API)                                          |
| 293                                                                            | 293                                                                            |
| APIs (user ID / password) 271                                                  | APIs (user ID / password) 271                                                  |
| APIs (versions) 233 deploying 225, 235, 236, 238, 254, 375 developing 225, 252 | APIs (versions) 233 deploying 225, 235, 236, 238, 254, 375 developing 225, 252 |
| 225                                                                            | 225                                                                            |
| 259                                                                            | 259                                                                            |
| 235                                                                            | 235                                                                            |
| 236                                                                            | 236                                                                            |
| 294                                                                            | 294                                                                            |
| 375                                                                            | 375                                                                            |
| IBMOSchgpwdclient                                                              | IBMOSchgpwdclient                                                              |
| 375                                                                            | 375                                                                            |
| GSS-API (restrictions)                                                         | GSS-API (restrictions)                                                         |
| GSS-API (deploying)                                                            | GSS-API (deploying)                                                            |
| error messages group retrieval                                                 | error messages group retrieval                                                 |
| enabling                                                                       | enabling                                                                       |

IBMOSchgpwdserver

| security (continued)                                                                                                                                                                                                                                                                                                                                                                                                                                   |
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| plug-ins (continued) initialization 251 Kerberos 238 LDAP (Lightweight Directory Access Protocol) 239 libraries 229 225, 251 naming 230 overview 225 problem determination 233 restrictions on libraries 252 return codes 256 SQLCODE values 233 SQLSTATE values 233 two-part user ID support 231 user ID / password 235 row and column access control See RCAC 161 row-specific 183 trusted contexts 153 UNIX 375 Windows domain security 368 loading |
| extended 370 overview 361                                                                                                                                                                                                                                                                                                                                                                                                                              |
| users 369                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| security labels (LBAC) ARRAY component type                                                                                                                                                                                                                                                                                                                                                                                                            |
| 187 compatible data types 191 components 186                                                                                                                                                                                                                                                                                                                                                                                                           |
| overview 191                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| policies                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| details 185                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| SET component type 193                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| 187 string format                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| TREE component type                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| 43                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| 188 SELECT privilege                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| sequences privileges 46                                                                                                                                                                                                                                                                                                                                                                                                                                |
| server authentication plug-ins 239 SERVER authentication type overview                                                                                                                                                                                                                                                                                                                                                                                 |
| SERVER_ENCRYPT authentication type overview session authorization IDs                                                                                                                                                                                                                                                                                                                                                                                  |
| overview 47                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| SET ENCRYPTION PASSWORD                                                                                                                                                                                                                                                                                                                                                                                                                                |
| statement 64                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| encrypting passwords                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| SETSESSIONUSER privilege                                                                                                                                                                                                                                                                                                                                                                                                                               |
| details 41                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| authorization IDs 47                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| SQL statements                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| SQLADM (SQL administration) authority details 38                                                                                                                                                                                                                                                                                                                                                                                                       |
| overview 32                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| SSL 104, 106 command 78                                                                                                                                                                                                                                                                                                                                                                                                                                |
| CATALOG TCPIP NODE certificate authorities 84 cipher suites 87                                                                                                                                                                                                                                                                                                                                                                                         |
| CLI clients 78                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| CLP clients 78                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| configuring DB2 clients 76, 78                                                                                                                                                                                                                                                                                                                                                                                                                         |
| DB2 instances 64                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| SSL (continued) DB2 Connect 64 digital certificates 84 embedded SQL clients 78 handshake 83 overview 83 SSL configuration primary and secondary HADR servers Linux AMD64 Intel 73 ssl_cipherspecs configuration parameter specifying cipher suites 64, 87   |                               |
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------|
| 130 Statement Value Index field 130 Statement Value Type field 130                                                                                                                                                                                          |                               |
| EXECUTE privilege 56 switching user IDs 151, 157 SYSADM (system administration)                                                                                                                                                                             |                               |
| ssl_clnt_keydb configuration parameter 76, 78                                                                                                                                                                                                               |                               |
| configuring SSL                                                                                                                                                                                                                                             |                               |
| ssl_clnt_stash configuration parameter                                                                                                                                                                                                                      |                               |
| configuring SSL 78                                                                                                                                                                                                                                          |                               |
| SSL_KEYFILE 245 SSL_PW 245                                                                                                                                                                                                                                  |                               |
| SSL_RSA                                                                                                                                                                                                                                                     |                               |
| FIPS_WITH_3DES_EDE_CBC_SHA                                                                                                                                                                                                                                  |                               |
| cipher suite 64 ssl_svcename configuration parameter                                                                                                                                                                                                        |                               |
| configuring SSL 64 ss]_svr_ keydb configuration parameter                                                                                                                                                                                                   |                               |
| 64                                                                                                                                                                                                                                                          |                               |
| configuring SSL                                                                                                                                                                                                                                             |                               |
| ssl_svr_stash configuration parameter configuring SSL 64                                                                                                                                                                                                    |                               |
| 64                                                                                                                                                                                                                                                          |                               |
| ssl_versions configuration parameter configuring SSL                                                                                                                                                                                                        |                               |
| SSLClientKeystash configuration                                                                                                                                                                                                                             |                               |
| parameter 78 SSLClientKeystash connection string                                                                                                                                                                                                            |                               |
| parameter 78                                                                                                                                                                                                                                                |                               |
| SSLClientKeystoredb connection string parameter 78 Statement Value Data field                                                                                                                                                                               |                               |
| static SQL                                                                                                                                                                                                                                                  |                               |
| authority                                                                                                                                                                                                                                                   |                               |
| details 29                                                                                                                                                                                                                                                  |                               |
| Windows 369                                                                                                                                                                                                                                                 |                               |
| sysadm_group configuration parameter Windows 369                                                                                                                                                                                                            |                               |
| SYSADMIN events 354 SYSCAT views                                                                                                                                                                                                                            |                               |
| security issues 217                                                                                                                                                                                                                                         |                               |
| SYSCTRL (system control) authority                                                                                                                                                                                                                          |                               |
| details 30                                                                                                                                                                                                                                                  |                               |
| SYSDEFAULTADMWORKLOAD workload 47                                                                                                                                                                                                                           |                               |
| SYSDEFAULTUSERWORKLOAD                                                                                                                                                                                                                                      |                               |
| workload 47                                                                                                                                                                                                                                                 |                               |
| SYSMAINT (system maintenance) authority                                                                                                                                                                                                                     |                               |
| details 31                                                                                                                                                                                                                                                  |                               |
| SYSMON (system monitor) authority details 32 SYSPROC.AUDIT                                                                                                                                                                                                  |                               |
| ARCHIVE stored                                                                                                                                                                                                                                              |                               |
| procedure 122, 128 SYSPROCAUDIT_DELIM_EXTRACT                                                                                                                                                                                                               |                               |
| stored procedure 122, 128                                                                                                                                                                                                                                   |                               |
| 128                                                                                                                                                                                                                                                         |                               |
| procedure                                                                                                                                                                                                                                                   |                               |
| system authorization IDs                                                                                                                                                                                                                                    |                               |
| 47                                                                                                                                                                                                                                                          |                               |
| SYSPROCAUDIT_LIST_LOGS stored                                                                                                                                                                                                                               | SYSPROCAUDIT_LIST_LOGS stored |

system catalogs

| listing privileges 217 retrieving            |
|----------------------------------------------|
| authorization names with privileges 218      |
| names with DBADM authority 219               |
| names with table access authority 219        |
| privileges granted to names 220 security 220 |

| table spaces privileges 42 tables                                                                                                     |
|---------------------------------------------------------------------------------------------------------------------------------------|
| authorized names 219 revoking privileges 54 TLS (transport security) 83 TLS_RSA WITH_3DES_EDE_CBC_SHA cipher suite 64, 87 layer       |
| TLS_RSA WITH_AES_128_CBC_SHA cipher suite 64, 87 TLS_RSA WITH_AES_256_CBC_SHA                                                         |
| cipher suite 64, 87                                                                                                                   |
| Transport Layer Security (TLS) overview 83                                                                                            |
| troubleshooting security plug-ins 233 trust relationships Windows 364                                                                 |
| trusted clients CLIENT authentication type trusted connections                                                                        |
| establishing explicit trusted connections 151 overview 153 trusted contexts audit policies 118 overview 153 problem determination 159 |
| role membership inheritance 156                                                                                                       |

| UDFs non-fenced 32                                |
|---------------------------------------------------|
| UPDATE privilege 43 updates                       |
| effects of LBAC on 208 USAGE privilege details 46 |
| workloads 47                                      |
| user IDs LDAP 248 selecting                       |
| switching                                         |
| 157                                               |

| user IDs (continued) two-part   |
|---------------------------------|
| user names                      |
| Windows restrictions 363        |
| USER_BASEDN 245                 |
| USER_OBJECTCLASS 245            |
| USERID_ ATTRIBUTE 245           |

| VALIDATE events 354 verify 114                                                          |
|-----------------------------------------------------------------------------------------|
| verifying the database backup image is encrypted 114                                    |
| views                                                                                   |
| access privileges examples 58 column access 58 privileges information 220 row access 58 |

## W

| Windows extended security 370                                             |            |
|---------------------------------------------------------------------------|------------|
| LocalSystem account (LSA) 370 support                                     |            |
| scenarios client authentication 362                                       |            |
| server authentication 362 user accounts access tokens 365 windows         |            |
| User Access Control (UAC) feature 374                                     |            |
| WITH ADMIN OPTION clause delegating role maintenance 148 WITH DATA option |            |
| details 130 WLMADM (workload administration) authority details 39         |            |
| overview 32                                                               |            |
| details 195                                                               |            |
| details 195                                                               |            |
| write-up                                                                  |            |
|                                                                           | write-down |

| XQuery     |
|------------|
| dynamic 56 |
| static 56  |

Printed in USA